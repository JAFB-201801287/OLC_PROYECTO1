/* The following code was generated by JFlex 1.4.3 on 8/24/21, 5:57 PM */

package com.proyecto1.compiler.analyzer;
import static com.proyecto1.compiler.analyzer.Tokens.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 8/24/21, 5:57 PM from the specification file
 * <tt>/home/jafb/NetBeansProjects/OLC_PROYECTO1/src/com/proyecto1/compiler/analyzer/Lexer.flex</tt>
 */
class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\6\2\0\1\3\22\0\1\3\1\0\1\54\1\4"+
    "\1\35\2\0\1\51\1\25\1\26\1\5\1\0\1\3\1\0\1\50"+
    "\1\0\12\2\1\34\1\33\1\0\1\24\3\0\1\37\1\21\1\41"+
    "\1\16\1\23\1\36\1\15\1\43\1\13\1\45\1\1\1\22\1\42"+
    "\1\14\1\17\1\40\1\1\1\12\1\10\1\11\1\20\1\44\1\1"+
    "\1\46\1\47\1\1\1\31\1\0\1\32\1\0\1\1\1\0\1\37"+
    "\1\21\1\41\1\16\1\23\1\36\1\15\1\43\1\13\1\45\1\1"+
    "\1\22\1\42\1\14\1\17\1\40\1\1\1\12\1\10\1\11\1\20"+
    "\1\44\1\1\1\46\1\47\1\1\1\27\1\7\1\30\u1f9a\0\1\52"+
    "\1\53\2\0\1\55\1\56\udfe2\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\1\1\3\1\1\1\4\1\1"+
    "\5\2\1\5\1\6\1\7\1\10\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\3\2\4\1\2\0\1\3\11\0"+
    "\2\2\1\0\2\2\1\0\3\2\1\0\1\2\1\0"+
    "\2\2\1\0\1\17\1\0\1\17\1\0\1\20\1\0"+
    "\1\20\1\21\17\0\2\2\1\0\2\2\1\0\6\2"+
    "\1\3\1\22\10\0\1\22\5\0\2\2\1\0\2\2"+
    "\1\0\2\2\1\22\3\2\20\0\2\2\1\0\2\2"+
    "\1\0\5\2\1\23\2\0\1\23\1\24\1\23\6\0"+
    "\3\23\1\0\1\23\1\24\1\0\6\2\1\25\1\26"+
    "\1\0\1\27\1\25\1\0\1\30\1\31\2\0\1\26"+
    "\1\27\1\30\1\31\1\0\3\2\1\27\1\25\1\26"+
    "\11\0\5\2\12\0\5\2\1\32\3\0\1\32\1\0"+
    "\1\32\1\0\2\32\2\2\1\32\2\2\7\0\4\2"+
    "\10\0\4\2\2\33\2\0\1\33\1\34\1\0\2\33"+
    "\1\34\2\2\3\0\2\2\2\35\1\0\1\2\1\35"+
    "\1\0\1\2\1\0\1\2\1\0\1\2\1\0\1\2"+
    "\1\0\1\2\1\0\1\2\1\0\1\2\1\0\1\2"+
    "\1\0\1\2\2\36";

  private static int [] zzUnpackAction() {
    int [] result = new int[302];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\57\0\136\0\215\0\274\0\353\0\57\0\u011a"+
    "\0\u0149\0\u0178\0\u01a7\0\u01d6\0\u0205\0\57\0\57\0\57"+
    "\0\57\0\57\0\57\0\57\0\57\0\57\0\57\0\u0234"+
    "\0\u0263\0\u0292\0\u02c1\0\u02f0\0\u031f\0\u034e\0\215\0\u037d"+
    "\0\u03ac\0\u03db\0\u040a\0\u0439\0\u0468\0\u0497\0\u04c6\0\u04f5"+
    "\0\u0524\0\u0553\0\u0582\0\u05b1\0\u05e0\0\u060f\0\u063e\0\u066d"+
    "\0\u069c\0\u06cb\0\u06fa\0\u0729\0\u0758\0\u0787\0\u07b6\0\u07e5"+
    "\0\u02c1\0\57\0\u02f0\0\u02f0\0\u031f\0\57\0\u034e\0\u034e"+
    "\0\u037d\0\u0814\0\u0843\0\u0872\0\u08a1\0\u08d0\0\u08ff\0\u092e"+
    "\0\u095d\0\u098c\0\u09bb\0\u09ea\0\u0a19\0\u0a48\0\u0a77\0\u0aa6"+
    "\0\u0ad5\0\u0b04\0\u0b33\0\u0b62\0\u0b91\0\u0bc0\0\u0bef\0\u0c1e"+
    "\0\u0c4d\0\u0c7c\0\u0cab\0\u0cda\0\u03db\0\u0d09\0\u0d38\0\u0d67"+
    "\0\u0d96\0\u0dc5\0\u0df4\0\u0e23\0\u0e52\0\u0e81\0\57\0\u0eb0"+
    "\0\u0edf\0\u0f0e\0\u0f3d\0\u0f6c\0\u0f9b\0\u0fca\0\u0ff9\0\u1028"+
    "\0\u1057\0\u1086\0\u10b5\0\u10e4\0\136\0\u1113\0\u1142\0\u1171"+
    "\0\u11a0\0\u11cf\0\u11fe\0\u122d\0\u125c\0\u128b\0\u12ba\0\u12e9"+
    "\0\u1318\0\u1347\0\u1376\0\u13a5\0\u13d4\0\u1403\0\u1432\0\u1461"+
    "\0\u1490\0\u14bf\0\u14ee\0\u151d\0\u154c\0\u157b\0\u15aa\0\u15d9"+
    "\0\u1608\0\u1637\0\u1666\0\u1695\0\u16c4\0\u16f3\0\57\0\u1722"+
    "\0\u1751\0\u1780\0\u17af\0\u17de\0\u180d\0\u1751\0\u183c\0\u16f3"+
    "\0\u1722\0\u16c4\0\u186b\0\136\0\u189a\0\u18c9\0\u18f8\0\u1927"+
    "\0\u1956\0\u1985\0\u19b4\0\u19e3\0\u1a12\0\57\0\u1a41\0\57"+
    "\0\57\0\u1a70\0\57\0\57\0\u1a9f\0\u1ace\0\u1ace\0\u1a70"+
    "\0\136\0\136\0\u1afd\0\u1b2c\0\u1b5b\0\u1b8a\0\136\0\136"+
    "\0\136\0\u1bb9\0\u1be8\0\u1c17\0\u1c46\0\u1c75\0\u1ca4\0\u1cd3"+
    "\0\u1d02\0\u1d31\0\u1d60\0\u1d8f\0\u1dbe\0\u1ded\0\u1e1c\0\u1e4b"+
    "\0\u1e7a\0\u1ea9\0\u1ed8\0\u1f07\0\u1f36\0\u1f65\0\u1f94\0\u1fc3"+
    "\0\u1ff2\0\u2021\0\u2050\0\u207f\0\u20ae\0\u20dd\0\u210c\0\u213b"+
    "\0\u216a\0\u2199\0\57\0\u21c8\0\u216a\0\u21f7\0\u2226\0\u2255"+
    "\0\u2284\0\u22b3\0\136\0\u22e2\0\u2311\0\u2340\0\u236f\0\u239e"+
    "\0\u23cd\0\u23fc\0\u242b\0\u245a\0\u2489\0\u24b8\0\u24e7\0\u2516"+
    "\0\u2545\0\u2574\0\u25a3\0\u25d2\0\u2601\0\u2630\0\u265f\0\u268e"+
    "\0\u26bd\0\u26ec\0\u271b\0\u274a\0\u2779\0\57\0\u27a8\0\u27d7"+
    "\0\u27d7\0\57\0\u2779\0\u27a8\0\136\0\136\0\u2806\0\u2835"+
    "\0\u2864\0\u2893\0\u28c2\0\u28f1\0\u2920\0\u294f\0\57\0\u294f"+
    "\0\u297e\0\136\0\u29ad\0\u29dc\0\u2a0b\0\u2a3a\0\u2a69\0\u2a98"+
    "\0\u2ac7\0\u2af6\0\u2b25\0\u2b54\0\u2b83\0\u2bb2\0\u2be1\0\u2c10"+
    "\0\u2c3f\0\u2c6e\0\u2c9d\0\u2ccc\0\57\0\136";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[302];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\2\1\7\1\10"+
    "\1\11\1\12\3\3\1\13\1\14\4\3\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\3\1\30\1\3\1\31\2\3\1\32\3\3"+
    "\1\2\1\33\1\34\1\2\1\35\1\36\1\2\60\0"+
    "\2\3\5\0\14\3\12\0\12\3\11\0\1\37\45\0"+
    "\1\40\11\0\1\5\57\0\1\41\1\42\60\0\1\43"+
    "\1\0\1\44\1\45\1\46\3\0\1\47\3\0\1\50"+
    "\13\0\1\51\5\0\1\52\12\0\2\3\4\0\1\44"+
    "\1\3\1\53\12\3\12\0\12\3\10\0\2\3\4\0"+
    "\1\46\3\3\1\54\10\3\12\0\12\3\10\0\2\3"+
    "\4\0\1\55\2\3\1\56\10\3\1\57\12\0\12\3"+
    "\10\0\2\3\4\0\1\60\7\3\1\61\3\3\1\62"+
    "\12\0\12\3\10\0\2\3\4\0\1\52\14\3\12\0"+
    "\7\3\1\63\2\3\10\0\2\3\4\0\1\64\2\3"+
    "\1\65\11\3\12\0\12\3\10\0\2\3\4\0\1\66"+
    "\7\3\1\67\4\3\12\0\12\3\10\0\2\3\4\0"+
    "\1\51\14\3\12\0\1\3\1\70\10\3\7\0\51\71"+
    "\1\72\5\71\51\73\1\0\1\73\1\74\3\73\54\75"+
    "\1\76\2\75\55\77\1\0\1\100\2\0\1\101\54\0"+
    "\6\41\1\0\50\41\5\42\1\102\51\42\7\0\1\103"+
    "\1\0\1\104\1\105\1\0\1\106\3\0\1\107\1\0"+
    "\1\110\1\111\12\0\1\112\1\113\1\0\1\114\1\115"+
    "\23\0\1\105\2\0\1\105\53\0\1\116\27\0\1\113"+
    "\1\0\1\114\24\0\1\104\1\0\1\104\54\0\1\117"+
    "\10\0\1\107\21\0\1\115\23\0\1\120\4\0\1\106"+
    "\21\0\1\112\27\0\1\110\12\0\1\110\43\0\1\111"+
    "\13\0\1\111\34\0\2\3\4\0\1\105\2\3\1\121"+
    "\11\3\12\0\12\3\10\0\2\3\4\0\1\104\1\3"+
    "\1\122\12\3\12\0\12\3\16\0\1\123\4\0\1\106"+
    "\22\0\1\113\20\0\2\3\4\0\1\113\14\3\12\0"+
    "\1\3\1\124\10\3\10\0\2\3\4\0\1\106\4\3"+
    "\1\125\7\3\12\0\12\3\16\0\1\126\10\0\1\107"+
    "\15\0\1\112\21\0\2\3\4\0\1\107\10\3\1\127"+
    "\3\3\12\0\12\3\10\0\2\3\4\0\1\112\14\3"+
    "\12\0\1\130\11\3\10\0\2\3\4\0\1\111\13\3"+
    "\1\131\12\0\12\3\16\0\1\114\31\0\1\114\16\0"+
    "\2\3\4\0\1\114\14\3\12\0\3\3\1\132\6\3"+
    "\16\0\1\115\32\0\1\115\15\0\2\3\4\0\1\115"+
    "\14\3\12\0\4\3\1\133\5\3\10\0\2\3\4\0"+
    "\1\110\12\3\1\134\1\3\12\0\12\3\7\0\4\42"+
    "\1\135\1\102\51\42\7\0\1\136\3\0\1\137\3\0"+
    "\1\140\1\141\1\142\1\0\1\143\12\0\1\144\1\0"+
    "\1\145\2\0\1\146\2\0\1\147\17\0\1\141\10\0"+
    "\1\141\45\0\1\150\3\0\1\150\52\0\1\143\13\0"+
    "\1\143\42\0\1\142\11\0\1\142\44\0\1\140\7\0"+
    "\1\140\46\0\1\147\36\0\1\147\17\0\1\151\3\0"+
    "\1\151\52\0\1\144\26\0\1\144\27\0\1\146\33\0"+
    "\1\146\22\0\1\145\30\0\1\145\25\0\1\152\26\0"+
    "\1\144\4\0\1\146\22\0\1\153\11\0\1\142\16\0"+
    "\1\145\25\0\1\154\3\0\1\151\7\0\1\143\34\0"+
    "\2\3\4\0\1\150\3\3\1\155\10\3\12\0\12\3"+
    "\10\0\2\3\4\0\1\141\10\3\1\156\3\3\12\0"+
    "\12\3\16\0\1\157\13\0\1\143\12\0\1\144\21\0"+
    "\2\3\4\0\1\144\14\3\12\0\1\160\11\3\10\0"+
    "\2\3\4\0\1\143\13\3\1\161\12\0\12\3\16\0"+
    "\1\162\3\0\1\151\5\0\1\142\36\0\2\3\4\0"+
    "\1\142\11\3\1\163\2\3\12\0\12\3\10\0\2\3"+
    "\4\0\1\151\3\3\1\164\10\3\12\0\12\3\10\0"+
    "\2\3\4\0\1\147\14\3\12\0\10\3\1\165\1\3"+
    "\10\0\2\3\4\0\1\146\14\3\12\0\5\3\1\166"+
    "\4\3\10\0\2\3\4\0\1\145\14\3\12\0\2\3"+
    "\1\167\7\3\10\0\2\3\4\0\1\140\7\3\1\170"+
    "\4\3\12\0\12\3\16\0\1\171\2\0\1\172\1\173"+
    "\1\174\5\0\1\175\14\0\1\176\26\0\1\174\4\0"+
    "\1\174\51\0\1\177\2\0\1\177\53\0\1\200\12\0"+
    "\1\200\43\0\1\201\12\0\1\201\43\0\1\202\2\0"+
    "\1\202\53\0\1\203\3\0\1\203\52\0\1\176\27\0"+
    "\1\176\26\0\1\204\3\0\1\204\52\0\1\205\4\0"+
    "\1\205\51\0\1\206\4\0\1\206\51\0\1\173\3\0"+
    "\1\173\52\0\1\207\12\0\1\201\14\0\1\176\26\0"+
    "\1\210\2\0\1\202\1\0\1\206\43\0\2\3\4\0"+
    "\1\205\4\3\1\211\7\3\12\0\12\3\10\0\2\3"+
    "\4\0\1\200\12\3\1\212\1\3\12\0\12\3\16\0"+
    "\1\213\2\0\1\202\1\203\44\0\2\3\4\0\1\203"+
    "\3\3\1\214\10\3\12\0\12\3\10\0\2\3\4\0"+
    "\1\202\2\3\1\215\11\3\12\0\12\3\16\0\1\216"+
    "\4\0\1\206\5\0\1\201\35\0\2\3\4\0\1\201"+
    "\12\3\1\217\1\3\12\0\12\3\10\0\2\3\4\0"+
    "\1\206\4\3\1\220\7\3\12\0\12\3\10\0\2\3"+
    "\4\0\1\204\3\3\1\221\10\3\12\0\12\3\10\0"+
    "\2\3\4\0\1\176\14\3\12\0\1\3\1\222\10\3"+
    "\10\0\2\3\4\0\1\177\2\3\1\223\11\3\12\0"+
    "\12\3\16\0\1\224\2\0\1\225\1\226\1\0\1\227"+
    "\1\0\1\230\3\0\1\231\13\0\1\232\1\0\1\233"+
    "\2\0\1\234\21\0\1\235\13\0\1\236\13\0\1\232"+
    "\26\0\1\237\31\0\1\233\2\0\1\234\21\0\1\240"+
    "\3\0\1\226\1\0\1\227\50\0\1\241\7\0\1\230"+
    "\3\0\1\227\42\0\1\225\2\0\1\225\53\0\1\236"+
    "\13\0\1\236\42\0\1\230\7\0\1\230\46\0\1\227"+
    "\13\0\1\227\42\0\1\232\27\0\1\232\26\0\1\233"+
    "\31\0\1\233\24\0\1\234\34\0\1\234\21\0\1\227"+
    "\5\0\1\227\50\0\1\226\3\0\1\226\52\0\1\242"+
    "\2\0\1\225\10\0\1\227\42\0\1\243\3\0\1\226"+
    "\23\0\1\232\20\0\2\3\4\0\1\227\5\3\1\244"+
    "\6\3\12\0\12\3\10\0\2\3\4\0\1\230\7\3"+
    "\1\245\4\3\12\0\12\3\16\0\1\246\27\0\1\232"+
    "\1\0\1\233\16\0\2\3\4\0\1\233\14\3\12\0"+
    "\3\3\1\247\6\3\10\0\2\3\4\0\1\232\14\3"+
    "\12\0\1\3\1\250\10\3\16\0\1\240\3\0\1\226"+
    "\7\0\1\227\34\0\2\3\4\0\1\227\13\3\1\244"+
    "\12\0\12\3\10\0\2\3\4\0\1\226\3\3\1\251"+
    "\10\3\12\0\12\3\10\0\2\3\4\0\1\234\14\3"+
    "\12\0\6\3\1\252\3\3\10\0\2\3\4\0\1\225"+
    "\2\3\1\253\11\3\12\0\12\3\10\0\2\3\4\0"+
    "\1\236\13\3\1\254\12\0\12\3\16\0\1\255\1\256"+
    "\1\0\1\257\4\0\1\260\3\0\1\261\13\0\1\262"+
    "\6\0\1\263\1\264\16\0\1\261\13\0\1\261\42\0"+
    "\1\265\2\0\1\265\53\0\1\263\36\0\1\263\1\264"+
    "\16\0\2\256\55\0\1\266\2\0\1\266\53\0\1\262"+
    "\27\0\1\262\26\0\1\260\7\0\1\260\46\0\1\267"+
    "\1\256\1\0\1\266\53\0\1\270\7\0\1\260\17\0"+
    "\1\262\26\0\1\257\2\0\1\257\45\0\2\3\4\0"+
    "\1\263\14\3\12\0\10\3\1\271\1\272\16\0\1\273"+
    "\2\0\1\266\24\0\1\262\20\0\2\3\4\0\1\262"+
    "\14\3\12\0\1\3\1\274\10\3\10\0\2\3\4\0"+
    "\1\266\2\3\1\275\11\3\12\0\12\3\10\0\2\3"+
    "\4\0\1\265\2\3\1\276\11\3\12\0\12\3\10\0"+
    "\2\3\4\0\1\260\7\3\1\277\4\3\12\0\12\3"+
    "\10\0\2\3\4\0\1\261\13\3\1\300\12\0\12\3"+
    "\10\0\2\3\4\0\1\256\1\301\13\3\12\0\12\3"+
    "\16\0\1\302\2\0\1\303\2\0\1\304\3\0\1\305"+
    "\1\306\15\0\1\307\25\0\1\310\2\0\1\303\2\0"+
    "\1\304\50\0\1\311\11\0\1\305\1\306\15\0\1\307"+
    "\25\0\1\304\5\0\1\304\50\0\1\303\2\0\1\303"+
    "\53\0\1\312\2\0\1\303\6\0\1\305\1\306\15\0"+
    "\1\307\17\0\2\3\4\0\1\311\11\3\1\313\1\314"+
    "\1\3\12\0\2\3\1\315\7\3\10\0\2\3\4\0"+
    "\1\303\2\3\1\316\11\3\12\0\12\3\10\0\2\3"+
    "\4\0\1\304\5\3\1\317\6\3\12\0\12\3\16\0"+
    "\1\320\3\0\1\321\6\0\1\322\1\323\13\0\1\324"+
    "\26\0\1\323\13\0\1\323\42\0\1\322\12\0\1\322"+
    "\43\0\1\324\27\0\1\324\26\0\1\325\3\0\1\325"+
    "\52\0\1\326\3\0\1\326\52\0\1\327\12\0\1\322"+
    "\1\323\42\0\1\330\3\0\1\321\23\0\1\324\26\0"+
    "\1\331\3\0\1\321\7\0\1\323\13\0\1\324\20\0"+
    "\2\3\4\0\1\324\14\3\12\0\1\3\1\332\10\3"+
    "\10\0\2\3\4\0\1\325\3\3\1\333\10\3\12\0"+
    "\12\3\10\0\2\3\4\0\1\326\3\3\1\334\10\3"+
    "\12\0\12\3\10\0\2\3\4\0\1\323\13\3\1\335"+
    "\12\0\12\3\10\0\2\3\4\0\1\322\12\3\1\336"+
    "\1\3\12\0\12\3\16\0\1\337\2\0\1\340\1\0"+
    "\1\341\2\0\1\342\3\0\1\343\14\0\1\344\25\0"+
    "\1\345\4\0\1\341\6\0\1\343\42\0\1\342\7\0"+
    "\1\342\46\0\1\344\30\0\1\344\25\0\1\340\2\0"+
    "\1\340\53\0\1\341\4\0\1\341\51\0\1\343\13\0"+
    "\1\343\42\0\1\346\7\0\1\342\20\0\1\344\25\0"+
    "\1\347\2\0\1\340\1\0\1\341\6\0\1\343\42\0"+
    "\1\350\2\0\1\340\1\0\1\341\6\0\1\343\14\0"+
    "\1\344\17\0\2\3\4\0\1\340\2\3\1\351\11\3"+
    "\12\0\12\3\10\0\2\3\4\0\1\341\4\3\1\352"+
    "\7\3\12\0\12\3\10\0\2\3\4\0\1\343\13\3"+
    "\1\353\12\0\12\3\10\0\2\3\4\0\1\344\14\3"+
    "\12\0\2\3\1\354\7\3\10\0\2\3\4\0\1\342"+
    "\7\3\1\355\4\3\12\0\12\3\16\0\1\356\2\0"+
    "\1\357\4\0\1\360\1\0\1\361\1\0\1\362\42\0"+
    "\1\357\2\0\1\357\53\0\1\362\13\0\1\362\42\0"+
    "\1\361\11\0\1\361\44\0\1\360\7\0\1\360\46\0"+
    "\1\363\7\0\1\360\1\0\1\361\44\0\1\357\2\0"+
    "\1\357\10\0\1\362\42\0\1\364\2\0\1\357\4\0"+
    "\1\360\3\0\1\362\34\0\2\3\4\0\1\357\2\3"+
    "\1\365\11\3\12\0\12\3\10\0\2\3\4\0\1\362"+
    "\13\3\1\366\12\0\12\3\10\0\2\3\4\0\1\360"+
    "\7\3\1\367\4\3\12\0\12\3\10\0\2\3\4\0"+
    "\1\361\11\3\1\370\2\3\12\0\12\3\16\0\1\371"+
    "\2\0\1\372\24\0\1\373\26\0\1\374\27\0\1\374"+
    "\26\0\1\372\2\0\1\372\53\0\1\375\27\0\1\375"+
    "\26\0\1\376\27\0\1\376\26\0\1\377\2\0\1\372"+
    "\24\0\1\375\26\0\1\u0100\2\0\1\372\24\0\1\374"+
    "\20\0\2\3\4\0\1\374\14\3\12\0\1\3\1\u0101"+
    "\10\3\10\0\2\3\4\0\1\376\14\3\12\0\1\3"+
    "\1\u0102\10\3\10\0\2\3\4\0\1\372\2\3\1\u0103"+
    "\11\3\12\0\12\3\10\0\2\3\4\0\1\375\14\3"+
    "\12\0\1\3\1\u0104\10\3\16\0\1\u0105\1\u0106\1\u0107"+
    "\10\0\1\u0108\43\0\1\u0107\1\0\1\u0107\54\0\1\u0109"+
    "\1\u0106\11\0\1\u0108\43\0\2\u0106\55\0\1\u0108\12\0"+
    "\1\u0108\43\0\2\u010a\55\0\1\u010b\1\0\1\u0107\10\0"+
    "\1\u0108\43\0\1\u010c\1\u0106\1\u0107\46\0\2\3\4\0"+
    "\1\u0106\1\u010d\13\3\12\0\12\3\10\0\2\3\4\0"+
    "\1\u010a\1\u010e\13\3\12\0\12\3\10\0\2\3\4\0"+
    "\1\u0107\1\3\1\u010f\12\3\12\0\12\3\10\0\2\3"+
    "\4\0\1\u0108\12\3\1\u0110\1\3\12\0\12\3\16\0"+
    "\1\u0111\13\0\1\u0111\42\0\1\u0112\13\0\1\u0112\42\0"+
    "\1\u0113\13\0\1\u0113\34\0\2\3\4\0\1\u0112\13\3"+
    "\1\u0114\12\0\12\3\10\0\2\3\4\0\1\u0113\13\3"+
    "\1\u0115\12\0\12\3\16\0\1\u0116\1\u0117\12\0\1\u0118"+
    "\42\0\1\u0118\13\0\1\u0118\42\0\2\u0117\47\0\2\3"+
    "\4\0\1\u0118\13\3\1\u0119\12\0\12\3\10\0\2\3"+
    "\4\0\1\u0117\1\u011a\13\3\12\0\12\3\16\0\2\u011b"+
    "\47\0\2\3\4\0\1\u011b\1\u011c\13\3\12\0\12\3"+
    "\16\0\1\u011d\1\0\1\u011d\46\0\2\3\4\0\1\u011d"+
    "\1\3\1\u011e\12\3\12\0\12\3\16\0\1\u011f\27\0"+
    "\1\u011f\20\0\2\3\4\0\1\u011f\14\3\12\0\1\3"+
    "\1\u0120\10\3\16\0\1\u0121\6\0\1\u0121\41\0\2\3"+
    "\4\0\1\u0121\6\3\1\u0122\5\3\12\0\12\3\16\0"+
    "\1\u0123\3\0\1\u0123\44\0\2\3\4\0\1\u0123\3\3"+
    "\1\u0124\10\3\12\0\12\3\16\0\2\u0125\47\0\2\3"+
    "\4\0\1\u0125\1\u0126\13\3\12\0\12\3\16\0\1\u0127"+
    "\1\0\1\u0127\46\0\2\3\4\0\1\u0127\1\3\1\u0128"+
    "\12\3\12\0\12\3\16\0\1\u0129\3\0\1\u0129\44\0"+
    "\2\3\4\0\1\u0129\3\3\1\u012a\10\3\12\0\12\3"+
    "\16\0\1\u012b\31\0\1\u012b\16\0\2\3\4\0\1\u012b"+
    "\14\3\12\0\3\3\1\u012c\6\3\16\0\1\u012d\7\0"+
    "\1\u012d\40\0\2\3\4\0\1\u012d\7\3\1\u012e\4\3"+
    "\12\0\12\3\7\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[11515];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\4\1\1\11\6\1\12\11\7\1\2\0"+
    "\1\1\11\0\2\1\1\0\2\1\1\0\3\1\1\0"+
    "\1\1\1\0\2\1\1\0\1\11\1\0\1\1\1\0"+
    "\1\11\1\0\2\1\17\0\2\1\1\0\2\1\1\0"+
    "\10\1\10\0\1\11\5\0\2\1\1\0\2\1\1\0"+
    "\6\1\20\0\2\1\1\0\2\1\1\0\6\1\2\0"+
    "\1\11\2\1\6\0\3\1\1\0\2\1\1\0\7\1"+
    "\1\11\1\0\2\11\1\0\2\11\2\0\4\1\1\0"+
    "\6\1\11\0\5\1\12\0\6\1\3\0\1\11\1\0"+
    "\1\1\1\0\7\1\7\0\4\1\10\0\5\1\1\11"+
    "\2\0\1\1\1\11\1\0\5\1\3\0\3\1\1\11"+
    "\1\0\2\1\1\0\1\1\1\0\1\1\1\0\1\1"+
    "\1\0\1\1\1\0\1\1\1\0\1\1\1\0\1\1"+
    "\1\0\1\1\1\0\1\1\1\11\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[302];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    public String lexeme;


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 190) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Tokens yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 24: 
          { lexeme=yytext(); return TituloX;
          }
        case 31: break;
        case 12: 
          { lexeme=yytext(); return PuntoComa;
          }
        case 32: break;
        case 19: 
          { lexeme=yytext(); return TipoDato;
          }
        case 33: break;
        case 17: 
          { lexeme=yytext(); return DOUBLE;
          }
        case 34: break;
        case 27: 
          { lexeme=yytext(); return GraficaBarras;
          }
        case 35: break;
        case 21: 
          { lexeme=yytext(); return Compare;
          }
        case 36: break;
        case 4: 
          { return Linea;
          }
        case 37: break;
        case 13: 
          { lexeme=yytext(); return DosPuntos;
          }
        case 38: break;
        case 9: 
          { lexeme=yytext(); return LlaveFinal;
          }
        case 39: break;
        case 25: 
          { lexeme=yytext(); return TituloY;
          }
        case 40: break;
        case 10: 
          { lexeme = yytext(); return CorcheteInicio;
          }
        case 41: break;
        case 7: 
          { lexeme=yytext(); return ParentesisFinal;
          }
        case 42: break;
        case 29: 
          { lexeme=yytext(); return DefinirGlobales;
          }
        case 43: break;
        case 22: 
          { lexeme=yytext(); return Valores;
          }
        case 44: break;
        case 18: 
          { lexeme=yytext(); return EjeX;
          }
        case 45: break;
        case 15: 
          { lexeme=yytext(); return Ruta;
          }
        case 46: break;
        case 23: 
          { lexeme=yytext(); return Archivo;
          }
        case 47: break;
        case 6: 
          { lexeme=yytext(); return ParentesisInicio;
          }
        case 48: break;
        case 14: 
          { lexeme=yytext(); return Dollar;
          }
        case 49: break;
        case 5: 
          { lexeme=yytext(); return Igual;
          }
        case 50: break;
        case 28: 
          { lexeme=yytext(); return GraficaLineas;
          }
        case 51: break;
        case 20: 
          { lexeme=yytext(); return Titulo;
          }
        case 52: break;
        case 30: 
          { lexeme=yytext(); return GenerarReporteEstadistico;
          }
        case 53: break;
        case 2: 
          { lexeme=yytext(); return Identificador;
          }
        case 54: break;
        case 8: 
          { lexeme=yytext(); return LlaveInicio;
          }
        case 55: break;
        case 1: 
          { return ERROR;
          }
        case 56: break;
        case 16: 
          { lexeme=yytext(); return STRING;
          }
        case 57: break;
        case 3: 
          { /*Ignore*/
          }
        case 58: break;
        case 11: 
          { lexeme = yytext(); return CorcheteFinal;
          }
        case 59: break;
        case 26: 
          { lexeme=yytext(); return GraficaPie;
          }
        case 60: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
