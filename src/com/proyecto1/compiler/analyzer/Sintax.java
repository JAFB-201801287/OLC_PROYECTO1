
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.proyecto1.compiler.analyzer;

import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Sintax extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\070\000\002\002\004\000\002\002\003\000\002\003" +
    "\005\000\002\004\004\000\002\004\004\000\002\004\004" +
    "\000\002\004\004\000\002\004\004\000\002\004\003\000" +
    "\002\005\006\000\002\006\014\000\002\007\005\000\002" +
    "\007\005\000\002\007\003\000\002\007\003\000\002\010" +
    "\005\000\002\010\005\000\002\010\005\000\002\010\005" +
    "\000\002\010\003\000\002\010\003\000\002\010\003\000" +
    "\002\010\003\000\002\011\006\000\002\011\006\000\002" +
    "\012\006\000\002\012\006\000\002\013\010\000\002\014" +
    "\006\000\002\014\006\000\002\015\006\000\002\015\006" +
    "\000\002\016\010\000\002\017\010\000\002\017\010\000" +
    "\002\017\010\000\002\017\010\000\002\017\003\000\002" +
    "\020\005\000\002\021\004\000\002\021\004\000\002\021" +
    "\004\000\002\021\004\000\002\021\004\000\002\021\003" +
    "\000\002\022\005\000\002\023\004\000\002\023\004\000" +
    "\002\023\004\000\002\023\003\000\002\024\005\000\002" +
    "\025\004\000\002\025\004\000\002\025\003\000\002\026" +
    "\005\000\002\027\011" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\221\000\004\025\004\001\002\000\004\012\010\001" +
    "\002\000\004\002\000\001\002\000\004\002\007\001\002" +
    "\000\004\002\001\001\002\000\016\013\020\024\014\026" +
    "\013\027\011\030\021\031\023\001\002\000\004\012\213" +
    "\001\002\000\004\002\uffff\001\002\000\004\012\124\001" +
    "\002\000\004\012\063\001\002\000\016\013\020\024\014" +
    "\026\013\027\011\030\021\031\023\001\002\000\016\013" +
    "\020\024\014\026\013\027\011\030\021\031\023\001\002" +
    "\000\016\013\020\024\014\026\013\027\011\030\021\031" +
    "\023\001\002\000\004\002\ufff9\001\002\000\004\012\035" +
    "\001\002\000\016\013\020\024\014\026\013\027\011\030" +
    "\021\031\023\001\002\000\004\010\026\001\002\000\016" +
    "\013\020\024\014\026\013\027\011\030\021\031\023\001" +
    "\002\000\004\002\ufffb\001\002\000\004\041\027\001\002" +
    "\000\004\016\030\001\002\000\004\041\031\001\002\000" +
    "\004\011\032\001\002\000\004\017\033\001\002\000\016" +
    "\013\uffca\024\uffca\026\uffca\027\uffca\030\uffca\031\uffca\001" +
    "\002\000\004\002\ufffe\001\002\000\010\013\041\032\040" +
    "\033\042\001\002\000\010\013\041\032\040\033\042\001" +
    "\002\000\010\013\041\032\040\033\042\001\002\000\004" +
    "\020\051\001\002\000\016\013\uffcc\024\uffcc\026\uffcc\027" +
    "\uffcc\030\uffcc\031\uffcc\001\002\000\004\020\044\001\002" +
    "\000\016\013\uffcb\024\uffcb\026\uffcb\027\uffcb\030\uffcb\031" +
    "\uffcb\001\002\000\006\042\046\043\045\001\002\000\004" +
    "\017\050\001\002\000\004\017\047\001\002\000\010\013" +
    "\uffe8\032\uffe8\033\uffe8\001\002\000\010\013\uffe7\032\uffe7" +
    "\033\uffe7\001\002\000\006\042\053\043\052\001\002\000" +
    "\004\017\055\001\002\000\004\017\054\001\002\000\020" +
    "\013\uffea\032\uffea\033\uffea\034\uffea\035\uffea\036\uffea\037" +
    "\uffea\001\002\000\020\013\uffe9\032\uffe9\033\uffe9\034\uffe9" +
    "\035\uffe9\036\uffe9\037\uffe9\001\002\000\016\013\uffce\024" +
    "\uffce\026\uffce\027\uffce\030\uffce\031\uffce\001\002\000\016" +
    "\013\uffcd\024\uffcd\026\uffcd\027\uffcd\030\uffcd\031\uffcd\001" +
    "\002\000\004\002\ufffa\001\002\000\004\002\ufffc\001\002" +
    "\000\004\002\ufffd\001\002\000\010\005\065\006\066\013" +
    "\067\001\002\000\016\013\uffdb\024\uffdb\026\uffdb\027\uffdb" +
    "\030\uffdb\031\uffdb\001\002\000\004\043\117\001\002\000" +
    "\004\043\070\001\002\000\016\013\uffdc\024\uffdc\026\uffdc" +
    "\027\uffdc\030\uffdc\031\uffdc\001\002\000\004\007\071\001" +
    "\002\000\006\021\074\040\075\001\002\000\004\017\115" +
    "\001\002\000\004\017\113\001\002\000\004\012\100\001" +
    "\002\000\004\017\076\001\002\000\010\005\065\006\066" +
    "\013\067\001\002\000\016\013\uffdf\024\uffdf\026\uffdf\027" +
    "\uffdf\030\uffdf\031\uffdf\001\002\000\006\022\101\023\102" +
    "\001\002\000\004\013\112\001\002\000\004\016\103\001" +
    "\002\000\004\042\104\001\002\000\004\016\105\001\002" +
    "\000\004\042\106\001\002\000\004\016\107\001\002\000" +
    "\004\042\110\001\002\000\004\013\111\001\002\000\010" +
    "\015\ufff7\016\ufff7\017\ufff7\001\002\000\010\015\ufff8\016" +
    "\ufff8\017\ufff8\001\002\000\010\005\065\006\066\013\067" +
    "\001\002\000\016\013\uffde\024\uffde\026\uffde\027\uffde\030" +
    "\uffde\031\uffde\001\002\000\010\005\065\006\066\013\067" +
    "\001\002\000\016\013\uffdd\024\uffdd\026\uffdd\027\uffdd\030" +
    "\uffdd\031\uffdd\001\002\000\004\007\120\001\002\000\004" +
    "\042\121\001\002\000\004\017\122\001\002\000\010\005" +
    "\065\006\066\013\067\001\002\000\016\013\uffe0\024\uffe0" +
    "\026\uffe0\027\uffe0\030\uffe0\031\uffe0\001\002\000\016\013" +
    "\136\032\040\034\125\035\131\036\130\037\134\001\002" +
    "\000\004\020\200\001\002\000\016\013\136\032\040\034" +
    "\125\035\131\036\130\037\134\001\002\000\016\013\136" +
    "\032\040\034\125\035\131\036\130\037\134\001\002\000" +
    "\004\020\171\001\002\000\004\020\164\001\002\000\016" +
    "\013\136\032\040\034\125\035\131\036\130\037\134\001" +
    "\002\000\016\013\136\032\040\034\125\035\131\036\130" +
    "\037\134\001\002\000\004\020\141\001\002\000\016\013" +
    "\136\032\040\034\125\035\131\036\130\037\134\001\002" +
    "\000\016\013\uffd5\024\uffd5\026\uffd5\027\uffd5\030\uffd5\031" +
    "\uffd5\001\002\000\016\013\uffd4\024\uffd4\026\uffd4\027\uffd4" +
    "\030\uffd4\031\uffd4\001\002\000\016\013\uffd7\024\uffd7\026" +
    "\uffd7\027\uffd7\030\uffd7\031\uffd7\001\002\000\004\014\142" +
    "\001\002\000\010\021\074\040\147\043\145\001\002\000" +
    "\004\015\160\001\002\000\006\015\uffec\016\156\001\002" +
    "\000\006\015\uffeb\016\154\001\002\000\006\015\uffed\016" +
    "\152\001\002\000\006\015\uffee\016\150\001\002\000\010" +
    "\021\074\040\147\043\145\001\002\000\004\015\ufff2\001" +
    "\002\000\010\021\074\040\147\043\145\001\002\000\004" +
    "\015\ufff1\001\002\000\010\021\074\040\147\043\145\001" +
    "\002\000\004\015\uffef\001\002\000\010\021\074\040\147" +
    "\043\145\001\002\000\004\015\ufff0\001\002\000\004\017" +
    "\161\001\002\000\016\013\uffe1\032\uffe1\034\uffe1\035\uffe1" +
    "\036\uffe1\037\uffe1\001\002\000\016\013\uffd6\024\uffd6\026" +
    "\uffd6\027\uffd6\030\uffd6\031\uffd6\001\002\000\016\013\uffd8" +
    "\024\uffd8\026\uffd8\027\uffd8\030\uffd8\031\uffd8\001\002\000" +
    "\006\042\166\043\165\001\002\000\004\017\170\001\002" +
    "\000\004\017\167\001\002\000\016\013\uffe5\032\uffe5\034" +
    "\uffe5\035\uffe5\036\uffe5\037\uffe5\001\002\000\016\013\uffe4" +
    "\032\uffe4\034\uffe4\035\uffe4\036\uffe4\037\uffe4\001\002\000" +
    "\006\042\173\043\172\001\002\000\004\017\175\001\002" +
    "\000\004\017\174\001\002\000\016\013\uffe3\032\uffe3\034" +
    "\uffe3\035\uffe3\036\uffe3\037\uffe3\001\002\000\016\013\uffe2" +
    "\032\uffe2\034\uffe2\035\uffe2\036\uffe2\037\uffe2\001\002\000" +
    "\016\013\uffd9\024\uffd9\026\uffd9\027\uffd9\030\uffd9\031\uffd9" +
    "\001\002\000\016\013\uffda\024\uffda\026\uffda\027\uffda\030" +
    "\uffda\031\uffda\001\002\000\004\014\201\001\002\000\006" +
    "\042\204\043\202\001\002\000\006\015\ufff3\016\211\001" +
    "\002\000\004\015\207\001\002\000\006\015\ufff4\016\205" +
    "\001\002\000\006\042\204\043\202\001\002\000\004\015" +
    "\ufff6\001\002\000\004\017\210\001\002\000\016\013\uffe6" +
    "\032\uffe6\034\uffe6\035\uffe6\036\uffe6\037\uffe6\001\002\000" +
    "\006\042\204\043\202\001\002\000\004\015\ufff5\001\002" +
    "\000\012\013\215\032\040\034\125\037\134\001\002\000" +
    "\012\013\215\032\040\034\125\037\134\001\002\000\016" +
    "\013\uffd0\024\uffd0\026\uffd0\027\uffd0\030\uffd0\031\uffd0\001" +
    "\002\000\012\013\215\032\040\034\125\037\134\001\002" +
    "\000\016\013\uffcf\024\uffcf\026\uffcf\027\uffcf\030\uffcf\031" +
    "\uffcf\001\002\000\012\013\215\032\040\034\125\037\134" +
    "\001\002\000\016\013\uffd2\024\uffd2\026\uffd2\027\uffd2\030" +
    "\uffd2\031\uffd2\001\002\000\016\013\uffd1\024\uffd1\026\uffd1" +
    "\027\uffd1\030\uffd1\031\uffd1\001\002\000\016\013\uffd3\024" +
    "\uffd3\026\uffd3\027\uffd3\030\uffd3\031\uffd3\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\221\000\006\002\005\003\004\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\004\011\020\021\022\014\024\015\026\023\027" +
    "\016\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\004\061\020\021\022" +
    "\014\024\015\026\023\027\016\001\001\000\016\004\060" +
    "\020\021\022\014\024\015\026\023\027\016\001\001\000" +
    "\016\004\057\020\021\022\014\024\015\026\023\027\016" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\004" +
    "\033\020\021\022\014\024\015\026\023\027\016\001\001" +
    "\000\002\001\001\000\016\004\024\020\021\022\014\024" +
    "\015\026\023\027\016\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\011\036\012\035\025\042\001\001\000\010\011" +
    "\036\012\035\025\056\001\001\000\010\011\036\012\035" +
    "\025\055\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\017\063\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\005\072\006\071\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\017\076\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\017\113\001\001\000\002\001\001\000" +
    "\004\017\115\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\017\122\001" +
    "\001\000\002\001\001\000\016\011\125\013\126\014\134" +
    "\015\132\016\131\021\136\001\001\000\002\001\001\000" +
    "\016\011\125\013\126\014\134\015\132\016\131\021\176" +
    "\001\001\000\016\011\125\013\126\014\134\015\132\016" +
    "\131\021\175\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\011\125\013\126\014\134\015\132\016\131\021" +
    "\162\001\001\000\016\011\125\013\126\014\134\015\132" +
    "\016\131\021\161\001\001\000\002\001\001\000\016\011" +
    "\125\013\126\014\134\015\132\016\131\021\137\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\005\145\006\143\010\142\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\005\145\006\143" +
    "\010\150\001\001\000\002\001\001\000\010\005\145\006" +
    "\143\010\152\001\001\000\002\001\001\000\010\005\145" +
    "\006\143\010\154\001\001\000\002\001\001\000\010\005" +
    "\145\006\143\010\156\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\007\202\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\007\205\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\007\211\001\001\000\002\001\001\000\012\011\213\013" +
    "\217\016\215\023\216\001\001\000\012\011\213\013\217" +
    "\016\215\023\222\001\001\000\002\001\001\000\012\011" +
    "\213\013\217\016\215\023\221\001\001\000\002\001\001" +
    "\000\012\011\213\013\217\016\215\023\220\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol simbolo;
    
    public void syntax_error(Symbol simbolo){
        this.simbolo = simbolo;
    }

    public Symbol getSimbolo(){
        return this.simbolo;
}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action_part00000000(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= GENERAR_REPORTE_ESTADISTICO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // GENERAR_REPORTE_ESTADISTICO ::= GenerarReporteEstadistico LlaveInicio INSTRUCCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("GENERAR_REPORTE_ESTADISTICO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INSTRUCCION ::= DEFINIR_GLOBALES INSTRUCCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INSTRUCCION ::= GRAFICA_BARRAS INSTRUCCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INSTRUCCION ::= GRAFICA_PIE INSTRUCCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INSTRUCCION ::= GRAFICA_LINEAS INSTRUCCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INSTRUCCION ::= COMPARE INSTRUCCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // INSTRUCCION ::= LlaveFinal 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // PUNTAJE_GENERAL ::= Dollar LlaveInicio PuntajeGeneral LlaveFinal 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PUNTAJE_GENERAL",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // PUNTAJE_ESPECIFICO ::= Dollar LlaveInicio PuntajeEspecifico Coma Cadena Coma Cadena Coma Cadena LlaveFinal 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PUNTAJE_ESPECIFICO",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // LISTA_STRING ::= Cadena Coma LISTA_STRING 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_STRING",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // LISTA_STRING ::= Identificador Coma LISTA_STRING 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_STRING",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // LISTA_STRING ::= Cadena 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_STRING",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // LISTA_STRING ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_STRING",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // LISTA_DOUBLE ::= Decimal Coma LISTA_DOUBLE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_DOUBLE",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // LISTA_DOUBLE ::= PUNTAJE_GENERAL Coma LISTA_DOUBLE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_DOUBLE",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // LISTA_DOUBLE ::= PUNTAJE_ESPECIFICO Coma LISTA_DOUBLE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_DOUBLE",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // LISTA_DOUBLE ::= Identificador Coma LISTA_DOUBLE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_DOUBLE",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // LISTA_DOUBLE ::= Decimal 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_DOUBLE",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // LISTA_DOUBLE ::= PUNTAJE_GENERAL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_DOUBLE",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // LISTA_DOUBLE ::= PUNTAJE_ESPECIFICO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_DOUBLE",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // LISTA_DOUBLE ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_DOUBLE",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // TITULO ::= Titulo DosPuntos Cadena PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TITULO",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // TITULO ::= Titulo DosPuntos Identificador PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TITULO",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // ARCHIVO ::= Archivo DosPuntos Cadena PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARCHIVO",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // ARCHIVO ::= Archivo DosPuntos Identificador PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARCHIVO",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // EJEX ::= EjeX DosPuntos CorcheteInicio LISTA_STRING CorcheteFinal PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EJEX",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // TITULOX ::= TituloX DosPuntos Cadena PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TITULOX",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // TITULOX ::= TituloX DosPuntos Identificador PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TITULOX",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // TITULOY ::= TituloY DosPuntos Cadena PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TITULOY",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // TITULOY ::= TituloY DosPuntos Identificador PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TITULOY",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // VALORES ::= Valores DosPuntos CorcheteInicio LISTA_DOUBLE CorcheteFinal PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VALORES",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // DECLARAR_VARIABLE ::= STRING Identificador Igual Cadena PuntoComa DECLARAR_VARIABLE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARAR_VARIABLE",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // DECLARAR_VARIABLE ::= DOUBLE Identificador Igual Decimal PuntoComa DECLARAR_VARIABLE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARAR_VARIABLE",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // DECLARAR_VARIABLE ::= DOUBLE Identificador Igual PUNTAJE_GENERAL PuntoComa DECLARAR_VARIABLE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARAR_VARIABLE",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // DECLARAR_VARIABLE ::= DOUBLE Identificador Igual PUNTAJE_ESPECIFICO PuntoComa DECLARAR_VARIABLE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARAR_VARIABLE",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // DECLARAR_VARIABLE ::= LlaveFinal 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARAR_VARIABLE",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // DEFINIR_GLOBALES ::= DefinirGlobales LlaveInicio DECLARAR_VARIABLE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DEFINIR_GLOBALES",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // CARACTERISTICA_BARRAS ::= TITULO CARACTERISTICA_BARRAS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CARACTERISTICA_BARRAS",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // CARACTERISTICA_BARRAS ::= EJEX CARACTERISTICA_BARRAS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CARACTERISTICA_BARRAS",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // CARACTERISTICA_BARRAS ::= VALORES CARACTERISTICA_BARRAS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CARACTERISTICA_BARRAS",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // CARACTERISTICA_BARRAS ::= TITULOX CARACTERISTICA_BARRAS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CARACTERISTICA_BARRAS",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // CARACTERISTICA_BARRAS ::= TITULOY CARACTERISTICA_BARRAS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CARACTERISTICA_BARRAS",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // CARACTERISTICA_BARRAS ::= LlaveFinal 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CARACTERISTICA_BARRAS",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // GRAFICA_BARRAS ::= GraficaBarras LlaveInicio CARACTERISTICA_BARRAS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("GRAFICA_BARRAS",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // CARACTERISTICA_PIE ::= TITULO CARACTERISTICA_PIE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CARACTERISTICA_PIE",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // CARACTERISTICA_PIE ::= EJEX CARACTERISTICA_PIE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CARACTERISTICA_PIE",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // CARACTERISTICA_PIE ::= VALORES CARACTERISTICA_PIE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CARACTERISTICA_PIE",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // CARACTERISTICA_PIE ::= LlaveFinal 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CARACTERISTICA_PIE",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // GRAFICA_PIE ::= GraficaPie LlaveInicio CARACTERISTICA_PIE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("GRAFICA_PIE",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // CARACTERISTICA_LINEAS ::= TITULO CARACTERISTICA_LINEAS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CARACTERISTICA_LINEAS",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // CARACTERISTICA_LINEAS ::= ARCHIVO CARACTERISTICA_LINEAS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CARACTERISTICA_LINEAS",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // CARACTERISTICA_LINEAS ::= LlaveFinal 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CARACTERISTICA_LINEAS",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // GRAFICA_LINEAS ::= GraficaLineas LlaveInicio CARACTERISTICA_LINEAS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("GRAFICA_LINEAS",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // COMPARE ::= Compare ParentesisInicio Ruta Coma Ruta ParentesisFinal PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COMPARE",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sintax$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
              return CUP$Sintax$do_action_part00000000(
                               CUP$Sintax$act_num,
                               CUP$Sintax$parser,
                               CUP$Sintax$stack,
                               CUP$Sintax$top);
    }
}

}
