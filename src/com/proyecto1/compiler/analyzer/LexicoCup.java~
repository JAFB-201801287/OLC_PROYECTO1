/* The following code was generated by JFlex 1.4.3 on 8/30/21, 9:18 AM */

package com.proyecto1.compiler.analyzer;
import java_cup.runtime.Symbol;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 8/30/21, 9:18 AM from the specification file
 * <tt>/home/jafb/NetBeansProjects/OLC_PROYECTO1/src/com/proyecto1/compiler/analyzer/LexerCup.flex</tt>
 */
class LexicoCup implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0,  3,  6,  0,  0,  3,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     3,  0, 55,  7, 40,  0,  0, 52, 32, 33,  5,  0,  3,  0, 51,  4, 
     2,  2, 14,  2, 16,  2, 15,  2, 13,  2, 39, 38,  8, 31, 17,  0, 
     0, 12, 28,  9, 25, 30, 45, 24, 47, 22, 43,  1, 29, 11, 23, 10, 
    41,  1, 21, 19, 20, 27, 48,  1, 49, 50,  1, 36,  0, 37,  0,  1, 
     0, 42, 28, 44, 25, 30, 45, 24, 47, 22, 43,  1, 29, 46, 23, 26, 
    41,  1, 21, 19, 20, 27, 48,  1, 49, 50,  1, 34, 18, 35,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\1\1\3\3\1\2\2\1\1"+
    "\5\2\1\4\1\5\1\6\1\7\1\10\1\11\1\12"+
    "\1\13\1\14\1\15\2\2\4\1\3\0\1\3\1\0"+
    "\1\2\2\0\1\2\11\0\2\2\1\0\3\2\1\0"+
    "\4\2\1\0\1\16\1\0\1\16\1\0\1\17\1\0"+
    "\1\17\1\20\2\0\1\2\2\0\1\2\16\0\2\2"+
    "\1\0\3\2\1\0\4\2\1\3\2\0\1\2\1\0"+
    "\1\2\4\0\1\21\4\0\1\21\5\0\2\2\1\0"+
    "\3\2\1\0\1\2\1\21\2\2\2\0\1\2\1\0"+
    "\1\2\21\0\2\2\1\0\3\2\1\0\3\2\2\0"+
    "\1\2\1\0\1\2\2\22\4\0\1\23\1\0\1\24"+
    "\1\0\1\24\1\22\2\0\1\24\1\22\2\0\1\24"+
    "\1\23\1\0\2\2\2\22\3\2\1\0\2\25\2\26"+
    "\1\27\1\0\1\25\1\0\1\30\1\31\1\0\1\25"+
    "\2\0\1\27\1\26\1\0\1\30\1\31\1\0\4\2"+
    "\1\27\17\0\7\2\21\0\7\2\1\32\1\0\1\33"+
    "\1\0\2\33\5\0\1\33\6\0\1\33\2\2\1\33"+
    "\4\2\20\0\6\2\21\0\6\2\1\34\1\35\5\0"+
    "\2\34\1\0\2\35\4\0\2\34\1\35\4\2\1\0"+
    "\2\36\2\0\1\36\1\0\1\36\1\0\2\36\2\2"+
    "\1\36\1\2\2\0\3\37\1\0\1\2\1\37\1\2"+
    "\3\0\2\2\1\40\1\0\1\40\1\2\1\40\1\0"+
    "\1\2\1\0\1\2\1\0\1\2\1\0\1\2\1\0"+
    "\1\2\1\0\1\2\1\0\1\2\2\41";

  private static int [] zzUnpackAction() {
    int [] result = new int[414];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\72\0\164\0\256\0\350\0\u0122\0\u015c\0\u0196"+
    "\0\u01d0\0\u020a\0\u0244\0\u027e\0\u02b8\0\u02f2\0\u032c\0\u0366"+
    "\0\72\0\72\0\72\0\72\0\72\0\72\0\72\0\72"+
    "\0\72\0\72\0\u03a0\0\u03da\0\u0414\0\u044e\0\u0488\0\u04c2"+
    "\0\256\0\u04fc\0\u0536\0\u0570\0\u05aa\0\u05e4\0\u061e\0\u0658"+
    "\0\u0692\0\u06cc\0\u0706\0\u0740\0\u077a\0\u07b4\0\u07ee\0\u0828"+
    "\0\u0862\0\u089c\0\u08d6\0\u0910\0\u094a\0\u0984\0\u09be\0\u09f8"+
    "\0\u0a32\0\u0a6c\0\u0aa6\0\u0ae0\0\u0b1a\0\u0414\0\72\0\u044e"+
    "\0\u044e\0\u0488\0\72\0\u04c2\0\u04c2\0\u04fc\0\u0b54\0\u0b8e"+
    "\0\u0bc8\0\u0c02\0\u0c3c\0\u0c76\0\u0cb0\0\u0cea\0\u0d24\0\u0d5e"+
    "\0\u0d98\0\u0dd2\0\u0e0c\0\u0e46\0\u0e80\0\u0eba\0\u0ef4\0\u0f2e"+
    "\0\u0f68\0\u0fa2\0\u0fdc\0\u1016\0\u1050\0\u108a\0\u10c4\0\u10fe"+
    "\0\u1138\0\u1172\0\u11ac\0\u11e6\0\u1220\0\u0536\0\u125a\0\u1294"+
    "\0\u12ce\0\u1308\0\u1342\0\u137c\0\u13b6\0\u13f0\0\u142a\0\u1464"+
    "\0\u149e\0\u14d8\0\u1512\0\u154c\0\72\0\u1586\0\u15c0\0\u15fa"+
    "\0\u1634\0\u166e\0\u16a8\0\u16e2\0\u171c\0\u1756\0\u1790\0\u17ca"+
    "\0\u1804\0\u183e\0\164\0\u1878\0\u18b2\0\u18ec\0\u1926\0\u1960"+
    "\0\u199a\0\u19d4\0\u1a0e\0\u1a48\0\u1a82\0\u1abc\0\u1af6\0\u1b30"+
    "\0\u1b6a\0\u1ba4\0\u1bde\0\u1c18\0\u1c52\0\u1c8c\0\u1cc6\0\u1d00"+
    "\0\u1d3a\0\u1d74\0\u1dae\0\u1de8\0\u1e22\0\u1e5c\0\u1e96\0\u1ed0"+
    "\0\u1f0a\0\u1f44\0\u1f7e\0\u1fb8\0\u1ff2\0\u202c\0\u2066\0\u20a0"+
    "\0\u20da\0\u2114\0\u2066\0\72\0\u214e\0\u2188\0\u21c2\0\u21fc"+
    "\0\u2236\0\u2270\0\u22aa\0\u22e4\0\72\0\u214e\0\u231e\0\u2358"+
    "\0\u22e4\0\u2236\0\u2392\0\u23cc\0\164\0\u2406\0\u2440\0\u247a"+
    "\0\u24b4\0\164\0\u22e4\0\u24ee\0\u2528\0\u2562\0\u259c\0\72"+
    "\0\164\0\72\0\164\0\72\0\u25d6\0\u2610\0\u2610\0\72"+
    "\0\72\0\u264a\0\u2684\0\u26be\0\u26f8\0\u264a\0\u25d6\0\u2732"+
    "\0\164\0\164\0\u276c\0\u27a6\0\u27e0\0\u281a\0\u2854\0\164"+
    "\0\u288e\0\u28c8\0\u2902\0\u293c\0\u2976\0\u29b0\0\u29ea\0\u2a24"+
    "\0\u2a5e\0\u2a98\0\u2ad2\0\u2b0c\0\u2b46\0\u2b80\0\u2bba\0\u2bf4"+
    "\0\u2c2e\0\u2c68\0\u2ca2\0\u2cdc\0\u2d16\0\u2d50\0\u2d8a\0\u2dc4"+
    "\0\u2dfe\0\u2e38\0\u2e72\0\u2eac\0\u2ee6\0\u2f20\0\u2f5a\0\u2f94"+
    "\0\u2fce\0\u3008\0\u3042\0\u307c\0\u30b6\0\u30f0\0\u312a\0\u3164"+
    "\0\u319e\0\u31d8\0\u3212\0\u324c\0\u3286\0\u32c0\0\72\0\u32fa"+
    "\0\u3334\0\u336e\0\72\0\u336e\0\u33a8\0\u33e2\0\u341c\0\u3456"+
    "\0\u3490\0\u34ca\0\u3504\0\u353e\0\u3578\0\u35b2\0\u35ec\0\u3626"+
    "\0\u3660\0\u369a\0\u36d4\0\164\0\u370e\0\u3748\0\u3782\0\u37bc"+
    "\0\u37f6\0\u3830\0\u386a\0\u38a4\0\u38de\0\u3918\0\u3952\0\u398c"+
    "\0\u39c6\0\u3a00\0\u3a3a\0\u3a74\0\u3aae\0\u3ae8\0\u3b22\0\u3b5c"+
    "\0\u3b96\0\u3bd0\0\u3c0a\0\u3c44\0\u3c7e\0\u3cb8\0\u3cf2\0\u3d2c"+
    "\0\u3d66\0\u3da0\0\u3dda\0\u3e14\0\u3e4e\0\u3e88\0\u3ec2\0\u3efc"+
    "\0\u3f36\0\u3f70\0\u3faa\0\u3fe4\0\u401e\0\u4058\0\u4092\0\u40cc"+
    "\0\u4106\0\u4140\0\u417a\0\u41b4\0\u41ee\0\72\0\72\0\u4228"+
    "\0\u4262\0\u429c\0\u42d6\0\u4310\0\u4310\0\u434a\0\u4384\0\u429c"+
    "\0\u4262\0\u43be\0\u43f8\0\u4432\0\u446c\0\u42d6\0\164\0\164"+
    "\0\u44a6\0\u44e0\0\u451a\0\u4554\0\u458e\0\72\0\u458e\0\u45c8"+
    "\0\u4602\0\u463c\0\u4676\0\u45c8\0\u46b0\0\u4602\0\u46b0\0\u46ea"+
    "\0\u4724\0\164\0\u475e\0\u4798\0\u47d2\0\72\0\u480c\0\u47d2"+
    "\0\u480c\0\u4846\0\164\0\u4880\0\u48ba\0\u48f4\0\u492e\0\u4968"+
    "\0\u49a2\0\72\0\u49dc\0\u49dc\0\u4a16\0\164\0\u4a50\0\u4a8a"+
    "\0\u4ac4\0\u4afe\0\u4b38\0\u4b72\0\u4bac\0\u4be6\0\u4c20\0\u4c5a"+
    "\0\u4c94\0\u4cce\0\u4d08\0\u4d42\0\72\0\164";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[414];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\2\1\5\1\7"+
    "\1\10\1\11\2\3\1\12\4\4\1\2\1\13\1\14"+
    "\1\15\3\3\1\16\1\17\4\3\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\1\12\1\3\1\11\3\3\1\34\2\3\1\2"+
    "\1\35\1\36\1\2\1\37\1\40\1\2\73\0\2\3"+
    "\6\0\10\3\2\0\14\3\12\0\12\3\11\0\1\41"+
    "\12\0\4\41\42\0\1\42\11\0\1\5\2\0\1\5"+
    "\70\0\1\43\73\0\1\44\73\0\1\45\61\0\2\3"+
    "\6\0\1\3\1\46\6\3\1\0\1\47\7\3\1\46"+
    "\4\3\12\0\12\3\10\0\2\3\6\0\10\3\1\0"+
    "\1\50\2\3\1\51\11\3\12\0\12\3\21\0\1\52"+
    "\1\0\1\53\5\0\1\54\1\0\1\55\1\56\1\57"+
    "\3\0\1\52\1\60\2\0\1\61\13\0\1\53\1\62"+
    "\17\0\2\3\6\0\10\3\1\0\1\55\1\3\1\63"+
    "\12\3\12\0\12\3\10\0\2\3\6\0\10\3\1\0"+
    "\1\57\3\3\1\64\10\3\12\0\12\3\10\0\2\3"+
    "\6\0\10\3\1\0\1\65\2\3\1\66\10\3\1\67"+
    "\12\0\12\3\10\0\2\3\6\0\1\3\1\70\6\3"+
    "\1\0\1\71\7\3\1\70\3\3\1\72\12\0\12\3"+
    "\10\0\2\3\6\0\10\3\1\0\1\62\14\3\12\0"+
    "\2\3\1\73\7\3\10\0\2\3\6\0\10\3\1\0"+
    "\1\60\10\3\1\74\3\3\12\0\12\3\10\0\2\3"+
    "\6\0\3\3\1\75\4\3\1\0\1\53\14\3\12\0"+
    "\1\3\1\75\10\3\7\0\64\76\1\77\5\76\65\100"+
    "\1\0\1\101\3\100\67\102\1\103\2\102\70\104\1\0"+
    "\1\105\2\0\1\106\12\0\4\106\51\0\5\43\1\107"+
    "\64\43\6\44\1\0\63\44\12\0\1\110\60\0\2\3"+
    "\6\0\2\3\1\111\5\3\1\0\1\112\14\3\12\0"+
    "\5\3\1\111\4\3\22\0\1\112\6\0\1\112\33\0"+
    "\1\112\24\0\1\113\10\0\1\113\31\0\1\113\16\0"+
    "\2\3\6\0\1\114\7\3\1\0\1\113\14\3\12\0"+
    "\3\3\1\114\6\3\22\0\1\112\6\0\1\115\10\0"+
    "\1\116\22\0\1\112\35\0\1\117\12\0\1\117\45\0"+
    "\1\113\1\0\1\112\1\120\5\0\1\121\1\0\1\122"+
    "\1\123\1\0\1\124\3\0\1\116\1\0\1\117\1\125"+
    "\13\0\1\120\1\0\1\113\1\126\1\112\35\0\1\123"+
    "\2\0\1\123\55\0\1\113\2\0\1\120\5\0\1\127"+
    "\27\0\1\120\1\0\1\113\37\0\1\122\1\0\1\122"+
    "\67\0\1\130\4\0\1\130\64\0\1\131\4\0\1\132"+
    "\25\0\1\126\36\0\1\125\13\0\1\125\34\0\2\3"+
    "\6\0\10\3\1\0\1\123\2\3\1\133\11\3\12\0"+
    "\12\3\10\0\2\3\6\0\10\3\1\0\1\122\1\3"+
    "\1\134\12\3\12\0\12\3\23\0\1\120\5\0\1\135"+
    "\4\0\1\132\22\0\1\120\20\0\2\3\6\0\3\3"+
    "\1\136\4\3\1\0\1\120\14\3\12\0\1\3\1\136"+
    "\10\3\10\0\2\3\6\0\10\3\1\0\1\132\4\3"+
    "\1\137\7\3\12\0\12\3\10\0\2\3\6\0\10\3"+
    "\1\0\1\116\10\3\1\140\3\3\12\0\12\3\31\0"+
    "\1\141\10\0\1\116\21\0\1\126\15\0\2\3\6\0"+
    "\10\3\1\0\1\126\14\3\12\0\4\3\1\142\5\3"+
    "\10\0\2\3\6\0\10\3\1\0\1\125\13\3\1\143"+
    "\12\0\12\3\10\0\2\3\6\0\10\3\1\0\1\130"+
    "\4\3\1\144\7\3\12\0\12\3\10\0\2\3\6\0"+
    "\10\3\1\0\1\117\12\3\1\145\1\3\12\0\12\3"+
    "\7\0\4\43\1\146\1\107\64\43\13\0\1\147\57\0"+
    "\2\3\6\0\10\3\1\0\1\150\14\3\12\0\1\151"+
    "\11\3\31\0\1\150\26\0\1\150\42\0\1\152\34\0"+
    "\1\152\13\0\2\3\6\0\10\3\1\0\1\152\14\3"+
    "\12\0\6\3\1\153\3\3\31\0\1\154\11\0\1\155"+
    "\14\0\1\150\42\0\1\155\11\0\1\155\47\0\1\156"+
    "\7\0\1\156\7\0\1\156\61\0\1\157\32\0\1\157"+
    "\26\0\1\156\7\0\1\160\1\0\1\161\1\0\1\162"+
    "\3\0\1\156\1\163\1\155\1\0\1\164\12\0\1\150"+
    "\3\0\1\157\1\0\1\152\1\0\1\165\32\0\1\163"+
    "\10\0\1\163\60\0\1\166\3\0\1\166\65\0\1\167"+
    "\1\0\1\161\11\0\1\164\55\0\1\165\36\0\1\165"+
    "\32\0\1\170\3\0\1\170\65\0\1\171\32\0\1\157"+
    "\1\0\1\152\34\0\1\161\1\0\1\161\67\0\1\172"+
    "\3\0\1\170\7\0\1\164\55\0\1\164\13\0\1\164"+
    "\34\0\2\3\6\0\10\3\1\0\1\166\3\3\1\173"+
    "\10\3\12\0\12\3\10\0\2\3\6\0\10\3\1\0"+
    "\1\163\10\3\1\174\3\3\12\0\12\3\31\0\1\175"+
    "\13\0\1\164\16\0\1\157\15\0\2\3\6\0\10\3"+
    "\1\0\1\157\14\3\12\0\4\3\1\176\5\3\10\0"+
    "\2\3\6\0\10\3\1\0\1\164\13\3\1\177\12\0"+
    "\12\3\10\0\2\3\6\0\10\3\1\0\1\155\11\3"+
    "\1\200\2\3\12\0\12\3\31\0\1\201\3\0\1\170"+
    "\5\0\1\155\36\0\2\3\6\0\10\3\1\0\1\170"+
    "\3\3\1\202\10\3\12\0\12\3\10\0\2\3\6\0"+
    "\10\3\1\0\1\165\14\3\12\0\10\3\1\203\1\3"+
    "\10\0\2\3\6\0\10\3\1\0\1\161\1\3\1\204"+
    "\12\3\12\0\12\3\10\0\2\3\6\0\1\3\1\205"+
    "\6\3\1\0\1\156\7\3\1\205\4\3\12\0\12\3"+
    "\23\0\1\206\71\0\1\207\5\0\1\207\27\0\1\207"+
    "\20\0\2\3\6\0\3\3\1\210\4\3\1\0\1\207"+
    "\14\3\12\0\1\3\1\210\10\3\31\0\1\211\3\0"+
    "\1\211\44\0\2\3\6\0\10\3\1\0\1\211\3\3"+
    "\1\212\10\3\12\0\12\3\23\0\1\207\5\0\1\213"+
    "\12\0\1\214\14\0\1\207\41\0\1\214\12\0\1\214"+
    "\56\0\1\215\2\0\1\215\66\0\1\216\3\0\1\216"+
    "\57\0\1\217\5\0\1\220\2\0\1\221\1\222\1\223"+
    "\5\0\1\224\14\0\1\217\33\0\1\225\5\0\1\225"+
    "\27\0\1\225\41\0\1\223\4\0\1\223\64\0\1\226"+
    "\12\0\1\226\56\0\1\227\2\0\1\227\66\0\1\230"+
    "\4\0\1\230\56\0\1\225\5\0\1\231\2\0\1\227"+
    "\24\0\1\225\41\0\1\232\4\0\1\232\64\0\1\222"+
    "\3\0\1\222\65\0\1\233\2\0\1\227\1\0\1\232"+
    "\43\0\2\3\6\0\10\3\1\0\1\230\4\3\1\234"+
    "\7\3\12\0\12\3\10\0\2\3\6\0\10\3\1\0"+
    "\1\226\12\3\1\235\1\3\12\0\12\3\31\0\1\236"+
    "\2\0\1\227\1\216\44\0\2\3\6\0\10\3\1\0"+
    "\1\216\3\3\1\237\10\3\12\0\12\3\10\0\2\3"+
    "\6\0\10\3\1\0\1\227\2\3\1\240\11\3\12\0"+
    "\12\3\10\0\2\3\6\0\10\3\1\0\1\214\12\3"+
    "\1\241\1\3\12\0\12\3\31\0\1\242\4\0\1\232"+
    "\5\0\1\214\35\0\2\3\6\0\10\3\1\0\1\232"+
    "\4\3\1\243\7\3\12\0\12\3\10\0\2\3\6\0"+
    "\3\3\1\244\4\3\1\0\1\225\14\3\12\0\1\3"+
    "\1\244\10\3\10\0\2\3\6\0\10\3\1\0\1\215"+
    "\2\3\1\245\11\3\12\0\12\3\24\0\1\246\76\0"+
    "\1\247\2\0\1\247\45\0\2\3\6\0\10\3\1\0"+
    "\1\247\2\3\1\250\11\3\12\0\12\3\31\0\1\251"+
    "\35\0\1\251\12\0\2\3\6\0\10\3\1\0\1\251"+
    "\14\3\12\0\7\3\1\252\2\3\31\0\1\253\2\0"+
    "\1\247\10\0\1\254\55\0\1\254\13\0\1\254\55\0"+
    "\1\255\13\0\1\255\44\0\1\256\10\0\1\256\31\0"+
    "\1\256\37\0\1\257\2\0\1\247\25\0\1\260\27\0"+
    "\1\256\1\261\1\0\1\262\5\0\1\263\2\0\1\247"+
    "\1\264\1\0\1\265\1\0\1\261\3\0\1\266\13\0"+
    "\1\262\1\260\1\256\3\0\1\251\25\0\1\262\5\0"+
    "\1\267\13\0\1\255\13\0\1\262\30\0\1\256\10\0"+
    "\1\270\31\0\1\256\3\0\1\251\33\0\1\271\3\0"+
    "\1\264\1\0\1\265\53\0\1\261\7\0\1\272\7\0"+
    "\1\261\3\0\1\254\55\0\1\260\30\0\1\260\30\0"+
    "\1\261\7\0\1\261\7\0\1\261\53\0\1\262\5\0"+
    "\1\262\27\0\1\262\41\0\1\265\5\0\1\265\55\0"+
    "\1\262\5\0\1\273\27\0\1\262\1\260\40\0\1\264"+
    "\3\0\1\264\57\0\1\262\5\0\1\274\3\0\1\264"+
    "\23\0\1\262\20\0\2\3\6\0\10\3\1\0\1\265"+
    "\5\3\1\275\6\3\12\0\12\3\10\0\2\3\6\0"+
    "\1\3\1\276\6\3\1\0\1\261\7\3\1\276\4\3"+
    "\12\0\12\3\20\0\1\256\2\0\1\262\5\0\1\277"+
    "\27\0\1\262\1\0\1\256\16\0\2\3\6\0\1\300"+
    "\7\3\1\0\1\256\14\3\12\0\3\3\1\300\6\3"+
    "\10\0\2\3\6\0\3\3\1\301\4\3\1\0\1\262"+
    "\14\3\12\0\1\3\1\301\10\3\10\0\2\3\6\0"+
    "\10\3\1\0\1\254\13\3\1\302\12\0\12\3\31\0"+
    "\1\303\3\0\1\264\7\0\1\254\34\0\2\3\6\0"+
    "\10\3\1\0\1\264\3\3\1\304\10\3\12\0\12\3"+
    "\10\0\2\3\6\0\10\3\1\0\1\260\14\3\12\0"+
    "\2\3\1\305\7\3\10\0\2\3\6\0\10\3\1\0"+
    "\1\255\13\3\1\306\12\0\12\3\25\0\1\307\75\0"+
    "\1\310\13\0\1\310\34\0\2\3\6\0\10\3\1\0"+
    "\1\310\13\3\1\311\12\0\12\3\21\0\1\312\7\0"+
    "\1\312\7\0\1\312\40\0\2\3\6\0\1\3\1\313"+
    "\6\3\1\0\1\312\7\3\1\313\4\3\12\0\12\3"+
    "\31\0\2\314\62\0\1\315\5\0\1\315\27\0\1\315"+
    "\41\0\1\316\13\0\1\316\55\0\1\317\13\0\1\317"+
    "\55\0\1\320\36\0\1\320\1\321\31\0\1\322\2\0"+
    "\1\322\56\0\1\312\1\0\1\315\5\0\1\323\1\314"+
    "\1\0\1\324\4\0\1\312\3\0\1\316\13\0\1\315"+
    "\6\0\1\320\1\321\31\0\1\325\2\0\1\325\66\0"+
    "\1\326\1\314\1\0\1\322\56\0\1\312\1\0\1\315"+
    "\5\0\1\327\7\0\1\312\17\0\1\315\41\0\1\330"+
    "\2\0\1\322\10\0\1\317\55\0\1\324\2\0\1\324"+
    "\45\0\2\3\6\0\10\3\1\0\1\320\14\3\12\0"+
    "\10\3\1\331\1\332\23\0\1\315\5\0\1\333\2\0"+
    "\1\322\24\0\1\315\20\0\2\3\6\0\3\3\1\334"+
    "\4\3\1\0\1\315\14\3\12\0\1\3\1\334\10\3"+
    "\10\0\2\3\6\0\10\3\1\0\1\322\2\3\1\335"+
    "\11\3\12\0\12\3\10\0\2\3\6\0\10\3\1\0"+
    "\1\325\2\3\1\336\11\3\12\0\12\3\10\0\2\3"+
    "\6\0\10\3\1\0\1\317\13\3\1\337\12\0\12\3"+
    "\10\0\2\3\6\0\10\3\1\0\1\314\1\340\13\3"+
    "\12\0\12\3\26\0\1\341\74\0\1\342\11\0\1\343"+
    "\1\344\13\0\1\345\42\0\1\346\5\0\1\347\5\0"+
    "\1\350\55\0\1\351\2\0\1\351\66\0\1\352\2\0"+
    "\1\351\2\0\1\353\3\0\1\343\1\344\1\350\12\0"+
    "\1\345\42\0\1\354\2\0\1\351\2\0\1\355\63\0"+
    "\1\355\5\0\1\355\63\0\1\356\2\0\1\351\2\0"+
    "\1\347\5\0\1\350\55\0\1\357\2\0\1\351\6\0"+
    "\1\343\1\344\13\0\1\345\21\0\2\3\6\0\10\3"+
    "\1\0\1\342\11\3\1\360\1\361\1\3\12\0\1\362"+
    "\11\3\10\0\2\3\6\0\10\3\1\0\1\351\2\3"+
    "\1\363\11\3\12\0\12\3\10\0\2\3\6\0\10\3"+
    "\1\0\1\355\5\3\1\364\6\3\12\0\12\3\10\0"+
    "\2\3\6\0\10\3\1\0\1\346\5\3\1\365\5\3"+
    "\1\366\12\0\12\3\27\0\1\367\65\0\1\370\5\0"+
    "\1\371\3\0\1\372\23\0\1\370\33\0\1\370\5\0"+
    "\1\370\27\0\1\370\41\0\1\373\3\0\1\373\65\0"+
    "\1\374\3\0\1\374\65\0\1\375\1\376\12\0\1\377"+
    "\55\0\1\377\13\0\1\377\55\0\2\376\70\0\1\u0100"+
    "\13\0\1\u0100\47\0\1\370\5\0\1\u0101\1\376\2\0"+
    "\1\372\6\0\1\u0102\1\u0103\13\0\1\370\41\0\1\u0104"+
    "\12\0\1\u0102\1\377\55\0\1\u0105\12\0\1\u0102\1\u0100"+
    "\55\0\1\u0102\12\0\1\u0102\56\0\1\u0106\1\376\12\0"+
    "\1\u0103\47\0\1\370\5\0\1\u0107\3\0\1\372\7\0"+
    "\1\u0100\13\0\1\370\20\0\2\3\6\0\3\3\1\u0108"+
    "\4\3\1\0\1\370\14\3\12\0\1\3\1\u0108\10\3"+
    "\10\0\2\3\6\0\10\3\1\0\1\373\3\3\1\u0109"+
    "\10\3\12\0\12\3\10\0\2\3\6\0\10\3\1\0"+
    "\1\374\3\3\1\u010a\10\3\12\0\12\3\10\0\2\3"+
    "\6\0\10\3\1\0\1\u0100\13\3\1\u010b\12\0\12\3"+
    "\10\0\2\3\6\0\10\3\1\0\1\u0102\12\3\1\u010c"+
    "\1\3\12\0\12\3\10\0\2\3\6\0\10\3\1\0"+
    "\1\377\13\3\1\u010d\12\0\12\3\10\0\2\3\6\0"+
    "\10\3\1\0\1\376\1\u010e\13\3\12\0\12\3\30\0"+
    "\1\u010f\72\0\1\u0110\2\0\1\u0110\66\0\1\u0111\2\0"+
    "\1\u0110\1\0\1\u0112\6\0\1\u0113\55\0\1\u0114\4\0"+
    "\1\u0112\6\0\1\u0113\55\0\1\u0112\4\0\1\u0112\64\0"+
    "\1\u0113\13\0\1\u0113\55\0\1\u0115\4\0\1\u0116\21\0"+
    "\1\u0117\42\0\1\u0117\26\0\1\u0117\42\0\1\u0116\4\0"+
    "\1\u0116\64\0\1\u0118\26\0\1\u0118\32\0\1\u0119\7\0"+
    "\1\u011a\2\0\1\u0110\1\0\1\u011b\2\0\1\u0119\3\0"+
    "\1\u0113\12\0\1\u011c\32\0\1\u0119\7\0\1\u0119\7\0"+
    "\1\u0119\61\0\1\u011d\4\0\1\u0116\21\0\1\u0118\32\0"+
    "\1\u0119\7\0\1\u011e\4\0\1\u0116\2\0\1\u0119\51\0"+
    "\1\u0119\7\0\1\u011f\7\0\1\u0119\16\0\1\u0118\42\0"+
    "\1\u0120\4\0\1\u0116\21\0\1\u011c\42\0\1\u0121\2\0"+
    "\1\u0110\1\0\1\u0112\6\0\1\u0113\12\0\1\u0118\21\0"+
    "\2\3\6\0\10\3\1\0\1\u0110\2\3\1\u0122\11\3"+
    "\12\0\12\3\10\0\2\3\6\0\10\3\1\0\1\u0112"+
    "\4\3\1\u0123\7\3\12\0\12\3\10\0\2\3\6\0"+
    "\10\3\1\0\1\u0113\13\3\1\u0124\12\0\12\3\10\0"+
    "\2\3\6\0\10\3\1\0\1\u0118\14\3\12\0\1\u0125"+
    "\11\3\10\0\2\3\6\0\1\3\1\u0126\6\3\1\0"+
    "\1\u0119\7\3\1\u0126\4\3\12\0\12\3\10\0\2\3"+
    "\6\0\10\3\1\0\1\u0116\4\3\1\u0127\7\3\12\0"+
    "\12\3\10\0\2\3\6\0\10\3\1\0\1\u0117\14\3"+
    "\12\0\1\u0128\11\3\31\0\1\u0129\2\0\1\u0129\66\0"+
    "\1\u0129\2\0\1\u0129\10\0\1\u012a\55\0\1\u012a\13\0"+
    "\1\u012a\55\0\1\u012b\13\0\1\u012b\55\0\1\u012c\13\0"+
    "\1\u012c\55\0\1\u012d\13\0\1\u012d\45\0\1\u012e\7\0"+
    "\1\u012e\7\0\1\u012e\61\0\1\u012f\11\0\1\u012f\47\0"+
    "\1\u012e\7\0\1\u0130\2\0\1\u0129\4\0\1\u012e\1\0"+
    "\1\u012f\1\0\1\u0131\55\0\1\u0132\13\0\1\u0132\45\0"+
    "\1\u012e\7\0\1\u0133\7\0\1\u012e\3\0\1\u012d\45\0"+
    "\1\u012e\7\0\1\u0134\7\0\1\u012e\3\0\1\u012c\55\0"+
    "\1\u0135\11\0\1\u012f\1\0\1\u012c\45\0\1\u012e\7\0"+
    "\1\u0136\7\0\1\u012e\1\0\1\u012f\47\0\1\u012e\7\0"+
    "\1\u0137\7\0\1\u012e\3\0\1\u012b\45\0\1\u012e\7\0"+
    "\1\u0138\2\0\1\u0129\4\0\1\u012e\3\0\1\u012a\34\0"+
    "\2\3\6\0\10\3\1\0\1\u0129\2\3\1\u0139\11\3"+
    "\12\0\12\3\10\0\2\3\6\0\10\3\1\0\1\u012a"+
    "\13\3\1\u013a\12\0\12\3\10\0\2\3\6\0\1\3"+
    "\1\u013b\6\3\1\0\1\u012e\7\3\1\u013b\4\3\12\0"+
    "\12\3\10\0\2\3\6\0\10\3\1\0\1\u012f\11\3"+
    "\1\u013c\2\3\12\0\12\3\10\0\2\3\6\0\10\3"+
    "\1\0\1\u012c\13\3\1\u013d\12\0\12\3\10\0\2\3"+
    "\6\0\10\3\1\0\1\u012d\13\3\1\u013e\12\0\12\3"+
    "\23\0\1\u013f\5\0\1\u013f\27\0\1\u013f\33\0\1\u0140"+
    "\5\0\1\u0140\27\0\1\u0140\30\0\1\u0141\10\0\1\u0142"+
    "\2\0\1\u0143\26\0\1\u0141\37\0\1\u0143\2\0\1\u0143"+
    "\55\0\1\u0141\10\0\1\u0141\31\0\1\u0141\37\0\1\u0144"+
    "\2\0\1\u0144\60\0\1\u0145\5\0\1\u0145\27\0\1\u0145"+
    "\30\0\1\u0141\2\0\1\u0146\5\0\1\u0147\2\0\1\u0148"+
    "\24\0\1\u0146\1\0\1\u0141\26\0\1\u0141\2\0\1\u0140"+
    "\5\0\1\u0149\2\0\1\u0143\24\0\1\u0140\1\0\1\u0141"+
    "\31\0\1\u0140\5\0\1\u014a\2\0\1\u0143\24\0\1\u0140"+
    "\30\0\1\u0141\10\0\1\u014b\2\0\1\u0144\26\0\1\u0141"+
    "\37\0\1\u0148\2\0\1\u0148\60\0\1\u0145\5\0\1\u014c"+
    "\2\0\1\u0143\24\0\1\u0145\33\0\1\u0145\5\0\1\u014d"+
    "\2\0\1\u0144\24\0\1\u0145\30\0\1\u0141\10\0\1\u014e"+
    "\2\0\1\u0148\26\0\1\u0141\31\0\1\u013f\5\0\1\u014f"+
    "\2\0\1\u0144\24\0\1\u013f\20\0\2\3\6\0\3\3"+
    "\1\u0150\4\3\1\0\1\u013f\14\3\12\0\1\3\1\u0150"+
    "\10\3\10\0\2\3\6\0\3\3\1\u0151\4\3\1\0"+
    "\1\u0140\14\3\12\0\1\3\1\u0151\10\3\10\0\2\3"+
    "\6\0\10\3\1\0\1\u0144\2\3\1\u0152\11\3\12\0"+
    "\12\3\10\0\2\3\6\0\3\3\1\u0153\4\3\1\0"+
    "\1\u0145\14\3\12\0\1\3\1\u0153\10\3\10\0\2\3"+
    "\6\0\10\3\1\0\1\u0143\2\3\1\u0154\11\3\12\0"+
    "\12\3\10\0\2\3\6\0\1\u0155\7\3\1\0\1\u0141"+
    "\14\3\12\0\3\3\1\u0155\6\3\31\0\2\u0156\70\0"+
    "\2\u0157\70\0\1\u0158\3\0\1\u0158\57\0\1\u0159\5\0"+
    "\1\u015a\3\0\1\u0158\23\0\1\u0159\33\0\1\u0159\5\0"+
    "\1\u0159\27\0\1\u0159\41\0\1\u015b\1\0\1\u015b\67\0"+
    "\1\u015c\12\0\1\u015c\56\0\1\u015d\1\u0156\11\0\1\u015c"+
    "\50\0\1\u0159\5\0\1\u015e\1\u0156\1\u015b\1\0\1\u0158"+
    "\6\0\1\u015c\14\0\1\u0159\33\0\1\u0159\5\0\1\u015f"+
    "\1\0\1\u015b\25\0\1\u0159\33\0\1\u0159\5\0\1\u0160"+
    "\1\u0157\2\0\1\u0158\23\0\1\u0159\33\0\1\u0159\5\0"+
    "\1\u0161\1\u0157\26\0\1\u0159\41\0\1\u0162\1\0\1\u015b"+
    "\1\0\1\u0158\57\0\1\u0159\5\0\1\u0163\12\0\1\u015c"+
    "\14\0\1\u0159\41\0\1\u0164\1\0\1\u015b\10\0\1\u015c"+
    "\50\0\1\u0159\5\0\1\u0165\1\0\1\u015b\1\0\1\u0158"+
    "\23\0\1\u0159\41\0\1\u0166\1\u0156\1\u015b\46\0\2\3"+
    "\6\0\10\3\1\0\1\u0156\1\u0167\13\3\12\0\12\3"+
    "\10\0\2\3\6\0\10\3\1\0\1\u0157\1\u0168\13\3"+
    "\12\0\12\3\10\0\2\3\6\0\10\3\1\0\1\u015b"+
    "\1\3\1\u0169\12\3\12\0\12\3\10\0\2\3\6\0"+
    "\10\3\1\0\1\u015c\12\3\1\u016a\1\3\12\0\12\3"+
    "\10\0\2\3\6\0\3\3\1\u016b\4\3\1\0\1\u0159"+
    "\14\3\12\0\1\3\1\u016b\10\3\10\0\2\3\6\0"+
    "\10\3\1\0\1\u0158\3\3\1\u016c\10\3\12\0\12\3"+
    "\31\0\1\u016d\32\0\1\u016d\36\0\1\u016e\12\0\1\u016e"+
    "\56\0\1\u016f\12\0\1\u016e\17\0\1\u016d\36\0\1\u0170"+
    "\13\0\1\u0170\55\0\1\u0171\13\0\1\u0171\55\0\1\u0172"+
    "\12\0\1\u016e\1\u0173\16\0\1\u016d\36\0\1\u0174\12\0"+
    "\1\u016e\1\u0170\55\0\1\u0175\13\0\1\u0170\16\0\1\u016d"+
    "\36\0\1\u0176\12\0\1\u016e\1\u0171\55\0\1\u0173\13\0"+
    "\1\u0173\55\0\1\u0177\12\0\1\u016e\1\u0170\16\0\1\u016d"+
    "\15\0\2\3\6\0\10\3\1\0\1\u0170\13\3\1\u0178"+
    "\12\0\12\3\10\0\2\3\6\0\10\3\1\0\1\u0171"+
    "\13\3\1\u0179\12\0\12\3\10\0\2\3\6\0\10\3"+
    "\1\0\1\u016e\12\3\1\u017a\1\3\12\0\12\3\10\0"+
    "\2\3\6\0\10\3\1\0\1\u016d\14\3\12\0\4\3"+
    "\1\u017b\5\3\31\0\1\u017c\3\0\1\u017c\65\0\1\u017d"+
    "\13\0\1\u017d\55\0\2\u017e\70\0\1\u017f\1\u017e\2\0"+
    "\1\u017c\7\0\1\u017d\55\0\1\u0180\1\u017e\12\0\1\u017d"+
    "\55\0\1\u0181\3\0\1\u017c\7\0\1\u017d\34\0\2\3"+
    "\6\0\10\3\1\0\1\u017d\13\3\1\u0182\12\0\12\3"+
    "\10\0\2\3\6\0\10\3\1\0\1\u017e\1\u0183\13\3"+
    "\12\0\12\3\10\0\2\3\6\0\10\3\1\0\1\u017c"+
    "\3\3\1\u0184\10\3\12\0\12\3\20\0\1\u0185\10\0"+
    "\1\u0185\31\0\1\u0185\37\0\2\u0186\57\0\1\u0185\10\0"+
    "\1\u0187\1\u0186\30\0\1\u0185\16\0\2\3\6\0\10\3"+
    "\1\0\1\u0186\1\u0188\13\3\12\0\12\3\10\0\2\3"+
    "\6\0\1\u0189\7\3\1\0\1\u0185\14\3\12\0\3\3"+
    "\1\u0189\6\3\21\0\1\u018a\7\0\1\u018a\7\0\1\u018a"+
    "\61\0\1\u018b\1\0\1\u018b\57\0\1\u018a\7\0\1\u018c"+
    "\1\0\1\u018b\5\0\1\u018a\40\0\2\3\6\0\10\3"+
    "\1\0\1\u018b\1\3\1\u018d\12\3\12\0\12\3\10\0"+
    "\2\3\6\0\1\3\1\u018e\6\3\1\0\1\u018a\7\3"+
    "\1\u018e\4\3\12\0\12\3\23\0\1\u018f\5\0\1\u018f"+
    "\27\0\1\u018f\20\0\2\3\6\0\3\3\1\u0190\4\3"+
    "\1\0\1\u018f\14\3\12\0\1\3\1\u0190\10\3\31\0"+
    "\1\u0191\6\0\1\u0191\41\0\2\3\6\0\10\3\1\0"+
    "\1\u0191\6\3\1\u0192\5\3\12\0\12\3\31\0\1\u0193"+
    "\3\0\1\u0193\44\0\2\3\6\0\10\3\1\0\1\u0193"+
    "\3\3\1\u0194\10\3\12\0\12\3\31\0\2\u0195\47\0"+
    "\2\3\6\0\10\3\1\0\1\u0195\1\u0196\13\3\12\0"+
    "\12\3\31\0\1\u0197\1\0\1\u0197\46\0\2\3\6\0"+
    "\10\3\1\0\1\u0197\1\3\1\u0198\12\3\12\0\12\3"+
    "\31\0\1\u0199\3\0\1\u0199\44\0\2\3\6\0\10\3"+
    "\1\0\1\u0199\3\3\1\u019a\10\3\12\0\12\3\20\0"+
    "\1\u019b\10\0\1\u019b\31\0\1\u019b\16\0\2\3\6\0"+
    "\1\u019c\7\3\1\0\1\u019b\14\3\12\0\3\3\1\u019c"+
    "\6\3\21\0\1\u019d\7\0\1\u019d\7\0\1\u019d\40\0"+
    "\2\3\6\0\1\3\1\u019e\6\3\1\0\1\u019d\7\3"+
    "\1\u019e\4\3\12\0\12\3\7\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[19836];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\16\1\12\11\6\1\3\0\1\1\1\0"+
    "\1\1\2\0\1\1\11\0\2\1\1\0\3\1\1\0"+
    "\4\1\1\0\1\11\1\0\1\1\1\0\1\11\1\0"+
    "\2\1\2\0\1\1\2\0\1\1\16\0\2\1\1\0"+
    "\3\1\1\0\5\1\2\0\1\1\1\0\1\1\4\0"+
    "\1\1\4\0\1\11\5\0\2\1\1\0\3\1\1\0"+
    "\4\1\2\0\1\1\1\0\1\1\21\0\2\1\1\0"+
    "\3\1\1\0\3\1\2\0\1\1\1\0\2\1\1\11"+
    "\4\0\1\1\1\0\1\1\1\0\1\11\1\1\2\0"+
    "\2\1\2\0\2\1\1\0\7\1\1\0\1\11\1\1"+
    "\1\11\1\1\1\11\1\0\1\1\1\0\2\11\1\0"+
    "\1\1\2\0\2\1\1\0\2\1\1\0\5\1\17\0"+
    "\7\1\21\0\7\1\1\11\1\0\1\1\1\0\1\11"+
    "\1\1\5\0\1\1\6\0\10\1\20\0\6\1\21\0"+
    "\6\1\2\11\5\0\2\1\1\0\2\1\4\0\7\1"+
    "\1\0\1\11\1\1\2\0\1\1\1\0\1\1\1\0"+
    "\6\1\2\0\1\11\2\1\1\0\3\1\3\0\2\1"+
    "\1\11\1\0\3\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\11\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[414];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    private Symbol symbol(int type, Object value){
        return new Symbol(type, yyline, yycolumn, value);
    }
    private Symbol symbol(int type){
        return new Symbol(type, yyline, yycolumn);
    }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  LexicoCup(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  LexicoCup(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 23: 
          { return new Symbol(sym.Valores, yychar, yyline, yytext());
          }
        case 34: break;
        case 12: 
          { return new Symbol(sym.DosPuntos, yychar, yyline, yytext());
          }
        case 35: break;
        case 1: 
          { return new Symbol(sym.ERROR, yychar, yyline, yytext());
          }
        case 36: break;
        case 27: 
          { return new Symbol(sym.GraficaPie, yychar, yyline, yytext());
          }
        case 37: break;
        case 22: 
          { return new Symbol(sym.Archivo, yychar, yyline, yytext());
          }
        case 38: break;
        case 20: 
          { return new Symbol(sym.STRING, yychar, yyline, yytext());
          }
        case 39: break;
        case 10: 
          { return new Symbol(sym.CorcheteFinal, yychar, yyline, yytext());
          }
        case 40: break;
        case 16: 
          { return new Symbol(sym.Decimal, yychar, yyline, yytext());
          }
        case 41: break;
        case 5: 
          { return new Symbol(sym.ParentesisInicio, yychar, yyline, yytext());
          }
        case 42: break;
        case 31: 
          { return new Symbol(sym.DefinirGlobales, yychar, yyline, yytext());
          }
        case 43: break;
        case 19: 
          { return new Symbol(sym.Titulo, yychar, yyline, yytext());
          }
        case 44: break;
        case 15: 
          { return new Symbol(sym.Cadena, yychar, yyline, yytext());
          }
        case 45: break;
        case 13: 
          { return new Symbol(sym.Dollar, yychar, yyline, yytext());
          }
        case 46: break;
        case 9: 
          { return new Symbol(sym.CorcheteInicio, yychar, yyline, yytext());
          }
        case 47: break;
        case 32: 
          { return new Symbol(sym.PuntajeEspecifico, yychar, yyline, yytext());
          }
        case 48: break;
        case 24: 
          { return new Symbol(sym.TituloX, yychar, yyline, yytext());
          }
        case 49: break;
        case 28: 
          { return new Symbol(sym.GraficaBarras, yychar, yyline, yytext());
          }
        case 50: break;
        case 6: 
          { return new Symbol(sym.ParentesisFinal, yychar, yyline, yytext());
          }
        case 51: break;
        case 26: 
          { return new Symbol(sym.Coma, yychar, yyline, yytext());
          }
        case 52: break;
        case 21: 
          { return new Symbol(sym.Compare, yychar, yyline, yytext());
          }
        case 53: break;
        case 17: 
          { return new Symbol(sym.EjeX, yychar, yyline, yytext());
          }
        case 54: break;
        case 8: 
          { return new Symbol(sym.LlaveFinal, yychar, yyline, yytext());
          }
        case 55: break;
        case 18: 
          { return new Symbol(sym.DOUBLE, yychar, yyline, yytext());
          }
        case 56: break;
        case 2: 
          { return new Symbol(sym.Identificador, yychar, yyline, yytext());
          }
        case 57: break;
        case 11: 
          { return new Symbol(sym.PuntoComa, yychar, yyline, yytext());
          }
        case 58: break;
        case 29: 
          { return new Symbol(sym.GraficaLineas, yychar, yyline, yytext());
          }
        case 59: break;
        case 4: 
          { return new Symbol(sym.Igual, yychar, yyline, yytext());
          }
        case 60: break;
        case 33: 
          { return new Symbol(sym.GenerarReporteEstadistico, yychar, yyline, yytext());
          }
        case 61: break;
        case 25: 
          { return new Symbol(sym.TituloY, yychar, yyline, yytext());
          }
        case 62: break;
        case 3: 
          { /*Ignore*/
          }
        case 63: break;
        case 14: 
          { return new Symbol(sym.Ruta, yychar, yyline, yytext());
          }
        case 64: break;
        case 30: 
          { return new Symbol(sym.PuntajeGeneral, yychar, yyline, yytext());
          }
        case 65: break;
        case 7: 
          { return new Symbol(sym.LlaveInicio, yychar, yyline, yytext());
          }
        case 66: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(sym.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
