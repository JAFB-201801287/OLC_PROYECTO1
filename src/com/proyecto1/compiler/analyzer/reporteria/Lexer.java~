/* The following code was generated by JFlex 1.4.3 on 9/4/21, 5:32 PM */

package com.proyecto1.compiler.analyzer.reporteria;
import static com.proyecto1.compiler.analyzer.reporteria.Tokens.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 9/4/21, 5:32 PM from the specification file
 * <tt>/home/jafb/NetBeansProjects/OLC_PROYECTO1/src/com/proyecto1/compiler/analyzer/reporteria/Lexer.flex</tt>
 */
public class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\7\2\0\1\3\22\0\1\3\1\0\1\66\1\4"+
    "\1\47\2\0\1\63\1\37\1\40\1\5\1\0\1\3\1\0\1\62"+
    "\1\0\2\2\1\16\1\2\1\20\1\2\1\17\1\2\1\15\1\2"+
    "\1\46\1\45\1\10\1\36\1\21\2\0\1\14\1\33\1\11\1\30"+
    "\1\35\1\54\1\27\1\56\1\25\1\52\1\1\1\34\1\13\1\26"+
    "\1\12\1\50\1\1\1\24\1\22\1\23\1\32\1\57\1\1\1\60"+
    "\1\61\1\1\1\43\1\0\1\44\1\0\1\1\1\0\1\51\1\33"+
    "\1\53\1\30\1\35\1\54\1\27\1\56\1\25\1\52\1\1\1\34"+
    "\1\55\1\26\1\31\1\50\1\1\1\24\1\22\1\23\1\32\1\57"+
    "\1\1\1\60\1\61\1\1\1\41\1\6\1\42\u1f9a\0\1\64\1\65"+
    "\2\0\1\67\1\70\udfe2\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\1\1\3\2\1\1\4\1\1"+
    "\7\2\1\5\1\6\1\7\1\10\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\2\2\4\1\2\0\1\3\14\0"+
    "\1\2\1\0\3\2\1\0\2\2\1\0\5\2\1\0"+
    "\1\17\1\0\1\17\1\0\1\20\1\0\1\20\1\21"+
    "\22\0\4\2\1\0\2\2\1\0\5\2\1\3\1\22"+
    "\11\0\1\22\7\0\4\2\1\0\2\2\1\0\2\2"+
    "\1\22\2\2\24\0\4\2\1\0\2\2\1\0\4\2"+
    "\1\23\1\0\1\24\3\0\1\23\1\25\6\0\1\23"+
    "\2\25\1\0\1\25\2\0\2\2\1\23\1\24\1\0"+
    "\2\2\2\25\3\2\1\26\1\27\1\0\1\30\1\0"+
    "\1\26\1\31\1\32\1\0\1\26\2\0\1\30\1\27"+
    "\2\0\1\26\1\27\1\31\1\32\1\0\4\2\1\30"+
    "\17\0\7\2\21\0\7\2\1\33\3\0\1\33\2\0"+
    "\1\33\5\0\1\33\3\0\1\34\1\33\2\2\1\33"+
    "\4\2\20\0\6\2\21\0\6\2\1\35\1\0\1\35"+
    "\3\0\1\35\1\0\3\36\5\0\2\35\1\36\4\2"+
    "\2\37\4\0\2\37\1\0\2\37\2\2\1\37\1\2"+
    "\2\40\2\0\1\40\1\0\1\2\1\40\1\2\3\0"+
    "\2\2\2\41\1\0\1\2\1\41\1\0\1\2\1\0"+
    "\1\2\1\0\1\2\1\0\1\2\1\0\1\2\1\0"+
    "\1\2\1\0\1\2\2\42";

  private static int [] zzUnpackAction() {
    int [] result = new int[414];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\71\0\162\0\253\0\344\0\u011d\0\u0156\0\71"+
    "\0\u018f\0\u01c8\0\u0201\0\u023a\0\u0273\0\u02ac\0\u02e5\0\u031e"+
    "\0\71\0\71\0\71\0\71\0\71\0\71\0\71\0\71"+
    "\0\71\0\71\0\u0357\0\u0390\0\u03c9\0\u0402\0\u043b\0\u0474"+
    "\0\253\0\u04ad\0\u04e6\0\u051f\0\u0558\0\u0591\0\u05ca\0\u0603"+
    "\0\u063c\0\u0675\0\u06ae\0\u06e7\0\u0720\0\u0759\0\u0792\0\u07cb"+
    "\0\u0804\0\u083d\0\u0876\0\u08af\0\u08e8\0\u0921\0\u095a\0\u0993"+
    "\0\u09cc\0\u0a05\0\u0a3e\0\u0a77\0\u0ab0\0\u03c9\0\71\0\u0402"+
    "\0\u0402\0\u043b\0\71\0\u0474\0\u0474\0\u04ad\0\u0ae9\0\u0b22"+
    "\0\u0b5b\0\u0b94\0\u0bcd\0\u0c06\0\u0c3f\0\u0c78\0\u0cb1\0\u0cea"+
    "\0\u0d23\0\u0d5c\0\u0d95\0\u0dce\0\u0e07\0\u0e40\0\u0e79\0\u0eb2"+
    "\0\u0eeb\0\u0f24\0\u0f5d\0\u0f96\0\u0fcf\0\u1008\0\u1041\0\u107a"+
    "\0\u10b3\0\u10ec\0\u1125\0\u115e\0\u1197\0\71\0\u11d0\0\u1209"+
    "\0\u1242\0\u127b\0\u12b4\0\u12ed\0\u1326\0\u135f\0\u1398\0\u13d1"+
    "\0\71\0\u140a\0\u1443\0\u147c\0\u14b5\0\u14ee\0\u1527\0\u1560"+
    "\0\u1599\0\u15d2\0\u160b\0\u1644\0\u167d\0\u16b6\0\u16ef\0\u1728"+
    "\0\u1761\0\u179a\0\162\0\u17d3\0\u180c\0\u1845\0\u187e\0\u18b7"+
    "\0\u18f0\0\u1929\0\u1962\0\u199b\0\u19d4\0\u1a0d\0\u1a46\0\u1a7f"+
    "\0\u1ab8\0\u1af1\0\u1b2a\0\u1b63\0\u1b9c\0\u1bd5\0\u1c0e\0\u1c47"+
    "\0\u1c80\0\u1cb9\0\u1cf2\0\u1d2b\0\u1d64\0\u1d9d\0\u1dd6\0\u1e0f"+
    "\0\u1e48\0\u1e81\0\u1eba\0\u1ef3\0\u1f2c\0\u1f65\0\u1f9e\0\u1fd7"+
    "\0\u2010\0\u2049\0\u2082\0\71\0\u20bb\0\u20f4\0\u212d\0\u2166"+
    "\0\u219f\0\u20bb\0\u21d8\0\u2082\0\u1fd7\0\71\0\u2211\0\u2049"+
    "\0\u224a\0\u2283\0\u22bc\0\u22f5\0\162\0\u232e\0\u2367\0\u23a0"+
    "\0\u23d9\0\u2082\0\162\0\u2412\0\u244b\0\u2484\0\u24bd\0\71"+
    "\0\u24f6\0\71\0\u252f\0\u2568\0\71\0\71\0\u25a1\0\71"+
    "\0\u25da\0\u2568\0\u25a1\0\u24f6\0\u2613\0\u264c\0\162\0\162"+
    "\0\162\0\162\0\u2685\0\u26be\0\u26f7\0\u2730\0\u2769\0\162"+
    "\0\u27a2\0\u27db\0\u2814\0\u284d\0\u2886\0\u28bf\0\u28f8\0\u2931"+
    "\0\u296a\0\u29a3\0\u29dc\0\u2a15\0\u2a4e\0\u2a87\0\u2ac0\0\u2af9"+
    "\0\u2b32\0\u2b6b\0\u2ba4\0\u2bdd\0\u2c16\0\u2c4f\0\u2c88\0\u2cc1"+
    "\0\u2cfa\0\u2d33\0\u2d6c\0\u2da5\0\u2dde\0\u2e17\0\u2e50\0\u2e89"+
    "\0\u2ec2\0\u2efb\0\u2f34\0\u2f6d\0\u2fa6\0\u2fdf\0\u3018\0\u3051"+
    "\0\u308a\0\u30c3\0\u30fc\0\u3135\0\u316e\0\u31a7\0\u31e0\0\u3219"+
    "\0\u3252\0\u328b\0\71\0\u32c4\0\u32fd\0\u3336\0\u3336\0\u336f"+
    "\0\u33a8\0\u33e1\0\u341a\0\u3453\0\u348c\0\u34c5\0\u34fe\0\71"+
    "\0\u3537\0\u3570\0\u35a9\0\162\0\u35e2\0\u361b\0\u3654\0\u368d"+
    "\0\u36c6\0\u36ff\0\u3738\0\u3771\0\u37aa\0\u37e3\0\u381c\0\u3855"+
    "\0\u388e\0\u38c7\0\u3900\0\u3939\0\u3972\0\u39ab\0\u39e4\0\u3a1d"+
    "\0\u3a56\0\u3a8f\0\u3ac8\0\u3b01\0\u3b3a\0\u3b73\0\u3bac\0\u3be5"+
    "\0\u3c1e\0\u3c57\0\u3c90\0\u3cc9\0\u3d02\0\u3d3b\0\u3d74\0\u3dad"+
    "\0\u3de6\0\u3e1f\0\u3e58\0\u3e91\0\u3eca\0\u3f03\0\u3f3c\0\u3f75"+
    "\0\u3fae\0\u3fe7\0\u4020\0\u4059\0\u4092\0\u40cb\0\u4104\0\71"+
    "\0\u413d\0\u4176\0\u41af\0\u41af\0\u41e8\0\u4221\0\71\0\u4104"+
    "\0\u425a\0\u4293\0\u42cc\0\u4221\0\u4305\0\u413d\0\162\0\162"+
    "\0\u433e\0\u4377\0\u43b0\0\u43e9\0\u4422\0\71\0\u445b\0\u4494"+
    "\0\u44cd\0\u4506\0\u44cd\0\u4494\0\u453f\0\u4506\0\u453f\0\u4578"+
    "\0\u45b1\0\162\0\u45ea\0\u4623\0\71\0\u465c\0\u4695\0\u4695"+
    "\0\u4623\0\u46ce\0\162\0\u4707\0\u4740\0\u4779\0\u47b2\0\u47eb"+
    "\0\u4824\0\u485d\0\71\0\u485d\0\u4896\0\162\0\u48cf\0\u4908"+
    "\0\u4941\0\u497a\0\u49b3\0\u49ec\0\u4a25\0\u4a5e\0\u4a97\0\u4ad0"+
    "\0\u4b09\0\u4b42\0\u4b7b\0\u4bb4\0\71\0\162";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[414];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\2\1\7\1\10"+
    "\1\11\1\12\2\3\1\13\4\4\1\2\1\14\1\15"+
    "\3\3\1\16\1\17\4\3\1\20\1\21\1\22\1\23"+
    "\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33"+
    "\1\13\1\3\1\12\3\3\1\34\2\3\1\2\1\35"+
    "\1\36\1\2\1\37\1\40\1\2\72\0\2\3\6\0"+
    "\10\3\1\0\14\3\12\0\12\3\11\0\1\41\12\0"+
    "\4\41\41\0\1\42\11\0\1\5\71\0\1\43\1\44"+
    "\71\0\1\45\3\0\1\46\1\0\1\47\6\0\1\50"+
    "\1\51\1\52\3\0\1\46\1\53\2\0\1\54\13\0"+
    "\1\47\1\55\27\0\1\56\60\0\2\3\3\0\1\57"+
    "\2\0\1\3\1\60\6\3\1\0\7\3\1\60\4\3"+
    "\12\0\12\3\10\0\2\3\3\0\1\61\2\0\10\3"+
    "\1\0\2\3\1\62\11\3\12\0\12\3\10\0\2\3"+
    "\3\0\1\50\2\0\10\3\1\0\1\3\1\63\12\3"+
    "\12\0\12\3\10\0\2\3\3\0\1\52\2\0\10\3"+
    "\1\0\3\3\1\64\10\3\12\0\12\3\10\0\2\3"+
    "\3\0\1\65\2\0\10\3\1\0\2\3\1\66\10\3"+
    "\1\67\12\0\12\3\10\0\2\3\3\0\1\70\2\0"+
    "\1\3\1\71\6\3\1\0\7\3\1\71\3\3\1\72"+
    "\12\0\12\3\10\0\2\3\3\0\1\55\2\0\10\3"+
    "\1\0\14\3\12\0\2\3\1\73\7\3\10\0\2\3"+
    "\3\0\1\53\2\0\10\3\1\0\10\3\1\74\3\3"+
    "\12\0\12\3\10\0\2\3\3\0\1\47\2\0\3\3"+
    "\1\75\4\3\1\0\14\3\12\0\1\3\1\75\10\3"+
    "\7\0\63\76\1\77\5\76\64\100\1\0\1\101\3\100"+
    "\66\102\1\103\2\102\67\104\1\0\1\105\2\0\1\106"+
    "\12\0\4\106\50\0\7\43\1\0\61\43\4\44\1\0"+
    "\1\107\1\0\62\44\6\0\1\110\2\0\1\111\1\0"+
    "\1\112\1\113\6\0\1\114\1\115\1\0\1\116\3\0"+
    "\1\117\1\0\1\120\1\121\13\0\1\113\1\0\1\111"+
    "\1\122\1\112\21\0\1\123\4\0\1\112\16\0\1\117"+
    "\22\0\1\112\21\0\1\120\25\0\1\120\42\0\1\115"+
    "\15\0\1\115\52\0\1\124\2\0\1\111\2\0\1\113"+
    "\34\0\1\113\1\0\1\111\23\0\1\114\14\0\1\114"+
    "\53\0\1\125\17\0\1\125\50\0\1\126\17\0\1\127"+
    "\25\0\1\122\22\0\1\121\26\0\1\121\45\0\1\130"+
    "\64\0\1\112\4\0\1\112\41\0\1\112\14\0\2\3"+
    "\3\0\1\112\2\0\2\3\1\131\5\3\1\0\14\3"+
    "\12\0\5\3\1\131\4\3\15\0\1\111\2\0\1\111"+
    "\41\0\1\111\16\0\2\3\3\0\1\111\2\0\1\132"+
    "\7\3\1\0\14\3\12\0\3\3\1\132\6\3\10\0"+
    "\2\3\3\0\1\115\2\0\10\3\1\0\2\3\1\133"+
    "\11\3\12\0\12\3\10\0\2\3\3\0\1\114\2\0"+
    "\10\3\1\0\1\3\1\134\12\3\12\0\12\3\15\0"+
    "\1\135\5\0\1\113\11\0\1\127\22\0\1\113\20\0"+
    "\2\3\3\0\1\113\2\0\3\3\1\136\4\3\1\0"+
    "\14\3\12\0\1\3\1\136\10\3\10\0\2\3\3\0"+
    "\1\127\2\0\10\3\1\0\4\3\1\137\7\3\12\0"+
    "\12\3\15\0\1\140\23\0\1\117\21\0\1\122\15\0"+
    "\2\3\3\0\1\117\2\0\10\3\1\0\10\3\1\141"+
    "\3\3\12\0\12\3\10\0\2\3\3\0\1\122\2\0"+
    "\10\3\1\0\14\3\12\0\4\3\1\142\5\3\10\0"+
    "\2\3\3\0\1\121\2\0\10\3\1\0\13\3\1\143"+
    "\12\0\12\3\10\0\2\3\3\0\1\125\2\0\10\3"+
    "\1\0\4\3\1\144\7\3\12\0\12\3\10\0\2\3"+
    "\3\0\1\120\2\0\10\3\1\0\12\3\1\145\1\3"+
    "\12\0\12\3\13\0\1\146\72\0\1\147\3\0\1\150"+
    "\10\0\1\151\1\0\1\152\3\0\1\150\1\153\1\154"+
    "\1\0\1\155\12\0\1\156\3\0\1\157\1\0\1\160"+
    "\1\0\1\161\16\0\1\160\47\0\1\160\20\0\1\156"+
    "\41\0\1\156\26\0\1\157\45\0\1\157\22\0\1\153"+
    "\23\0\1\153\44\0\1\162\16\0\1\162\51\0\1\163"+
    "\14\0\1\151\11\0\1\155\41\0\1\154\24\0\1\154"+
    "\43\0\1\150\3\0\1\150\16\0\1\150\45\0\1\161"+
    "\51\0\1\161\16\0\1\164\16\0\1\164\51\0\1\165"+
    "\24\0\1\154\14\0\1\156\26\0\1\166\45\0\1\157"+
    "\1\0\1\160\20\0\1\151\14\0\1\151\53\0\1\167"+
    "\16\0\1\164\7\0\1\155\41\0\1\155\26\0\1\155"+
    "\46\0\1\170\56\0\2\3\3\0\1\156\2\0\10\3"+
    "\1\0\14\3\12\0\1\171\11\3\10\0\2\3\3\0"+
    "\1\160\2\0\10\3\1\0\14\3\12\0\6\3\1\172"+
    "\3\3\10\0\2\3\3\0\1\162\2\0\10\3\1\0"+
    "\3\3\1\173\10\3\12\0\12\3\10\0\2\3\3\0"+
    "\1\153\2\0\10\3\1\0\10\3\1\174\3\3\12\0"+
    "\12\3\15\0\1\175\26\0\1\155\16\0\1\157\15\0"+
    "\2\3\3\0\1\157\2\0\10\3\1\0\14\3\12\0"+
    "\4\3\1\176\5\3\10\0\2\3\3\0\1\155\2\0"+
    "\10\3\1\0\13\3\1\177\12\0\12\3\15\0\1\200"+
    "\16\0\1\164\5\0\1\154\36\0\2\3\3\0\1\154"+
    "\2\0\10\3\1\0\11\3\1\201\2\3\12\0\12\3"+
    "\10\0\2\3\3\0\1\164\2\0\10\3\1\0\3\3"+
    "\1\202\10\3\12\0\12\3\10\0\2\3\3\0\1\161"+
    "\2\0\10\3\1\0\14\3\12\0\10\3\1\203\1\3"+
    "\10\0\2\3\3\0\1\151\2\0\10\3\1\0\1\3"+
    "\1\204\12\3\12\0\12\3\10\0\2\3\3\0\1\150"+
    "\2\0\1\3\1\205\6\3\1\0\7\3\1\205\4\3"+
    "\12\0\12\3\15\0\1\206\5\0\1\207\7\0\1\210"+
    "\1\211\1\212\5\0\1\213\14\0\1\207\25\0\1\214"+
    "\15\0\1\214\52\0\1\215\5\0\1\215\34\0\1\215"+
    "\25\0\1\212\17\0\1\212\50\0\1\216\25\0\1\216"+
    "\42\0\1\217\25\0\1\217\42\0\1\220\15\0\1\220"+
    "\52\0\1\221\5\0\1\221\34\0\1\221\25\0\1\222"+
    "\16\0\1\222\51\0\1\223\16\0\1\223\51\0\1\224"+
    "\17\0\1\224\50\0\1\225\5\0\1\215\7\0\1\220"+
    "\24\0\1\215\25\0\1\226\17\0\1\226\50\0\1\227"+
    "\5\0\1\221\17\0\1\217\14\0\1\221\25\0\1\211"+
    "\16\0\1\211\51\0\1\230\15\0\1\220\1\0\1\226"+
    "\56\0\1\231\55\0\2\3\3\0\1\221\2\0\3\3"+
    "\1\232\4\3\1\0\14\3\12\0\1\3\1\232\10\3"+
    "\10\0\2\3\3\0\1\223\2\0\10\3\1\0\3\3"+
    "\1\233\10\3\12\0\12\3\10\0\2\3\3\0\1\224"+
    "\2\0\10\3\1\0\4\3\1\234\7\3\12\0\12\3"+
    "\10\0\2\3\3\0\1\216\2\0\10\3\1\0\12\3"+
    "\1\235\1\3\12\0\12\3\15\0\1\236\15\0\1\220"+
    "\1\222\44\0\2\3\3\0\1\222\2\0\10\3\1\0"+
    "\3\3\1\237\10\3\12\0\12\3\10\0\2\3\3\0"+
    "\1\220\2\0\10\3\1\0\2\3\1\240\11\3\12\0"+
    "\12\3\15\0\1\241\17\0\1\226\5\0\1\217\35\0"+
    "\2\3\3\0\1\217\2\0\10\3\1\0\12\3\1\242"+
    "\1\3\12\0\12\3\10\0\2\3\3\0\1\226\2\0"+
    "\10\3\1\0\4\3\1\243\7\3\12\0\12\3\10\0"+
    "\2\3\3\0\1\215\2\0\3\3\1\244\4\3\1\0"+
    "\14\3\12\0\1\3\1\244\10\3\10\0\2\3\3\0"+
    "\1\214\2\0\10\3\1\0\2\3\1\245\11\3\12\0"+
    "\12\3\15\0\1\246\2\0\1\247\1\250\1\0\1\251"+
    "\7\0\1\252\1\253\1\0\1\254\1\0\1\250\3\0"+
    "\1\255\13\0\1\251\1\256\1\247\3\0\1\257\17\0"+
    "\1\260\15\0\1\252\25\0\1\256\24\0\1\261\5\0"+
    "\1\251\20\0\1\262\13\0\1\251\25\0\1\263\2\0"+
    "\1\247\41\0\1\247\3\0\1\257\17\0\1\264\16\0"+
    "\1\253\1\0\1\254\47\0\1\265\3\0\1\250\16\0"+
    "\1\250\3\0\1\266\41\0\1\262\26\0\1\262\41\0"+
    "\1\256\43\0\1\256\24\0\1\250\3\0\1\250\16\0"+
    "\1\250\45\0\1\266\26\0\1\266\41\0\1\251\5\0"+
    "\1\251\34\0\1\251\25\0\1\252\15\0\1\252\52\0"+
    "\1\247\2\0\1\247\41\0\1\247\23\0\1\257\50\0"+
    "\1\257\17\0\1\254\20\0\1\254\47\0\1\267\5\0"+
    "\1\251\34\0\1\251\1\256\24\0\1\253\16\0\1\253"+
    "\51\0\1\270\15\0\1\252\10\0\1\266\41\0\1\271"+
    "\5\0\1\251\10\0\1\253\23\0\1\251\34\0\1\272"+
    "\54\0\2\3\3\0\1\252\2\0\10\3\1\0\2\3"+
    "\1\273\11\3\12\0\12\3\10\0\2\3\3\0\1\257"+
    "\2\0\10\3\1\0\14\3\12\0\7\3\1\274\2\3"+
    "\10\0\2\3\3\0\1\254\2\0\10\3\1\0\5\3"+
    "\1\275\6\3\12\0\12\3\10\0\2\3\3\0\1\250"+
    "\2\0\1\3\1\276\6\3\1\0\7\3\1\276\4\3"+
    "\12\0\12\3\15\0\1\277\2\0\1\247\2\0\1\251"+
    "\34\0\1\251\1\0\1\247\16\0\2\3\3\0\1\247"+
    "\2\0\1\300\7\3\1\0\14\3\12\0\3\3\1\300"+
    "\6\3\10\0\2\3\3\0\1\251\2\0\3\3\1\301"+
    "\4\3\1\0\14\3\12\0\1\3\1\301\10\3\15\0"+
    "\1\302\16\0\1\253\7\0\1\266\34\0\2\3\3\0"+
    "\1\266\2\0\10\3\1\0\13\3\1\303\12\0\12\3"+
    "\10\0\2\3\3\0\1\253\2\0\10\3\1\0\3\3"+
    "\1\304\10\3\12\0\12\3\10\0\2\3\3\0\1\256"+
    "\2\0\10\3\1\0\14\3\12\0\2\3\1\305\7\3"+
    "\10\0\2\3\3\0\1\262\2\0\10\3\1\0\13\3"+
    "\1\306\12\0\12\3\15\0\1\307\3\0\1\310\1\0"+
    "\1\311\5\0\1\312\1\0\1\313\4\0\1\310\3\0"+
    "\1\314\13\0\1\311\6\0\1\315\1\316\15\0\1\311"+
    "\5\0\1\311\34\0\1\311\25\0\1\315\51\0\1\315"+
    "\1\316\15\0\1\317\15\0\1\317\52\0\1\320\26\0"+
    "\1\320\41\0\1\321\15\0\1\321\52\0\1\312\13\0"+
    "\1\312\54\0\1\322\26\0\1\322\41\0\1\310\3\0"+
    "\1\310\16\0\1\310\45\0\1\314\26\0\1\314\41\0"+
    "\1\323\13\0\1\312\1\0\1\317\52\0\1\324\3\0"+
    "\1\310\1\0\1\311\14\0\1\310\17\0\1\311\25\0"+
    "\1\325\15\0\1\317\10\0\1\322\41\0\1\313\15\0"+
    "\1\313\62\0\1\326\53\0\2\3\3\0\1\320\2\0"+
    "\10\3\1\0\13\3\1\327\12\0\12\3\10\0\2\3"+
    "\3\0\1\310\2\0\1\3\1\330\6\3\1\0\7\3"+
    "\1\330\4\3\12\0\12\3\10\0\2\3\3\0\1\315"+
    "\2\0\10\3\1\0\14\3\12\0\10\3\1\331\1\332"+
    "\15\0\1\333\5\0\1\311\7\0\1\317\24\0\1\311"+
    "\20\0\2\3\3\0\1\311\2\0\3\3\1\334\4\3"+
    "\1\0\14\3\12\0\1\3\1\334\10\3\10\0\2\3"+
    "\3\0\1\317\2\0\10\3\1\0\2\3\1\335\11\3"+
    "\12\0\12\3\10\0\2\3\3\0\1\321\2\0\10\3"+
    "\1\0\2\3\1\336\11\3\12\0\12\3\10\0\2\3"+
    "\3\0\1\322\2\0\10\3\1\0\13\3\1\337\12\0"+
    "\12\3\10\0\2\3\3\0\1\312\2\0\10\3\1\0"+
    "\1\340\13\3\12\0\12\3\15\0\1\341\15\0\1\342"+
    "\2\0\1\343\3\0\1\344\1\345\1\346\12\0\1\347"+
    "\26\0\1\350\24\0\1\344\1\345\13\0\1\347\26\0"+
    "\1\351\15\0\1\342\2\0\1\352\47\0\1\353\20\0"+
    "\1\354\5\0\1\346\41\0\1\342\15\0\1\342\52\0"+
    "\1\352\20\0\1\352\47\0\1\355\15\0\1\342\2\0"+
    "\1\354\5\0\1\346\52\0\1\356\57\0\1\357\15\0"+
    "\1\342\6\0\1\344\1\345\13\0\1\347\21\0\2\3"+
    "\3\0\1\350\2\0\10\3\1\0\11\3\1\360\1\361"+
    "\1\3\12\0\1\362\11\3\10\0\2\3\3\0\1\342"+
    "\2\0\10\3\1\0\2\3\1\363\11\3\12\0\12\3"+
    "\10\0\2\3\3\0\1\352\2\0\10\3\1\0\5\3"+
    "\1\364\6\3\12\0\12\3\10\0\2\3\3\0\1\353"+
    "\2\0\10\3\1\0\5\3\1\365\5\3\1\366\12\0"+
    "\12\3\15\0\1\367\5\0\1\370\5\0\1\371\2\0"+
    "\1\372\6\0\1\373\1\374\13\0\1\370\25\0\1\375"+
    "\26\0\1\375\41\0\1\376\25\0\1\373\1\377\41\0"+
    "\1\370\5\0\1\370\34\0\1\370\25\0\1\u0100\16\0"+
    "\1\u0100\51\0\1\371\13\0\1\371\54\0\1\u0101\16\0"+
    "\1\u0101\51\0\1\u0102\5\0\1\370\10\0\1\372\23\0"+
    "\1\370\25\0\1\u0103\25\0\1\373\1\375\41\0\1\373"+
    "\25\0\1\373\42\0\1\u0104\13\0\1\371\12\0\1\377"+
    "\41\0\1\377\26\0\1\377\41\0\1\u0105\13\0\1\371"+
    "\12\0\1\374\53\0\1\u0106\56\0\1\u0107\5\0\1\370"+
    "\10\0\1\372\7\0\1\375\13\0\1\370\20\0\2\3"+
    "\3\0\1\370\2\0\3\3\1\u0108\4\3\1\0\14\3"+
    "\12\0\1\3\1\u0108\10\3\10\0\2\3\3\0\1\u0100"+
    "\2\0\10\3\1\0\3\3\1\u0109\10\3\12\0\12\3"+
    "\10\0\2\3\3\0\1\u0101\2\0\10\3\1\0\3\3"+
    "\1\u010a\10\3\12\0\12\3\10\0\2\3\3\0\1\375"+
    "\2\0\10\3\1\0\13\3\1\u010b\12\0\12\3\10\0"+
    "\2\3\3\0\1\373\2\0\10\3\1\0\12\3\1\u010c"+
    "\1\3\12\0\12\3\10\0\2\3\3\0\1\377\2\0"+
    "\10\3\1\0\13\3\1\u010d\12\0\12\3\10\0\2\3"+
    "\3\0\1\371\2\0\10\3\1\0\1\u010e\13\3\12\0"+
    "\12\3\15\0\1\u010f\3\0\1\u0110\11\0\1\u0111\1\0"+
    "\1\u0112\2\0\1\u0110\3\0\1\u0113\12\0\1\u0114\26\0"+
    "\1\u0111\15\0\1\u0111\52\0\1\u0115\41\0\1\u0115\26\0"+
    "\1\u0116\17\0\1\u0117\6\0\1\u0113\41\0\1\u0110\3\0"+
    "\1\u0110\16\0\1\u0110\45\0\1\u0118\17\0\1\u0119\21\0"+
    "\1\u011a\26\0\1\u011a\41\0\1\u011a\26\0\1\u011b\3\0"+
    "\1\u0110\13\0\1\u0119\2\0\1\u0110\45\0\1\u0119\17\0"+
    "\1\u0119\50\0\1\u0117\17\0\1\u0117\50\0\1\u0113\26\0"+
    "\1\u0113\41\0\1\u011c\15\0\1\u0111\1\0\1\u0117\6\0"+
    "\1\u0113\41\0\1\u011d\3\0\1\u0110\16\0\1\u0110\16\0"+
    "\1\u011a\26\0\1\u011e\17\0\1\u0119\21\0\1\u0115\26\0"+
    "\1\u011f\17\0\1\u0119\21\0\1\u0114\41\0\1\u0120\55\0"+
    "\1\u0121\15\0\1\u0111\1\0\1\u0117\6\0\1\u0113\12\0"+
    "\1\u011a\21\0\2\3\3\0\1\u0111\2\0\10\3\1\0"+
    "\2\3\1\u0122\11\3\12\0\12\3\10\0\2\3\3\0"+
    "\1\u0117\2\0\10\3\1\0\4\3\1\u0123\7\3\12\0"+
    "\12\3\10\0\2\3\3\0\1\u0113\2\0\10\3\1\0"+
    "\13\3\1\u0124\12\0\12\3\10\0\2\3\3\0\1\u011a"+
    "\2\0\10\3\1\0\14\3\12\0\1\u0125\11\3\10\0"+
    "\2\3\3\0\1\u0110\2\0\1\3\1\u0126\6\3\1\0"+
    "\7\3\1\u0126\4\3\12\0\12\3\10\0\2\3\3\0"+
    "\1\u0119\2\0\10\3\1\0\4\3\1\u0127\7\3\12\0"+
    "\12\3\10\0\2\3\3\0\1\u0115\2\0\10\3\1\0"+
    "\14\3\12\0\1\u0128\11\3\15\0\1\u0129\3\0\1\u012a"+
    "\11\0\1\u012b\4\0\1\u012a\1\0\1\u012c\1\0\1\u012d"+
    "\41\0\1\u012c\24\0\1\u012c\43\0\1\u012b\15\0\1\u012b"+
    "\52\0\1\u012e\26\0\1\u012e\41\0\1\u012f\3\0\1\u012a"+
    "\16\0\1\u012a\3\0\1\u0130\41\0\1\u0130\26\0\1\u0130"+
    "\41\0\1\u0131\26\0\1\u0131\41\0\1\u0132\3\0\1\u012a"+
    "\16\0\1\u012a\3\0\1\u0133\41\0\1\u0133\26\0\1\u0133"+
    "\41\0\1\u012a\3\0\1\u012a\16\0\1\u012a\45\0\1\u0134"+
    "\24\0\1\u012c\1\0\1\u0133\41\0\1\u012b\15\0\1\u012b"+
    "\10\0\1\u0131\41\0\1\u0135\3\0\1\u012a\16\0\1\u012a"+
    "\1\0\1\u012c\43\0\1\u0136\26\0\1\u0136\41\0\1\u0137"+
    "\3\0\1\u012a\16\0\1\u012a\3\0\1\u0136\41\0\1\u0138"+
    "\3\0\1\u012a\11\0\1\u012b\4\0\1\u012a\3\0\1\u0131"+
    "\34\0\2\3\3\0\1\u012b\2\0\10\3\1\0\2\3"+
    "\1\u0139\11\3\12\0\12\3\10\0\2\3\3\0\1\u0131"+
    "\2\0\10\3\1\0\13\3\1\u013a\12\0\12\3\10\0"+
    "\2\3\3\0\1\u012a\2\0\1\3\1\u013b\6\3\1\0"+
    "\7\3\1\u013b\4\3\12\0\12\3\10\0\2\3\3\0"+
    "\1\u012c\2\0\10\3\1\0\11\3\1\u013c\2\3\12\0"+
    "\12\3\10\0\2\3\3\0\1\u0133\2\0\10\3\1\0"+
    "\13\3\1\u013d\12\0\12\3\10\0\2\3\3\0\1\u0130"+
    "\2\0\10\3\1\0\13\3\1\u013e\12\0\12\3\15\0"+
    "\1\u013f\2\0\1\u0140\2\0\1\u0141\7\0\1\u0142\24\0"+
    "\1\u0141\1\0\1\u0140\23\0\1\u0143\15\0\1\u0143\52\0"+
    "\1\u0144\5\0\1\u0144\34\0\1\u0144\25\0\1\u0145\5\0"+
    "\1\u0145\34\0\1\u0145\25\0\1\u0146\2\0\1\u0140\2\0"+
    "\1\u0147\7\0\1\u0148\24\0\1\u0147\1\0\1\u0140\23\0"+
    "\1\u0149\5\0\1\u0147\7\0\1\u0148\24\0\1\u0147\25\0"+
    "\1\u014a\2\0\1\u0140\12\0\1\u0143\26\0\1\u0140\23\0"+
    "\1\u0140\2\0\1\u0140\41\0\1\u0140\23\0\1\u0147\5\0"+
    "\1\u0147\34\0\1\u0147\25\0\1\u0142\15\0\1\u0142\52\0"+
    "\1\u0148\15\0\1\u0148\52\0\1\u014b\5\0\1\u0145\7\0"+
    "\1\u0148\24\0\1\u0145\25\0\1\u014c\5\0\1\u0145\7\0"+
    "\1\u0143\24\0\1\u0145\25\0\1\u014d\2\0\1\u0140\12\0"+
    "\1\u0148\26\0\1\u0140\23\0\1\u014e\2\0\1\u0140\12\0"+
    "\1\u0142\26\0\1\u0140\23\0\1\u014f\5\0\1\u0144\7\0"+
    "\1\u0143\24\0\1\u0144\20\0\2\3\3\0\1\u0144\2\0"+
    "\3\3\1\u0150\4\3\1\0\14\3\12\0\1\3\1\u0150"+
    "\10\3\10\0\2\3\3\0\1\u0147\2\0\3\3\1\u0151"+
    "\4\3\1\0\14\3\12\0\1\3\1\u0151\10\3\10\0"+
    "\2\3\3\0\1\u0143\2\0\10\3\1\0\2\3\1\u0152"+
    "\11\3\12\0\12\3\10\0\2\3\3\0\1\u0145\2\0"+
    "\3\3\1\u0153\4\3\1\0\14\3\12\0\1\3\1\u0153"+
    "\10\3\10\0\2\3\3\0\1\u0148\2\0\10\3\1\0"+
    "\2\3\1\u0154\11\3\12\0\12\3\10\0\2\3\3\0"+
    "\1\u0140\2\0\1\u0155\7\3\1\0\14\3\12\0\3\3"+
    "\1\u0155\6\3\15\0\1\u0156\5\0\1\u0157\5\0\1\u0158"+
    "\1\u0159\1\0\1\u015a\6\0\1\u015b\14\0\1\u0157\25\0"+
    "\1\u015a\16\0\1\u015a\51\0\1\u015c\13\0\1\u0158\11\0"+
    "\1\u015b\42\0\1\u015d\5\0\1\u0157\6\0\1\u0159\25\0"+
    "\1\u0157\25\0\1\u0159\14\0\1\u0159\53\0\1\u0158\13\0"+
    "\1\u0158\54\0\1\u015b\25\0\1\u015b\42\0\1\u015e\5\0"+
    "\1\u0157\5\0\1\u015f\2\0\1\u015a\23\0\1\u0157\25\0"+
    "\1\u015f\13\0\1\u015f\54\0\1\u0157\5\0\1\u0157\34\0"+
    "\1\u0157\25\0\1\u0160\5\0\1\u0157\5\0\1\u015f\26\0"+
    "\1\u0157\25\0\1\u0161\14\0\1\u0159\1\0\1\u015a\51\0"+
    "\1\u0162\5\0\1\u0157\17\0\1\u015b\14\0\1\u0157\25\0"+
    "\1\u0163\14\0\1\u0159\10\0\1\u015b\42\0\1\u0164\5\0"+
    "\1\u0157\10\0\1\u015a\23\0\1\u0157\25\0\1\u0165\5\0"+
    "\1\u0157\6\0\1\u0159\1\0\1\u015a\23\0\1\u0157\25\0"+
    "\1\u0166\13\0\1\u0158\1\u0159\46\0\2\3\3\0\1\u0158"+
    "\2\0\10\3\1\0\1\u0167\13\3\12\0\12\3\10\0"+
    "\2\3\3\0\1\u015f\2\0\10\3\1\0\1\u0168\13\3"+
    "\12\0\12\3\10\0\2\3\3\0\1\u0159\2\0\10\3"+
    "\1\0\1\3\1\u0169\12\3\12\0\12\3\10\0\2\3"+
    "\3\0\1\u015b\2\0\10\3\1\0\12\3\1\u016a\1\3"+
    "\12\0\12\3\10\0\2\3\3\0\1\u0157\2\0\3\3"+
    "\1\u016b\4\3\1\0\14\3\12\0\1\3\1\u016b\10\3"+
    "\10\0\2\3\3\0\1\u015a\2\0\10\3\1\0\3\3"+
    "\1\u016c\10\3\12\0\12\3\15\0\1\u016d\25\0\1\u016e"+
    "\1\u016f\16\0\1\u0170\22\0\1\u016e\25\0\1\u016e\42\0"+
    "\1\u0171\26\0\1\u0171\41\0\1\u0170\45\0\1\u0170\22\0"+
    "\1\u0172\26\0\1\u0172\41\0\1\u0173\25\0\1\u016e\1\u0171"+
    "\41\0\1\u0174\25\0\1\u016e\17\0\1\u0170\22\0\1\u0175"+
    "\26\0\1\u0171\16\0\1\u0170\22\0\1\u0176\25\0\1\u016e"+
    "\1\u0172\41\0\1\u016f\26\0\1\u016f\41\0\1\u0177\25\0"+
    "\1\u016e\1\u0171\16\0\1\u0170\15\0\2\3\3\0\1\u0171"+
    "\2\0\10\3\1\0\13\3\1\u0178\12\0\12\3\10\0"+
    "\2\3\3\0\1\u0172\2\0\10\3\1\0\13\3\1\u0179"+
    "\12\0\12\3\10\0\2\3\3\0\1\u016e\2\0\10\3"+
    "\1\0\12\3\1\u017a\1\3\12\0\12\3\10\0\2\3"+
    "\3\0\1\u0170\2\0\10\3\1\0\14\3\12\0\4\3"+
    "\1\u017b\5\3\15\0\1\u017c\13\0\1\u017d\2\0\1\u017e"+
    "\7\0\1\u017f\41\0\1\u0180\13\0\1\u017d\12\0\1\u017f"+
    "\41\0\1\u017e\16\0\1\u017e\51\0\1\u017f\26\0\1\u017f"+
    "\41\0\1\u017d\13\0\1\u017d\54\0\1\u0181\16\0\1\u017e"+
    "\7\0\1\u017f\34\0\2\3\3\0\1\u017f\2\0\10\3"+
    "\1\0\13\3\1\u0182\12\0\12\3\10\0\2\3\3\0"+
    "\1\u017d\2\0\10\3\1\0\1\u0183\13\3\12\0\12\3"+
    "\10\0\2\3\3\0\1\u017e\2\0\10\3\1\0\3\3"+
    "\1\u0184\10\3\12\0\12\3\15\0\1\u0185\2\0\1\u0186"+
    "\10\0\1\u0187\30\0\1\u0186\23\0\1\u0186\2\0\1\u0186"+
    "\41\0\1\u0186\23\0\1\u0187\13\0\1\u0187\47\0\2\3"+
    "\3\0\1\u0187\2\0\10\3\1\0\1\u0188\13\3\12\0"+
    "\12\3\10\0\2\3\3\0\1\u0186\2\0\1\u0189\7\3"+
    "\1\0\14\3\12\0\3\3\1\u0189\6\3\15\0\1\u018a"+
    "\3\0\1\u018b\10\0\1\u018c\5\0\1\u018b\45\0\1\u018b"+
    "\3\0\1\u018b\16\0\1\u018b\45\0\1\u018c\14\0\1\u018c"+
    "\46\0\2\3\3\0\1\u018c\2\0\10\3\1\0\1\3"+
    "\1\u018d\12\3\12\0\12\3\10\0\2\3\3\0\1\u018b"+
    "\2\0\1\3\1\u018e\6\3\1\0\7\3\1\u018e\4\3"+
    "\12\0\12\3\15\0\1\u018f\5\0\1\u018f\34\0\1\u018f"+
    "\20\0\2\3\3\0\1\u018f\2\0\3\3\1\u0190\4\3"+
    "\1\0\14\3\12\0\1\3\1\u0190\10\3\15\0\1\u0191"+
    "\21\0\1\u0191\41\0\2\3\3\0\1\u0191\2\0\10\3"+
    "\1\0\6\3\1\u0192\5\3\12\0\12\3\15\0\1\u0193"+
    "\16\0\1\u0193\44\0\2\3\3\0\1\u0193\2\0\10\3"+
    "\1\0\3\3\1\u0194\10\3\12\0\12\3\15\0\1\u0195"+
    "\13\0\1\u0195\47\0\2\3\3\0\1\u0195\2\0\10\3"+
    "\1\0\1\u0196\13\3\12\0\12\3\15\0\1\u0197\14\0"+
    "\1\u0197\46\0\2\3\3\0\1\u0197\2\0\10\3\1\0"+
    "\1\3\1\u0198\12\3\12\0\12\3\15\0\1\u0199\16\0"+
    "\1\u0199\44\0\2\3\3\0\1\u0199\2\0\10\3\1\0"+
    "\3\3\1\u019a\10\3\12\0\12\3\15\0\1\u019b\2\0"+
    "\1\u019b\41\0\1\u019b\16\0\2\3\3\0\1\u019b\2\0"+
    "\1\u019c\7\3\1\0\14\3\12\0\3\3\1\u019c\6\3"+
    "\15\0\1\u019d\3\0\1\u019d\16\0\1\u019d\40\0\2\3"+
    "\3\0\1\u019d\2\0\1\3\1\u019e\6\3\1\0\7\3"+
    "\1\u019e\4\3\12\0\12\3\7\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[19437];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\5\1\1\11\10\1\12\11\6\1\2\0"+
    "\1\1\14\0\1\1\1\0\3\1\1\0\2\1\1\0"+
    "\5\1\1\0\1\11\1\0\1\1\1\0\1\11\1\0"+
    "\2\1\22\0\4\1\1\0\2\1\1\0\5\1\1\11"+
    "\1\1\11\0\1\11\7\0\4\1\1\0\2\1\1\0"+
    "\5\1\24\0\4\1\1\0\2\1\1\0\5\1\1\0"+
    "\1\1\3\0\1\11\1\1\6\0\2\1\1\11\1\0"+
    "\1\1\2\0\4\1\1\0\10\1\1\11\1\0\1\11"+
    "\1\0\1\1\2\11\1\0\1\11\2\0\2\1\2\0"+
    "\4\1\1\0\5\1\17\0\7\1\21\0\10\1\3\0"+
    "\1\11\2\0\1\1\5\0\1\1\3\0\1\11\10\1"+
    "\20\0\6\1\21\0\7\1\1\0\1\11\3\0\1\1"+
    "\1\0\1\1\1\11\1\1\5\0\10\1\1\11\4\0"+
    "\2\1\1\0\7\1\1\11\2\0\1\1\1\0\3\1"+
    "\3\0\3\1\1\11\1\0\2\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\11\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[414];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    public String lexeme;


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 208) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Tokens yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 25: 
          { lexeme=yytext(); return TituloX;
          }
        case 35: break;
        case 12: 
          { lexeme=yytext(); return PuntoComa;
          }
        case 36: break;
        case 21: 
          { lexeme=yytext(); return DOUBLE;
          }
        case 37: break;
        case 29: 
          { lexeme=yytext(); return GraficaBarras;
          }
        case 38: break;
        case 22: 
          { lexeme=yytext(); return Compare;
          }
        case 39: break;
        case 33: 
          { lexeme=yytext(); return PuntajeEspecifico;
          }
        case 40: break;
        case 16: 
          { lexeme=yytext(); return Cadena;
          }
        case 41: break;
        case 4: 
          { return Linea;
          }
        case 42: break;
        case 13: 
          { lexeme=yytext(); return DosPuntos;
          }
        case 43: break;
        case 9: 
          { lexeme=yytext(); return LlaveFinal;
          }
        case 44: break;
        case 26: 
          { lexeme=yytext(); return TituloY;
          }
        case 45: break;
        case 10: 
          { lexeme = yytext(); return CorcheteInicio;
          }
        case 46: break;
        case 7: 
          { lexeme=yytext(); return ParentesisFinal;
          }
        case 47: break;
        case 32: 
          { lexeme=yytext(); return DefinirGlobales;
          }
        case 48: break;
        case 24: 
          { lexeme=yytext(); return Valores;
          }
        case 49: break;
        case 17: 
          { lexeme=yytext(); return Decimal;
          }
        case 50: break;
        case 18: 
          { lexeme=yytext(); return EjeX;
          }
        case 51: break;
        case 15: 
          { lexeme=yytext(); return Ruta;
          }
        case 52: break;
        case 23: 
          { lexeme=yytext(); return Archivo;
          }
        case 53: break;
        case 6: 
          { lexeme=yytext(); return ParentesisInicio;
          }
        case 54: break;
        case 14: 
          { lexeme=yytext(); return Dollar;
          }
        case 55: break;
        case 5: 
          { lexeme=yytext(); return Igual;
          }
        case 56: break;
        case 30: 
          { lexeme=yytext(); return GraficaLineas;
          }
        case 57: break;
        case 20: 
          { lexeme=yytext(); return Titulo;
          }
        case 58: break;
        case 34: 
          { lexeme=yytext(); return GenerarReporteEstadistico;
          }
        case 59: break;
        case 31: 
          { lexeme=yytext(); return PuntajeGeneral;
          }
        case 60: break;
        case 2: 
          { lexeme=yytext(); return Identificador;
          }
        case 61: break;
        case 8: 
          { lexeme=yytext(); return LlaveInicio;
          }
        case 62: break;
        case 19: 
          { lexeme=yytext(); return STRING;
          }
        case 63: break;
        case 1: 
          { return ERROR;
          }
        case 64: break;
        case 3: 
          { /*Ignore*/
          }
        case 65: break;
        case 28: 
          { lexeme=","; return Coma;
          }
        case 66: break;
        case 11: 
          { lexeme = yytext(); return CorcheteFinal;
          }
        case 67: break;
        case 27: 
          { lexeme=yytext(); return GraficaPie;
          }
        case 68: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
