
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.proyecto1.compiler.analyzer.javascript;

import java_cup.runtime.Symbol;
import java.util.ArrayList;
import com.proyecto1.controller.ProyectoController;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Sintax extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\240\000\002\002\004\000\002\002\004\000\002\002" +
    "\004\000\002\002\003\000\002\002\003\000\002\003\003" +
    "\000\002\003\003\000\002\004\003\000\002\004\004\000" +
    "\002\005\007\000\002\005\006\000\002\006\003\000\002" +
    "\006\003\000\002\006\003\000\002\006\003\000\002\006" +
    "\003\000\002\007\003\000\002\007\003\000\002\007\003" +
    "\000\002\007\003\000\002\007\003\000\002\010\003\000" +
    "\002\010\003\000\002\010\003\000\002\010\003\000\002" +
    "\023\006\000\002\023\005\000\002\023\006\000\002\024" +
    "\006\000\002\024\005\000\002\024\006\000\002\025\006" +
    "\000\002\025\005\000\002\026\006\000\002\026\006\000" +
    "\002\027\006\000\002\027\006\000\002\030\003\000\002" +
    "\030\004\000\002\051\002\000\002\012\007\000\002\013" +
    "\004\000\002\013\004\000\002\013\004\000\002\013\004" +
    "\000\002\013\004\000\002\013\004\000\002\013\004\000" +
    "\002\013\004\000\002\013\004\000\002\013\004\000\002" +
    "\013\004\000\002\013\004\000\002\013\004\000\002\013" +
    "\003\000\002\050\007\000\002\052\002\000\002\014\006" +
    "\000\002\053\002\000\002\014\005\000\002\014\005\000" +
    "\002\014\004\000\002\014\003\000\002\054\002\000\002" +
    "\015\010\000\002\016\005\000\002\016\006\000\002\022" +
    "\004\000\002\022\004\000\002\022\004\000\002\022\004" +
    "\000\002\022\004\000\002\022\004\000\002\022\004\000" +
    "\002\022\004\000\002\022\004\000\002\022\004\000\002" +
    "\022\003\000\002\017\005\000\002\017\005\000\002\017" +
    "\007\000\002\017\003\000\002\017\003\000\002\020\005" +
    "\000\002\020\003\000\002\021\007\000\002\021\005\000" +
    "\002\021\005\000\002\021\004\000\002\021\003\000\002" +
    "\031\010\000\002\032\004\000\002\032\004\000\002\032" +
    "\004\000\002\032\004\000\002\032\004\000\002\032\004" +
    "\000\002\032\004\000\002\032\004\000\002\032\004\000" +
    "\002\032\004\000\002\032\004\000\002\032\004\000\002" +
    "\032\003\000\002\033\005\000\002\034\004\000\002\034" +
    "\004\000\002\034\004\000\002\034\004\000\002\034\004" +
    "\000\002\034\004\000\002\034\004\000\002\034\004\000" +
    "\002\034\004\000\002\034\004\000\002\034\003\000\002" +
    "\035\011\000\002\036\015\000\002\040\010\000\002\047" +
    "\011\000\002\047\012\000\002\037\004\000\002\037\004" +
    "\000\002\037\004\000\002\037\004\000\002\037\004\000" +
    "\002\037\004\000\002\037\004\000\002\037\004\000\002" +
    "\037\004\000\002\037\004\000\002\037\003\000\002\041" +
    "\010\000\002\046\004\000\002\046\004\000\002\046\004" +
    "\000\002\046\003\000\002\042\006\000\002\043\005\000" +
    "\002\044\004\000\002\044\004\000\002\044\004\000\002" +
    "\044\004\000\002\044\004\000\002\044\004\000\002\044" +
    "\004\000\002\044\004\000\002\044\004\000\002\044\004" +
    "\000\002\044\003\000\002\045\004\000\002\045\004\000" +
    "\002\045\004\000\002\045\004\000\002\045\004\000\002" +
    "\045\004\000\002\045\004\000\002\045\004\000\002\045" +
    "\004\000\002\045\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u014a\000\010\021\006\054\004\055\011\001\002\000" +
    "\050\002\ufffc\011\ufffc\021\ufffc\023\ufffc\024\ufffc\025\ufffc" +
    "\026\ufffc\030\ufffc\031\ufffc\032\ufffc\033\ufffc\034\ufffc\035" +
    "\ufffc\036\ufffc\037\ufffc\040\ufffc\053\ufffc\054\ufffc\055\ufffc" +
    "\001\002\000\012\002\ufffe\021\006\054\004\055\011\001" +
    "\002\000\004\053\014\001\002\000\012\002\ufffd\021\006" +
    "\054\004\055\011\001\002\000\004\002\012\001\002\000" +
    "\050\002\ufffb\011\ufffb\021\ufffb\023\ufffb\024\ufffb\025\ufffb" +
    "\026\ufffb\030\ufffb\031\ufffb\032\ufffb\033\ufffb\034\ufffb\035" +
    "\ufffb\036\ufffb\037\ufffb\040\ufffb\053\ufffb\054\ufffb\055\ufffb" +
    "\001\002\000\004\002\001\001\002\000\004\002\uffff\001" +
    "\002\000\004\010\015\001\002\000\040\011\uffda\023\uffda" +
    "\024\uffda\025\uffda\026\uffda\030\uffda\031\uffda\032\uffda\033" +
    "\uffda\036\uffda\037\uffda\040\uffda\053\uffda\054\uffda\055\uffda" +
    "\001\002\000\040\011\020\023\022\024\051\025\032\026" +
    "\041\030\021\031\044\032\050\033\043\036\031\037\025" +
    "\040\045\053\027\054\004\055\011\001\002\000\012\002" +
    "\uffd9\021\uffd9\054\uffd9\055\uffd9\001\002\000\044\002\uffcb" +
    "\011\uffcb\021\uffcb\023\uffcb\024\uffcb\025\uffcb\026\uffcb\030" +
    "\uffcb\031\uffcb\032\uffcb\033\uffcb\036\uffcb\037\uffcb\040\uffcb" +
    "\053\uffcb\054\uffcb\055\uffcb\001\002\000\004\006\u013b\001" +
    "\002\000\004\053\u0137\001\002\000\040\011\020\023\022" +
    "\024\051\025\032\026\041\030\021\031\044\032\050\033" +
    "\043\036\031\037\025\040\045\053\027\054\004\055\011" +
    "\001\002\000\040\011\020\023\022\024\051\025\032\026" +
    "\041\030\021\031\044\032\050\033\043\036\031\037\025" +
    "\040\045\053\027\054\004\055\011\001\002\000\004\012" +
    "\u0134\001\002\000\040\011\020\023\022\024\051\025\032" +
    "\026\041\030\021\031\044\032\050\033\043\036\031\037" +
    "\025\040\045\053\027\054\004\055\011\001\002\000\006" +
    "\005\u0118\006\u0117\001\002\000\040\011\020\023\022\024" +
    "\051\025\032\026\041\030\021\031\044\032\050\033\043" +
    "\036\031\037\025\040\045\053\027\054\004\055\011\001" +
    "\002\000\004\006\u0112\001\002\000\004\053\u010e\001\002" +
    "\000\040\011\020\023\022\024\051\025\032\026\041\030" +
    "\021\031\044\032\050\033\043\036\031\037\025\040\045" +
    "\053\027\054\004\055\011\001\002\000\040\011\020\023" +
    "\022\024\051\025\032\026\041\030\021\031\044\032\050" +
    "\033\043\036\031\037\025\040\045\053\027\054\004\055" +
    "\011\001\002\000\040\011\020\023\022\024\051\025\032" +
    "\026\041\030\021\031\044\032\050\033\043\036\031\037" +
    "\025\040\045\053\027\054\004\055\011\001\002\000\040" +
    "\011\020\023\022\024\051\025\032\026\041\030\021\031" +
    "\044\032\050\033\043\036\031\037\025\040\045\053\027" +
    "\054\004\055\011\001\002\000\040\011\020\023\022\024" +
    "\051\025\032\026\041\030\021\031\044\032\050\033\043" +
    "\036\031\037\025\040\045\053\027\054\004\055\011\001" +
    "\002\000\040\011\020\023\022\024\051\025\032\026\041" +
    "\030\021\031\044\032\050\033\043\036\031\037\025\040" +
    "\045\053\027\054\004\055\011\001\002\000\004\006\316" +
    "\001\002\000\040\011\020\023\022\024\051\025\032\026" +
    "\041\030\021\031\044\032\050\033\043\036\031\037\025" +
    "\040\045\053\027\054\004\055\011\001\002\000\004\006" +
    "\222\001\002\000\004\010\213\001\002\000\044\011\ufffa" +
    "\023\ufffa\024\ufffa\025\ufffa\026\ufffa\030\ufffa\031\ufffa\032" +
    "\ufffa\033\ufffa\034\ufffa\035\ufffa\036\ufffa\037\ufffa\040\ufffa" +
    "\053\ufffa\054\ufffa\055\ufffa\001\002\000\040\011\020\023" +
    "\022\024\051\025\032\026\041\030\021\031\044\032\050" +
    "\033\043\036\031\037\025\040\045\053\027\054\004\055" +
    "\011\001\002\000\040\011\020\023\022\024\051\025\032" +
    "\026\041\030\021\031\044\032\050\033\043\036\031\037" +
    "\025\040\045\053\027\054\004\055\011\001\002\000\004" +
    "\006\110\001\002\000\004\053\052\001\002\000\004\005" +
    "\053\001\002\000\032\006\057\041\074\042\056\043\064" +
    "\044\065\045\073\046\054\047\071\050\061\051\070\052" +
    "\060\053\067\001\002\000\054\007\ufff4\011\ufff4\012\ufff4" +
    "\015\ufff4\016\ufff4\020\ufff4\023\ufff4\024\ufff4\025\ufff4\026" +
    "\ufff4\030\ufff4\031\ufff4\032\ufff4\033\ufff4\034\ufff4\036\ufff4" +
    "\037\ufff4\040\ufff4\053\ufff4\054\ufff4\055\ufff4\001\002\000" +
    "\046\007\uffaf\011\uffaf\012\uffaf\023\uffaf\024\uffaf\025\uffaf" +
    "\026\uffaf\030\uffaf\031\uffaf\032\uffaf\033\uffaf\034\uffaf\036" +
    "\uffaf\037\uffaf\040\uffaf\053\uffaf\054\uffaf\055\uffaf\001\002" +
    "\000\054\007\ufff6\011\ufff6\012\ufff6\015\ufff6\016\ufff6\020" +
    "\ufff6\023\ufff6\024\ufff6\025\ufff6\026\ufff6\030\ufff6\031\ufff6" +
    "\032\ufff6\033\ufff6\034\ufff6\036\ufff6\037\ufff6\040\ufff6\053" +
    "\ufff6\054\ufff6\055\ufff6\001\002\000\030\006\057\042\056" +
    "\043\064\044\065\045\073\046\054\047\071\050\061\051" +
    "\070\052\060\053\067\001\002\000\046\007\uffed\011\uffed" +
    "\012\uffed\023\uffed\024\uffed\025\uffed\026\uffed\030\uffed\031" +
    "\uffed\032\uffed\033\uffed\034\uffed\036\uffed\037\uffed\040\uffed" +
    "\053\uffed\054\uffed\055\uffed\001\002\000\054\007\ufff3\011" +
    "\ufff3\012\ufff3\015\ufff3\016\ufff3\020\ufff3\023\ufff3\024\ufff3" +
    "\025\ufff3\026\ufff3\030\ufff3\031\ufff3\032\ufff3\033\ufff3\034" +
    "\ufff3\036\ufff3\037\ufff3\040\ufff3\053\ufff3\054\ufff3\055\ufff3" +
    "\001\002\000\044\011\uffdc\012\103\023\uffdc\024\uffdc\025" +
    "\uffdc\026\uffdc\030\uffdc\031\uffdc\032\uffdc\033\uffdc\034\uffdc" +
    "\036\uffdc\037\uffdc\040\uffdc\053\uffdc\054\uffdc\055\uffdc\001" +
    "\002\000\040\011\uffe0\023\uffe0\024\uffe0\025\uffe0\026\uffe0" +
    "\030\uffe0\031\uffe0\032\uffe0\033\uffe0\036\uffe0\037\uffe0\040" +
    "\uffe0\053\uffe0\054\uffe0\055\uffe0\001\002\000\046\007\ufff1" +
    "\011\ufff1\012\ufff1\023\ufff1\024\ufff1\025\ufff1\026\ufff1\030" +
    "\ufff1\031\ufff1\032\ufff1\033\ufff1\034\ufff1\036\ufff1\037\ufff1" +
    "\040\ufff1\053\ufff1\054\ufff1\055\ufff1\001\002\000\054\007" +
    "\ufff5\011\ufff5\012\ufff5\015\ufff5\016\ufff5\020\ufff5\023\ufff5" +
    "\024\ufff5\025\ufff5\026\ufff5\030\ufff5\031\ufff5\032\ufff5\033" +
    "\ufff5\034\ufff5\036\ufff5\037\ufff5\040\ufff5\053\ufff5\054\ufff5" +
    "\055\ufff5\001\002\000\040\011\uffdf\023\uffdf\024\uffdf\025" +
    "\uffdf\026\uffdf\030\uffdf\031\uffdf\032\uffdf\033\uffdf\036\uffdf" +
    "\037\uffdf\040\uffdf\053\uffdf\054\uffdf\055\uffdf\001\002\000" +
    "\054\007\ufff2\011\ufff2\012\ufff2\015\ufff2\016\ufff2\020\ufff2" +
    "\023\ufff2\024\ufff2\025\ufff2\026\ufff2\030\ufff2\031\ufff2\032" +
    "\ufff2\033\ufff2\034\ufff2\036\ufff2\037\ufff2\040\ufff2\053\ufff2" +
    "\054\ufff2\055\ufff2\001\002\000\046\007\uffee\011\uffee\012" +
    "\uffee\023\uffee\024\uffee\025\uffee\026\uffee\030\uffee\031\uffee" +
    "\032\uffee\033\uffee\034\uffee\036\uffee\037\uffee\040\uffee\053" +
    "\uffee\054\uffee\055\uffee\001\002\000\046\007\uffef\011\uffef" +
    "\012\uffef\023\uffef\024\uffef\025\uffef\026\uffef\030\uffef\031" +
    "\uffef\032\uffef\033\uffef\034\uffef\036\uffef\037\uffef\040\uffef" +
    "\053\uffef\054\uffef\055\uffef\001\002\000\050\007\uffb0\011" +
    "\uffb0\012\uffb0\020\101\023\uffb0\024\uffb0\025\uffb0\026\uffb0" +
    "\030\uffb0\031\uffb0\032\uffb0\033\uffb0\034\uffb0\036\uffb0\037" +
    "\uffb0\040\uffb0\053\uffb0\054\uffb0\055\uffb0\001\002\000\046" +
    "\007\ufff0\011\ufff0\012\ufff0\023\ufff0\024\ufff0\025\ufff0\026" +
    "\ufff0\030\ufff0\031\ufff0\032\ufff0\033\ufff0\034\ufff0\036\ufff0" +
    "\037\ufff0\040\ufff0\053\ufff0\054\ufff0\055\ufff0\001\002\000" +
    "\004\006\075\001\002\000\004\050\076\001\002\000\004" +
    "\007\077\001\002\000\044\011\ufff7\012\100\023\ufff7\024" +
    "\ufff7\025\ufff7\026\ufff7\030\ufff7\031\ufff7\032\ufff7\033\ufff7" +
    "\034\ufff7\036\ufff7\037\ufff7\040\ufff7\053\ufff7\054\ufff7\055" +
    "\ufff7\001\002\000\042\011\ufff8\023\ufff8\024\ufff8\025\ufff8" +
    "\026\ufff8\030\ufff8\031\ufff8\032\ufff8\033\ufff8\034\ufff8\036" +
    "\ufff8\037\ufff8\040\ufff8\053\ufff8\054\ufff8\055\ufff8\001\002" +
    "\000\030\006\057\042\056\043\064\044\065\045\073\046" +
    "\054\047\071\050\061\051\070\052\060\053\067\001\002" +
    "\000\046\007\uffb3\011\uffb3\012\uffb3\023\uffb3\024\uffb3\025" +
    "\uffb3\026\uffb3\030\uffb3\031\uffb3\032\uffb3\033\uffb3\034\uffb3" +
    "\036\uffb3\037\uffb3\040\uffb3\053\uffb3\054\uffb3\055\uffb3\001" +
    "\002\000\042\011\uffdb\023\uffdb\024\uffdb\025\uffdb\026\uffdb" +
    "\030\uffdb\031\uffdb\032\uffdb\033\uffdb\034\uffdb\036\uffdb\037" +
    "\uffdb\040\uffdb\053\uffdb\054\uffdb\055\uffdb\001\002\000\004" +
    "\007\105\001\002\000\050\007\uffb2\011\uffb2\012\uffb2\020" +
    "\106\023\uffb2\024\uffb2\025\uffb2\026\uffb2\030\uffb2\031\uffb2" +
    "\032\uffb2\033\uffb2\034\uffb2\036\uffb2\037\uffb2\040\uffb2\053" +
    "\uffb2\054\uffb2\055\uffb2\001\002\000\030\006\057\042\056" +
    "\043\064\044\065\045\073\046\054\047\071\050\061\051" +
    "\070\052\060\053\067\001\002\000\046\007\uffb1\011\uffb1" +
    "\012\uffb1\023\uffb1\024\uffb1\025\uffb1\026\uffb1\030\uffb1\031" +
    "\uffb1\032\uffb1\033\uffb1\034\uffb1\036\uffb1\037\uffb1\040\uffb1" +
    "\053\uffb1\054\uffb1\055\uffb1\001\002\000\020\006\113\017" +
    "\114\042\056\044\065\046\054\050\061\053\067\001\002" +
    "\000\004\007\127\001\002\000\010\007\uffa8\012\uffa8\016" +
    "\125\001\002\000\020\006\113\017\114\042\056\044\065" +
    "\046\054\050\061\053\067\001\002\000\020\006\113\017" +
    "\114\042\056\044\065\046\054\050\061\053\067\001\002" +
    "\000\012\007\uffad\012\uffad\015\116\016\uffad\001\002\000" +
    "\014\042\056\044\065\046\054\050\061\053\067\001\002" +
    "\000\010\007\uffae\012\uffae\016\uffae\001\002\000\006\007" +
    "\uffa9\012\uffa9\001\002\000\004\007\122\001\002\000\010" +
    "\007\uffab\012\uffab\016\123\001\002\000\020\006\113\017" +
    "\114\042\056\044\065\046\054\050\061\053\067\001\002" +
    "\000\006\007\uffac\012\uffac\001\002\000\020\006\113\017" +
    "\114\042\056\044\065\046\054\050\061\053\067\001\002" +
    "\000\006\007\uffaa\012\uffaa\001\002\000\004\010\130\001" +
    "\002\000\034\011\131\024\146\026\041\030\021\031\044" +
    "\032\050\033\043\036\031\037\025\040\045\053\134\054" +
    "\004\055\011\001\002\000\042\011\uff7e\023\uff7e\024\uff7e" +
    "\025\uff7e\026\uff7e\030\uff7e\031\uff7e\032\uff7e\033\uff7e\034" +
    "\uff7e\036\uff7e\037\uff7e\040\uff7e\053\uff7e\054\uff7e\055\uff7e" +
    "\001\002\000\034\011\131\024\146\026\041\030\021\031" +
    "\044\032\050\033\043\036\031\037\025\040\045\053\134" +
    "\054\004\055\011\001\002\000\034\011\131\024\146\026" +
    "\041\030\021\031\044\032\050\033\043\036\031\037\025" +
    "\040\045\053\134\054\004\055\011\001\002\000\006\005" +
    "\164\006\163\001\002\000\034\011\131\024\146\026\041" +
    "\030\021\031\044\032\050\033\043\036\031\037\025\040" +
    "\045\053\134\054\004\055\011\001\002\000\034\011\131" +
    "\024\146\026\041\030\021\031\044\032\050\033\043\036" +
    "\031\037\025\040\045\053\134\054\004\055\011\001\002" +
    "\000\034\011\131\024\146\026\041\030\021\031\044\032" +
    "\050\033\043\036\031\037\025\040\045\053\134\054\004" +
    "\055\011\001\002\000\034\011\131\024\146\026\041\030" +
    "\021\031\044\032\050\033\043\036\031\037\025\040\045" +
    "\053\134\054\004\055\011\001\002\000\034\011\131\024" +
    "\146\026\041\030\021\031\044\032\050\033\043\036\031" +
    "\037\025\040\045\053\134\054\004\055\011\001\002\000" +
    "\034\011\131\024\146\026\041\030\021\031\044\032\050" +
    "\033\043\036\031\037\025\040\045\053\134\054\004\055" +
    "\011\001\002\000\042\011\uff8b\023\uff8b\024\uff8b\025\uff8b" +
    "\026\uff8b\030\uff8b\031\uff8b\032\uff8b\033\uff8b\034\uff8b\036" +
    "\uff8b\037\uff8b\040\uff8b\053\uff8b\054\uff8b\055\uff8b\001\002" +
    "\000\034\011\131\024\146\026\041\030\021\031\044\032" +
    "\050\033\043\036\031\037\025\040\045\053\134\054\004" +
    "\055\011\001\002\000\034\011\131\024\146\026\041\030" +
    "\021\031\044\032\050\033\043\036\031\037\025\040\045" +
    "\053\134\054\004\055\011\001\002\000\004\053\147\001" +
    "\002\000\004\005\150\001\002\000\032\006\057\041\074" +
    "\042\056\043\064\044\065\045\073\046\054\047\071\050" +
    "\061\051\070\052\060\053\067\001\002\000\042\011\uffe5" +
    "\023\uffe5\024\uffe5\025\uffe5\026\uffe5\030\uffe5\031\uffe5\032" +
    "\uffe5\033\uffe5\034\uffe5\036\uffe5\037\uffe5\040\uffe5\053\uffe5" +
    "\054\uffe5\055\uffe5\001\002\000\042\011\uffe3\023\uffe3\024" +
    "\uffe3\025\uffe3\026\uffe3\030\uffe3\031\uffe3\032\uffe3\033\uffe3" +
    "\034\uffe3\036\uffe3\037\uffe3\040\uffe3\053\uffe3\054\uffe3\055" +
    "\uffe3\001\002\000\042\011\uff82\023\uff82\024\uff82\025\uff82" +
    "\026\uff82\030\uff82\031\uff82\032\uff82\033\uff82\034\uff82\036" +
    "\uff82\037\uff82\040\uff82\053\uff82\054\uff82\055\uff82\001\002" +
    "\000\042\011\uff7f\023\uff7f\024\uff7f\025\uff7f\026\uff7f\030" +
    "\uff7f\031\uff7f\032\uff7f\033\uff7f\034\uff7f\036\uff7f\037\uff7f" +
    "\040\uff7f\053\uff7f\054\uff7f\055\uff7f\001\002\000\042\011" +
    "\uff87\023\uff87\024\uff87\025\uff87\026\uff87\030\uff87\031\uff87" +
    "\032\uff87\033\uff87\034\uff87\036\uff87\037\uff87\040\uff87\053" +
    "\uff87\054\uff87\055\uff87\001\002\000\042\011\uff84\023\uff84" +
    "\024\uff84\025\uff84\026\uff84\030\uff84\031\uff84\032\uff84\033" +
    "\uff84\034\uff84\036\uff84\037\uff84\040\uff84\053\uff84\054\uff84" +
    "\055\uff84\001\002\000\042\011\uff85\023\uff85\024\uff85\025" +
    "\uff85\026\uff85\030\uff85\031\uff85\032\uff85\033\uff85\034\uff85" +
    "\036\uff85\037\uff85\040\uff85\053\uff85\054\uff85\055\uff85\001" +
    "\002\000\042\011\uff81\023\uff81\024\uff81\025\uff81\026\uff81" +
    "\030\uff81\031\uff81\032\uff81\033\uff81\034\uff81\036\uff81\037" +
    "\uff81\040\uff81\053\uff81\054\uff81\055\uff81\001\002\000\042" +
    "\011\uff83\023\uff83\024\uff83\025\uff83\026\uff83\030\uff83\031" +
    "\uff83\032\uff83\033\uff83\034\uff83\036\uff83\037\uff83\040\uff83" +
    "\053\uff83\054\uff83\055\uff83\001\002\000\042\011\uff80\023" +
    "\uff80\024\uff80\025\uff80\026\uff80\030\uff80\031\uff80\032\uff80" +
    "\033\uff80\034\uff80\036\uff80\037\uff80\040\uff80\053\uff80\054" +
    "\uff80\055\uff80\001\002\000\016\007\174\042\173\044\171" +
    "\046\166\050\170\053\172\001\002\000\030\006\057\042" +
    "\056\043\064\044\065\045\073\046\054\047\071\050\061" +
    "\051\070\052\060\053\067\001\002\000\042\011\uffe4\023" +
    "\uffe4\024\uffe4\025\uffe4\026\uffe4\030\uffe4\031\uffe4\032\uffe4" +
    "\033\uffe4\034\uffe4\036\uffe4\037\uffe4\040\uffe4\053\uffe4\054" +
    "\uffe4\055\uffe4\001\002\000\010\004\uffea\007\uffea\013\uffea" +
    "\001\002\000\006\004\204\007\205\001\002\000\010\004" +
    "\uffe9\007\uffe9\013\uffe9\001\002\000\010\004\uffeb\007\uffeb" +
    "\013\uffeb\001\002\000\006\004\uffc9\007\uffc7\001\002\000" +
    "\010\004\uffec\007\uffec\013\uffec\001\002\000\046\010\uffc3" +
    "\011\uffc3\012\uffc3\023\uffc3\024\uffc3\025\uffc3\026\uffc3\030" +
    "\uffc3\031\uffc3\032\uffc3\033\uffc3\034\uffc3\036\uffc3\037\uffc3" +
    "\040\uffc3\053\uffc3\054\uffc3\055\uffc3\001\002\000\040\011" +
    "\uffc0\012\176\024\uffc0\026\uffc0\030\uffc0\031\uffc0\032\uffc0" +
    "\033\uffc0\034\uffc0\036\uffc0\037\uffc0\040\uffc0\053\uffc0\054" +
    "\uffc0\055\uffc0\001\002\000\042\011\uffbf\023\uffbf\024\uffbf" +
    "\025\uffbf\026\uffbf\030\uffbf\031\uffbf\032\uffbf\033\uffbf\034" +
    "\uffbf\036\uffbf\037\uffbf\040\uffbf\053\uffbf\054\uffbf\055\uffbf" +
    "\001\002\000\004\007\203\001\002\000\004\004\201\001" +
    "\002\000\016\007\174\042\173\044\171\046\166\050\170" +
    "\053\172\001\002\000\046\010\uffc8\011\uffc8\012\uffc8\023" +
    "\uffc8\024\uffc8\025\uffc8\026\uffc8\030\uffc8\031\uffc8\032\uffc8" +
    "\033\uffc8\034\uffc8\036\uffc8\037\uffc8\040\uffc8\053\uffc8\054" +
    "\uffc8\055\uffc8\001\002\000\046\010\uffc6\011\uffc6\012\uffc6" +
    "\023\uffc6\024\uffc6\025\uffc6\026\uffc6\030\uffc6\031\uffc6\032" +
    "\uffc6\033\uffc6\034\uffc6\036\uffc6\037\uffc6\040\uffc6\053\uffc6" +
    "\054\uffc6\055\uffc6\001\002\000\016\007\174\042\173\044" +
    "\171\046\166\050\170\053\172\001\002\000\046\010\uffc4" +
    "\011\uffc4\012\uffc4\023\uffc4\024\uffc4\025\uffc4\026\uffc4\030" +
    "\uffc4\031\uffc4\032\uffc4\033\uffc4\034\uffc4\036\uffc4\037\uffc4" +
    "\040\uffc4\053\uffc4\054\uffc4\055\uffc4\001\002\000\046\010" +
    "\uffc5\011\uffc5\012\uffc5\023\uffc5\024\uffc5\025\uffc5\026\uffc5" +
    "\030\uffc5\031\uffc5\032\uffc5\033\uffc5\034\uffc5\036\uffc5\037" +
    "\uffc5\040\uffc5\053\uffc5\054\uffc5\055\uffc5\001\002\000\042" +
    "\011\uff86\023\uff86\024\uff86\025\uff86\026\uff86\030\uff86\031" +
    "\uff86\032\uff86\033\uff86\034\uff86\036\uff86\037\uff86\040\uff86" +
    "\053\uff86\054\uff86\055\uff86\001\002\000\042\011\uff88\023" +
    "\uff88\024\uff88\025\uff88\026\uff88\030\uff88\031\uff88\032\uff88" +
    "\033\uff88\034\uff88\036\uff88\037\uff88\040\uff88\053\uff88\054" +
    "\uff88\055\uff88\001\002\000\044\002\uffcc\011\uffcc\021\uffcc" +
    "\023\uffcc\024\uffcc\025\uffcc\026\uffcc\030\uffcc\031\uffcc\032" +
    "\uffcc\033\uffcc\036\uffcc\037\uffcc\040\uffcc\053\uffcc\054\uffcc" +
    "\055\uffcc\001\002\000\044\002\uffd0\011\uffd0\021\uffd0\023" +
    "\uffd0\024\uffd0\025\uffd0\026\uffd0\030\uffd0\031\uffd0\032\uffd0" +
    "\033\uffd0\036\uffd0\037\uffd0\040\uffd0\053\uffd0\054\uffd0\055" +
    "\uffd0\001\002\000\034\011\131\024\146\026\041\030\021" +
    "\031\044\032\050\033\043\036\031\037\025\040\045\053" +
    "\134\054\004\055\011\001\002\000\004\032\215\001\002" +
    "\000\004\006\216\001\002\000\020\006\113\017\114\042" +
    "\056\044\065\046\054\050\061\053\067\001\002\000\004" +
    "\007\220\001\002\000\044\011\uff8a\012\221\023\uff8a\024" +
    "\uff8a\025\uff8a\026\uff8a\030\uff8a\031\uff8a\032\uff8a\033\uff8a" +
    "\034\uff8a\036\uff8a\037\uff8a\040\uff8a\053\uff8a\054\uff8a\055" +
    "\uff8a\001\002\000\042\011\uff89\023\uff89\024\uff89\025\uff89" +
    "\026\uff89\030\uff89\031\uff89\032\uff89\033\uff89\034\uff89\036" +
    "\uff89\037\uff89\040\uff89\053\uff89\054\uff89\055\uff89\001\002" +
    "\000\004\053\223\001\002\000\004\007\224\001\002\000" +
    "\004\010\225\001\002\000\014\011\231\034\226\035\230" +
    "\054\004\055\011\001\002\000\012\042\173\044\171\046" +
    "\166\050\170\001\002\000\014\011\231\034\226\035\230" +
    "\054\004\055\011\001\002\000\004\013\237\001\002\000" +
    "\042\011\uff79\023\uff79\024\uff79\025\uff79\026\uff79\030\uff79" +
    "\031\uff79\032\uff79\033\uff79\034\uff79\036\uff79\037\uff79\040" +
    "\uff79\053\uff79\054\uff79\055\uff79\001\002\000\042\011\uff7d" +
    "\023\uff7d\024\uff7d\025\uff7d\026\uff7d\030\uff7d\031\uff7d\032" +
    "\uff7d\033\uff7d\034\uff7d\036\uff7d\037\uff7d\040\uff7d\053\uff7d" +
    "\054\uff7d\055\uff7d\001\002\000\014\011\231\034\226\035" +
    "\230\054\004\055\011\001\002\000\014\011\231\034\226" +
    "\035\230\054\004\055\011\001\002\000\042\011\uff7a\023" +
    "\uff7a\024\uff7a\025\uff7a\026\uff7a\030\uff7a\031\uff7a\032\uff7a" +
    "\033\uff7a\034\uff7a\036\uff7a\037\uff7a\040\uff7a\053\uff7a\054" +
    "\uff7a\055\uff7a\001\002\000\042\011\uff7c\023\uff7c\024\uff7c" +
    "\025\uff7c\026\uff7c\030\uff7c\031\uff7c\032\uff7c\033\uff7c\034" +
    "\uff7c\036\uff7c\037\uff7c\040\uff7c\053\uff7c\054\uff7c\055\uff7c" +
    "\001\002\000\032\024\146\026\041\030\021\031\044\032" +
    "\050\033\043\036\031\037\025\040\045\053\134\054\004" +
    "\055\011\001\002\000\032\024\146\026\041\030\021\031" +
    "\044\032\050\033\043\036\031\037\025\040\045\053\134" +
    "\054\004\055\011\001\002\000\032\024\146\026\041\030" +
    "\021\031\044\032\050\033\043\036\031\037\025\040\045" +
    "\053\134\054\004\055\011\001\002\000\032\024\146\026" +
    "\041\030\021\031\044\032\050\033\043\036\031\037\025" +
    "\040\045\053\134\054\004\055\011\001\002\000\032\024" +
    "\146\026\041\030\021\031\044\032\050\033\043\036\031" +
    "\037\025\040\045\053\134\054\004\055\011\001\002\000" +
    "\032\024\146\026\041\030\021\031\044\032\050\033\043" +
    "\036\031\037\025\040\045\053\134\054\004\055\011\001" +
    "\002\000\032\024\146\026\041\030\021\031\044\032\050" +
    "\033\043\036\031\037\025\040\045\053\134\054\004\055" +
    "\011\001\002\000\014\011\uff62\034\uff62\035\uff62\054\uff62" +
    "\055\uff62\001\002\000\032\024\146\026\041\030\021\031" +
    "\044\032\050\033\043\036\031\037\025\040\045\053\134" +
    "\054\004\055\011\001\002\000\032\024\146\026\041\030" +
    "\021\031\044\032\050\033\043\036\031\037\025\040\045" +
    "\053\134\054\004\055\011\001\002\000\032\024\146\026" +
    "\041\030\021\031\044\032\050\033\043\036\031\037\025" +
    "\040\045\053\134\054\004\055\011\001\002\000\014\011" +
    "\uff77\034\uff77\035\uff77\054\uff77\055\uff77\001\002\000\014" +
    "\011\uff66\034\uff66\035\uff66\054\uff66\055\uff66\001\002\000" +
    "\014\011\uff63\034\uff63\035\uff63\054\uff63\055\uff63\001\002" +
    "\000\014\011\uff6a\034\uff6a\035\uff6a\054\uff6a\055\uff6a\001" +
    "\002\000\014\011\uff68\034\uff68\035\uff68\054\uff68\055\uff68" +
    "\001\002\000\014\011\uff65\034\uff65\035\uff65\054\uff65\055" +
    "\uff65\001\002\000\014\011\uff67\034\uff67\035\uff67\054\uff67" +
    "\055\uff67\001\002\000\014\011\uff64\034\uff64\035\uff64\054" +
    "\uff64\055\uff64\001\002\000\014\011\uff69\034\uff69\035\uff69" +
    "\054\uff69\055\uff69\001\002\000\014\011\uff6b\034\uff6b\035" +
    "\uff6b\054\uff6b\055\uff6b\001\002\000\042\011\uff7b\023\uff7b" +
    "\024\uff7b\025\uff7b\026\uff7b\030\uff7b\031\uff7b\032\uff7b\033" +
    "\uff7b\034\uff7b\036\uff7b\037\uff7b\040\uff7b\053\uff7b\054\uff7b" +
    "\055\uff7b\001\002\000\004\013\266\001\002\000\034\024" +
    "\146\026\041\030\021\031\044\032\050\033\043\034\226" +
    "\036\031\037\025\040\045\053\134\054\004\055\011\001" +
    "\002\000\034\024\146\026\041\030\021\031\044\032\050" +
    "\033\043\034\226\036\031\037\025\040\045\053\134\054" +
    "\004\055\011\001\002\000\034\024\146\026\041\030\021" +
    "\031\044\032\050\033\043\034\226\036\031\037\025\040" +
    "\045\053\134\054\004\055\011\001\002\000\034\024\146" +
    "\026\041\030\021\031\044\032\050\033\043\034\226\036" +
    "\031\037\025\040\045\053\134\054\004\055\011\001\002" +
    "\000\034\024\146\026\041\030\021\031\044\032\050\033" +
    "\043\034\226\036\031\037\025\040\045\053\134\054\004" +
    "\055\011\001\002\000\034\024\146\026\041\030\021\031" +
    "\044\032\050\033\043\034\226\036\031\037\025\040\045" +
    "\053\134\054\004\055\011\001\002\000\034\024\146\026" +
    "\041\030\021\031\044\032\050\033\043\034\226\036\031" +
    "\037\025\040\045\053\134\054\004\055\011\001\002\000" +
    "\040\011\uff6c\024\uff6c\026\uff6c\030\uff6c\031\uff6c\032\uff6c" +
    "\033\uff6c\034\uff6c\035\uff6c\036\uff6c\037\uff6c\040\uff6c\053" +
    "\uff6c\054\uff6c\055\uff6c\001\002\000\034\024\146\026\041" +
    "\030\021\031\044\032\050\033\043\034\226\036\031\037" +
    "\025\040\045\053\134\054\004\055\011\001\002\000\034" +
    "\024\146\026\041\030\021\031\044\032\050\033\043\034" +
    "\226\036\031\037\025\040\045\053\134\054\004\055\011" +
    "\001\002\000\040\011\uff78\024\uff78\026\uff78\030\uff78\031" +
    "\uff78\032\uff78\033\uff78\034\uff78\035\uff78\036\uff78\037\uff78" +
    "\040\uff78\053\uff78\054\uff78\055\uff78\001\002\000\034\024" +
    "\146\026\041\030\021\031\044\032\050\033\043\034\226" +
    "\036\031\037\025\040\045\053\134\054\004\055\011\001" +
    "\002\000\034\024\146\026\041\030\021\031\044\032\050" +
    "\033\043\034\226\036\031\037\025\040\045\053\134\054" +
    "\004\055\011\001\002\000\040\011\uff70\024\uff70\026\uff70" +
    "\030\uff70\031\uff70\032\uff70\033\uff70\034\uff70\035\uff70\036" +
    "\uff70\037\uff70\040\uff70\053\uff70\054\uff70\055\uff70\001\002" +
    "\000\040\011\uff6d\024\uff6d\026\uff6d\030\uff6d\031\uff6d\032" +
    "\uff6d\033\uff6d\034\uff6d\035\uff6d\036\uff6d\037\uff6d\040\uff6d" +
    "\053\uff6d\054\uff6d\055\uff6d\001\002\000\040\011\uff76\024" +
    "\uff76\026\uff76\030\uff76\031\uff76\032\uff76\033\uff76\034\uff76" +
    "\035\uff76\036\uff76\037\uff76\040\uff76\053\uff76\054\uff76\055" +
    "\uff76\001\002\000\040\011\uff75\024\uff75\026\uff75\030\uff75" +
    "\031\uff75\032\uff75\033\uff75\034\uff75\035\uff75\036\uff75\037" +
    "\uff75\040\uff75\053\uff75\054\uff75\055\uff75\001\002\000\040" +
    "\011\uff72\024\uff72\026\uff72\030\uff72\031\uff72\032\uff72\033" +
    "\uff72\034\uff72\035\uff72\036\uff72\037\uff72\040\uff72\053\uff72" +
    "\054\uff72\055\uff72\001\002\000\040\011\uff6f\024\uff6f\026" +
    "\uff6f\030\uff6f\031\uff6f\032\uff6f\033\uff6f\034\uff6f\035\uff6f" +
    "\036\uff6f\037\uff6f\040\uff6f\053\uff6f\054\uff6f\055\uff6f\001" +
    "\002\000\040\011\uff71\024\uff71\026\uff71\030\uff71\031\uff71" +
    "\032\uff71\033\uff71\034\uff71\035\uff71\036\uff71\037\uff71\040" +
    "\uff71\053\uff71\054\uff71\055\uff71\001\002\000\040\011\uff6e" +
    "\024\uff6e\026\uff6e\030\uff6e\031\uff6e\032\uff6e\033\uff6e\034" +
    "\uff6e\035\uff6e\036\uff6e\037\uff6e\040\uff6e\053\uff6e\054\uff6e" +
    "\055\uff6e\001\002\000\040\011\uff73\024\uff73\026\uff73\030" +
    "\uff73\031\uff73\032\uff73\033\uff73\034\uff73\035\uff73\036\uff73" +
    "\037\uff73\040\uff73\053\uff73\054\uff73\055\uff73\001\002\000" +
    "\040\011\uff74\024\uff74\026\uff74\030\uff74\031\uff74\032\uff74" +
    "\033\uff74\034\uff74\035\uff74\036\uff74\037\uff74\040\uff74\053" +
    "\uff74\054\uff74\055\uff74\001\002\000\044\002\uffd7\011\uffd7" +
    "\021\uffd7\023\uffd7\024\uffd7\025\uffd7\026\uffd7\030\uffd7\031" +
    "\uffd7\032\uffd7\033\uffd7\036\uffd7\037\uffd7\040\uffd7\053\uffd7" +
    "\054\uffd7\055\uffd7\001\002\000\020\006\113\017\114\042" +
    "\056\044\065\046\054\050\061\053\067\001\002\000\004" +
    "\007\320\001\002\000\004\010\321\001\002\000\034\011" +
    "\322\024\146\026\041\030\021\031\044\032\050\033\043" +
    "\036\031\037\025\040\045\053\134\054\004\055\011\001" +
    "\002\000\044\011\uff9a\023\uff9a\024\uff9a\025\uff9a\026\uff9a" +
    "\027\351\030\uff9a\031\uff9a\032\uff9a\033\uff9a\034\uff9a\036" +
    "\uff9a\037\uff9a\040\uff9a\053\uff9a\054\uff9a\055\uff9a\001\002" +
    "\000\034\011\322\024\146\026\041\030\021\031\044\032" +
    "\050\033\043\036\031\037\025\040\045\053\134\054\004" +
    "\055\011\001\002\000\034\011\322\024\146\026\041\030" +
    "\021\031\044\032\050\033\043\036\031\037\025\040\045" +
    "\053\134\054\004\055\011\001\002\000\034\011\322\024" +
    "\146\026\041\030\021\031\044\032\050\033\043\036\031" +
    "\037\025\040\045\053\134\054\004\055\011\001\002\000" +
    "\034\011\322\024\146\026\041\030\021\031\044\032\050" +
    "\033\043\036\031\037\025\040\045\053\134\054\004\055" +
    "\011\001\002\000\034\011\322\024\146\026\041\030\021" +
    "\031\044\032\050\033\043\036\031\037\025\040\045\053" +
    "\134\054\004\055\011\001\002\000\034\011\322\024\146" +
    "\026\041\030\021\031\044\032\050\033\043\036\031\037" +
    "\025\040\045\053\134\054\004\055\011\001\002\000\042" +
    "\011\uffa7\023\uffa7\024\uffa7\025\uffa7\026\uffa7\030\uffa7\031" +
    "\uffa7\032\uffa7\033\uffa7\034\uffa7\036\uffa7\037\uffa7\040\uffa7" +
    "\053\uffa7\054\uffa7\055\uffa7\001\002\000\034\011\322\024" +
    "\146\026\041\030\021\031\044\032\050\033\043\036\031" +
    "\037\025\040\045\053\134\054\004\055\011\001\002\000" +
    "\034\011\322\024\146\026\041\030\021\031\044\032\050" +
    "\033\043\036\031\037\025\040\045\053\134\054\004\055" +
    "\011\001\002\000\034\011\322\024\146\026\041\030\021" +
    "\031\044\032\050\033\043\036\031\037\025\040\045\053" +
    "\134\054\004\055\011\001\002\000\034\011\322\024\146" +
    "\026\041\030\021\031\044\032\050\033\043\036\031\037" +
    "\025\040\045\053\134\054\004\055\011\001\002\000\042" +
    "\011\uffa0\023\uffa0\024\uffa0\025\uffa0\026\uffa0\030\uffa0\031" +
    "\uffa0\032\uffa0\033\uffa0\034\uffa0\036\uffa0\037\uffa0\040\uffa0" +
    "\053\uffa0\054\uffa0\055\uffa0\001\002\000\042\011\uff9d\023" +
    "\uff9d\024\uff9d\025\uff9d\026\uff9d\030\uff9d\031\uff9d\032\uff9d" +
    "\033\uff9d\034\uff9d\036\uff9d\037\uff9d\040\uff9d\053\uff9d\054" +
    "\uff9d\055\uff9d\001\002\000\042\011\uffa5\023\uffa5\024\uffa5" +
    "\025\uffa5\026\uffa5\030\uffa5\031\uffa5\032\uffa5\033\uffa5\034" +
    "\uffa5\036\uffa5\037\uffa5\040\uffa5\053\uffa5\054\uffa5\055\uffa5" +
    "\001\002\000\042\011\uffa2\023\uffa2\024\uffa2\025\uffa2\026" +
    "\uffa2\030\uffa2\031\uffa2\032\uffa2\033\uffa2\034\uffa2\036\uffa2" +
    "\037\uffa2\040\uffa2\053\uffa2\054\uffa2\055\uffa2\001\002\000" +
    "\042\011\uffa3\023\uffa3\024\uffa3\025\uffa3\026\uffa3\030\uffa3" +
    "\031\uffa3\032\uffa3\033\uffa3\034\uffa3\036\uffa3\037\uffa3\040" +
    "\uffa3\053\uffa3\054\uffa3\055\uffa3\001\002\000\042\011\uff9f" +
    "\023\uff9f\024\uff9f\025\uff9f\026\uff9f\030\uff9f\031\uff9f\032" +
    "\uff9f\033\uff9f\034\uff9f\036\uff9f\037\uff9f\040\uff9f\053\uff9f" +
    "\054\uff9f\055\uff9f\001\002\000\042\011\uffa1\023\uffa1\024" +
    "\uffa1\025\uffa1\026\uffa1\030\uffa1\031\uffa1\032\uffa1\033\uffa1" +
    "\034\uffa1\036\uffa1\037\uffa1\040\uffa1\053\uffa1\054\uffa1\055" +
    "\uffa1\001\002\000\042\011\uffa6\023\uffa6\024\uffa6\025\uffa6" +
    "\026\uffa6\030\uffa6\031\uffa6\032\uffa6\033\uffa6\034\uffa6\036" +
    "\uffa6\037\uffa6\040\uffa6\053\uffa6\054\uffa6\055\uffa6\001\002" +
    "\000\042\011\uffa4\023\uffa4\024\uffa4\025\uffa4\026\uffa4\030" +
    "\uffa4\031\uffa4\032\uffa4\033\uffa4\034\uffa4\036\uffa4\037\uffa4" +
    "\040\uffa4\053\uffa4\054\uffa4\055\uffa4\001\002\000\042\011" +
    "\uff9e\023\uff9e\024\uff9e\025\uff9e\026\uff9e\030\uff9e\031\uff9e" +
    "\032\uff9e\033\uff9e\034\uff9e\036\uff9e\037\uff9e\040\uff9e\053" +
    "\uff9e\054\uff9e\055\uff9e\001\002\000\042\011\uff9b\023\uff9b" +
    "\024\uff9b\025\uff9b\026\uff9b\030\uff9b\031\uff9b\032\uff9b\033" +
    "\uff9b\034\uff9b\036\uff9b\037\uff9b\040\uff9b\053\uff9b\054\uff9b" +
    "\055\uff9b\001\002\000\006\010\353\026\354\001\002\000" +
    "\042\011\uff9c\023\uff9c\024\uff9c\025\uff9c\026\uff9c\030\uff9c" +
    "\031\uff9c\032\uff9c\033\uff9c\034\uff9c\036\uff9c\037\uff9c\040" +
    "\uff9c\053\uff9c\054\uff9c\055\uff9c\001\002\000\034\011\362" +
    "\024\146\026\041\030\021\031\044\032\050\033\043\036" +
    "\031\037\025\040\045\053\134\054\004\055\011\001\002" +
    "\000\004\006\355\001\002\000\020\006\113\017\114\042" +
    "\056\044\065\046\054\050\061\053\067\001\002\000\004" +
    "\007\357\001\002\000\004\010\360\001\002\000\034\011" +
    "\322\024\146\026\041\030\021\031\044\032\050\033\043" +
    "\036\031\037\025\040\045\053\134\054\004\055\011\001" +
    "\002\000\042\011\uff8d\023\uff8d\024\uff8d\025\uff8d\026\uff8d" +
    "\030\uff8d\031\uff8d\032\uff8d\033\uff8d\034\uff8d\036\uff8d\037" +
    "\uff8d\040\uff8d\053\uff8d\054\uff8d\055\uff8d\001\002\000\042" +
    "\011\uff8e\023\uff8e\024\uff8e\025\uff8e\026\uff8e\030\uff8e\031" +
    "\uff8e\032\uff8e\033\uff8e\034\uff8e\036\uff8e\037\uff8e\040\uff8e" +
    "\053\uff8e\054\uff8e\055\uff8e\001\002\000\034\011\362\024" +
    "\146\026\041\030\021\031\044\032\050\033\043\036\031" +
    "\037\025\040\045\053\134\054\004\055\011\001\002\000" +
    "\034\011\362\024\146\026\041\030\021\031\044\032\050" +
    "\033\043\036\031\037\025\040\045\053\134\054\004\055" +
    "\011\001\002\000\034\011\362\024\146\026\041\030\021" +
    "\031\044\032\050\033\043\036\031\037\025\040\045\053" +
    "\134\054\004\055\011\001\002\000\034\011\362\024\146" +
    "\026\041\030\021\031\044\032\050\033\043\036\031\037" +
    "\025\040\045\053\134\054\004\055\011\001\002\000\034" +
    "\011\362\024\146\026\041\030\021\031\044\032\050\033" +
    "\043\036\031\037\025\040\045\053\134\054\004\055\011" +
    "\001\002\000\034\011\362\024\146\026\041\030\021\031" +
    "\044\032\050\033\043\036\031\037\025\040\045\053\134" +
    "\054\004\055\011\001\002\000\034\011\362\024\146\026" +
    "\041\030\021\031\044\032\050\033\043\036\031\037\025" +
    "\040\045\053\134\054\004\055\011\001\002\000\042\011" +
    "\uff99\023\uff99\024\uff99\025\uff99\026\uff99\030\uff99\031\uff99" +
    "\032\uff99\033\uff99\034\uff99\036\uff99\037\uff99\040\uff99\053" +
    "\uff99\054\uff99\055\uff99\001\002\000\034\011\362\024\146" +
    "\026\041\030\021\031\044\032\050\033\043\036\031\037" +
    "\025\040\045\053\134\054\004\055\011\001\002\000\034" +
    "\011\362\024\146\026\041\030\021\031\044\032\050\033" +
    "\043\036\031\037\025\040\045\053\134\054\004\055\011" +
    "\001\002\000\034\011\362\024\146\026\041\030\021\031" +
    "\044\032\050\033\043\036\031\037\025\040\045\053\134" +
    "\054\004\055\011\001\002\000\042\011\uff8f\023\uff8f\024" +
    "\uff8f\025\uff8f\026\uff8f\030\uff8f\031\uff8f\032\uff8f\033\uff8f" +
    "\034\uff8f\036\uff8f\037\uff8f\040\uff8f\053\uff8f\054\uff8f\055" +
    "\uff8f\001\002\000\042\011\uff92\023\uff92\024\uff92\025\uff92" +
    "\026\uff92\030\uff92\031\uff92\032\uff92\033\uff92\034\uff92\036" +
    "\uff92\037\uff92\040\uff92\053\uff92\054\uff92\055\uff92\001\002" +
    "\000\042\011\uff97\023\uff97\024\uff97\025\uff97\026\uff97\030" +
    "\uff97\031\uff97\032\uff97\033\uff97\034\uff97\036\uff97\037\uff97" +
    "\040\uff97\053\uff97\054\uff97\055\uff97\001\002\000\042\011" +
    "\uff94\023\uff94\024\uff94\025\uff94\026\uff94\030\uff94\031\uff94" +
    "\032\uff94\033\uff94\034\uff94\036\uff94\037\uff94\040\uff94\053" +
    "\uff94\054\uff94\055\uff94\001\002\000\042\011\uff95\023\uff95" +
    "\024\uff95\025\uff95\026\uff95\030\uff95\031\uff95\032\uff95\033" +
    "\uff95\034\uff95\036\uff95\037\uff95\040\uff95\053\uff95\054\uff95" +
    "\055\uff95\001\002\000\042\011\uff90\023\uff90\024\uff90\025" +
    "\uff90\026\uff90\030\uff90\031\uff90\032\uff90\033\uff90\034\uff90" +
    "\036\uff90\037\uff90\040\uff90\053\uff90\054\uff90\055\uff90\001" +
    "\002\000\042\011\uff93\023\uff93\024\uff93\025\uff93\026\uff93" +
    "\030\uff93\031\uff93\032\uff93\033\uff93\034\uff93\036\uff93\037" +
    "\uff93\040\uff93\053\uff93\054\uff93\055\uff93\001\002\000\042" +
    "\011\uff98\023\uff98\024\uff98\025\uff98\026\uff98\030\uff98\031" +
    "\uff98\032\uff98\033\uff98\034\uff98\036\uff98\037\uff98\040\uff98" +
    "\053\uff98\054\uff98\055\uff98\001\002\000\042\011\uff96\023" +
    "\uff96\024\uff96\025\uff96\026\uff96\030\uff96\031\uff96\032\uff96" +
    "\033\uff96\034\uff96\036\uff96\037\uff96\040\uff96\053\uff96\054" +
    "\uff96\055\uff96\001\002\000\042\011\uff91\023\uff91\024\uff91" +
    "\025\uff91\026\uff91\030\uff91\031\uff91\032\uff91\033\uff91\034" +
    "\uff91\036\uff91\037\uff91\040\uff91\053\uff91\054\uff91\055\uff91" +
    "\001\002\000\044\002\uffd4\011\uffd4\021\uffd4\023\uffd4\024" +
    "\uffd4\025\uffd4\026\uffd4\030\uffd4\031\uffd4\032\uffd4\033\uffd4" +
    "\036\uffd4\037\uffd4\040\uffd4\053\uffd4\054\uffd4\055\uffd4\001" +
    "\002\000\044\002\uffd3\011\uffd3\021\uffd3\023\uffd3\024\uffd3" +
    "\025\uffd3\026\uffd3\030\uffd3\031\uffd3\032\uffd3\033\uffd3\036" +
    "\uffd3\037\uffd3\040\uffd3\053\uffd3\054\uffd3\055\uffd3\001\002" +
    "\000\044\002\uffd2\011\uffd2\021\uffd2\023\uffd2\024\uffd2\025" +
    "\uffd2\026\uffd2\030\uffd2\031\uffd2\032\uffd2\033\uffd2\036\uffd2" +
    "\037\uffd2\040\uffd2\053\uffd2\054\uffd2\055\uffd2\001\002\000" +
    "\044\002\uffd1\011\uffd1\021\uffd1\023\uffd1\024\uffd1\025\uffd1" +
    "\026\uffd1\030\uffd1\031\uffd1\032\uffd1\033\uffd1\036\uffd1\037" +
    "\uffd1\040\uffd1\053\uffd1\054\uffd1\055\uffd1\001\002\000\044" +
    "\002\uffd5\011\uffd5\021\uffd5\023\uffd5\024\uffd5\025\uffd5\026" +
    "\uffd5\030\uffd5\031\uffd5\032\uffd5\033\uffd5\036\uffd5\037\uffd5" +
    "\040\uffd5\053\uffd5\054\uffd5\055\uffd5\001\002\000\044\002" +
    "\uffcd\011\uffcd\021\uffcd\023\uffcd\024\uffcd\025\uffcd\026\uffcd" +
    "\030\uffcd\031\uffcd\032\uffcd\033\uffcd\036\uffcd\037\uffcd\040" +
    "\uffcd\053\uffcd\054\uffcd\055\uffcd\001\002\000\004\005\u010f" +
    "\001\002\000\032\006\057\041\074\042\056\043\064\044" +
    "\065\045\073\046\054\047\071\050\061\051\070\052\060" +
    "\053\067\001\002\000\040\011\uffde\023\uffde\024\uffde\025" +
    "\uffde\026\uffde\030\uffde\031\uffde\032\uffde\033\uffde\036\uffde" +
    "\037\uffde\040\uffde\053\uffde\054\uffde\055\uffde\001\002\000" +
    "\040\011\uffdd\023\uffdd\024\uffdd\025\uffdd\026\uffdd\030\uffdd" +
    "\031\uffdd\032\uffdd\033\uffdd\036\uffdd\037\uffdd\040\uffdd\053" +
    "\uffdd\054\uffdd\055\uffdd\001\002\000\004\050\u0113\001\002" +
    "\000\004\007\u0114\001\002\000\004\012\u0115\001\002\000" +
    "\042\011\uffca\023\uffca\024\uffca\025\uffca\026\uffca\030\uffca" +
    "\031\uffca\032\uffca\033\uffca\034\uffca\036\uffca\037\uffca\040" +
    "\uffca\053\uffca\054\uffca\055\uffca\001\002\000\044\002\uffcf" +
    "\011\uffcf\021\uffcf\023\uffcf\024\uffcf\025\uffcf\026\uffcf\030" +
    "\uffcf\031\uffcf\032\uffcf\033\uffcf\036\uffcf\037\uffcf\040\uffcf" +
    "\053\uffcf\054\uffcf\055\uffcf\001\002\000\016\007\174\042" +
    "\173\044\171\046\166\050\170\053\172\001\002\000\030" +
    "\006\057\042\056\043\064\044\065\045\073\046\054\047" +
    "\071\050\061\051\070\052\060\053\067\001\002\000\040" +
    "\011\uffe7\023\uffe7\024\uffe7\025\uffe7\026\uffe7\030\uffe7\031" +
    "\uffe7\032\uffe7\033\uffe7\036\uffe7\037\uffe7\040\uffe7\053\uffe7" +
    "\054\uffe7\055\uffe7\001\002\000\044\010\u011b\011\uffc0\012" +
    "\176\023\uffc0\024\uffc0\025\uffc0\026\uffc0\030\uffc0\031\uffc0" +
    "\032\uffc0\033\uffc0\036\uffc0\037\uffc0\040\uffc0\053\uffc0\054" +
    "\uffc0\055\uffc0\001\002\000\034\011\uffc2\024\uffc2\026\uffc2" +
    "\030\uffc2\031\uffc2\032\uffc2\033\uffc2\036\uffc2\037\uffc2\040" +
    "\uffc2\053\uffc2\054\uffc2\055\uffc2\001\002\000\034\011\u011d" +
    "\024\146\026\041\030\021\031\044\032\050\033\043\036" +
    "\031\037\025\040\045\053\134\054\004\055\011\001\002" +
    "\000\040\011\uffb4\023\uffb4\024\uffb4\025\uffb4\026\uffb4\030" +
    "\uffb4\031\uffb4\032\uffb4\033\uffb4\036\uffb4\037\uffb4\040\uffb4" +
    "\053\uffb4\054\uffb4\055\uffb4\001\002\000\034\011\u011d\024" +
    "\146\026\041\030\021\031\044\032\050\033\043\036\031" +
    "\037\025\040\045\053\134\054\004\055\011\001\002\000" +
    "\040\011\uffc1\023\uffc1\024\uffc1\025\uffc1\026\uffc1\030\uffc1" +
    "\031\uffc1\032\uffc1\033\uffc1\036\uffc1\037\uffc1\040\uffc1\053" +
    "\uffc1\054\uffc1\055\uffc1\001\002\000\034\011\u011d\024\146" +
    "\026\041\030\021\031\044\032\050\033\043\036\031\037" +
    "\025\040\045\053\134\054\004\055\011\001\002\000\034" +
    "\011\u011d\024\146\026\041\030\021\031\044\032\050\033" +
    "\043\036\031\037\025\040\045\053\134\054\004\055\011" +
    "\001\002\000\040\011\020\023\022\024\051\025\032\026" +
    "\041\030\021\031\044\032\050\033\043\036\031\037\025" +
    "\040\045\053\027\054\004\055\011\001\002\000\034\011" +
    "\u011d\024\146\026\041\030\021\031\044\032\050\033\043" +
    "\036\031\037\025\040\045\053\134\054\004\055\011\001" +
    "\002\000\034\011\u011d\024\146\026\041\030\021\031\044" +
    "\032\050\033\043\036\031\037\025\040\045\053\134\054" +
    "\004\055\011\001\002\000\034\011\u011d\024\146\026\041" +
    "\030\021\031\044\032\050\033\043\036\031\037\025\040" +
    "\045\053\134\054\004\055\011\001\002\000\034\011\u011d" +
    "\024\146\026\041\030\021\031\044\032\050\033\043\036" +
    "\031\037\025\040\045\053\134\054\004\055\011\001\002" +
    "\000\034\011\u011d\024\146\026\041\030\021\031\044\032" +
    "\050\033\043\036\031\037\025\040\045\053\134\054\004" +
    "\055\011\001\002\000\034\011\u011d\024\146\026\041\030" +
    "\021\031\044\032\050\033\043\036\031\037\025\040\045" +
    "\053\134\054\004\055\011\001\002\000\040\011\uffb8\023" +
    "\uffb8\024\uffb8\025\uffb8\026\uffb8\030\uffb8\031\uffb8\032\uffb8" +
    "\033\uffb8\036\uffb8\037\uffb8\040\uffb8\053\uffb8\054\uffb8\055" +
    "\uffb8\001\002\000\040\011\uffb5\023\uffb5\024\uffb5\025\uffb5" +
    "\026\uffb5\030\uffb5\031\uffb5\032\uffb5\033\uffb5\036\uffb5\037" +
    "\uffb5\040\uffb5\053\uffb5\054\uffb5\055\uffb5\001\002\000\040" +
    "\011\uffbd\023\uffbd\024\uffbd\025\uffbd\026\uffbd\030\uffbd\031" +
    "\uffbd\032\uffbd\033\uffbd\036\uffbd\037\uffbd\040\uffbd\053\uffbd" +
    "\054\uffbd\055\uffbd\001\002\000\040\011\uffba\023\uffba\024" +
    "\uffba\025\uffba\026\uffba\030\uffba\031\uffba\032\uffba\033\uffba" +
    "\036\uffba\037\uffba\040\uffba\053\uffba\054\uffba\055\uffba\001" +
    "\002\000\040\011\uffbb\023\uffbb\024\uffbb\025\uffbb\026\uffbb" +
    "\030\uffbb\031\uffbb\032\uffbb\033\uffbb\036\uffbb\037\uffbb\040" +
    "\uffbb\053\uffbb\054\uffbb\055\uffbb\001\002\000\040\011\uffbe" +
    "\023\uffbe\024\uffbe\025\uffbe\026\uffbe\030\uffbe\031\uffbe\032" +
    "\uffbe\033\uffbe\036\uffbe\037\uffbe\040\uffbe\053\uffbe\054\uffbe" +
    "\055\uffbe\001\002\000\040\011\uffb9\023\uffb9\024\uffb9\025" +
    "\uffb9\026\uffb9\030\uffb9\031\uffb9\032\uffb9\033\uffb9\036\uffb9" +
    "\037\uffb9\040\uffb9\053\uffb9\054\uffb9\055\uffb9\001\002\000" +
    "\040\011\uffb7\023\uffb7\024\uffb7\025\uffb7\026\uffb7\030\uffb7" +
    "\031\uffb7\032\uffb7\033\uffb7\036\uffb7\037\uffb7\040\uffb7\053" +
    "\uffb7\054\uffb7\055\uffb7\001\002\000\040\011\uffbc\023\uffbc" +
    "\024\uffbc\025\uffbc\026\uffbc\030\uffbc\031\uffbc\032\uffbc\033" +
    "\uffbc\036\uffbc\037\uffbc\040\uffbc\053\uffbc\054\uffbc\055\uffbc" +
    "\001\002\000\040\011\uffb6\023\uffb6\024\uffb6\025\uffb6\026" +
    "\uffb6\030\uffb6\031\uffb6\032\uffb6\033\uffb6\036\uffb6\037\uffb6" +
    "\040\uffb6\053\uffb6\054\uffb6\055\uffb6\001\002\000\044\002" +
    "\uffd6\011\uffd6\021\uffd6\023\uffd6\024\uffd6\025\uffd6\026\uffd6" +
    "\030\uffd6\031\uffd6\032\uffd6\033\uffd6\036\uffd6\037\uffd6\040" +
    "\uffd6\053\uffd6\054\uffd6\055\uffd6\001\002\000\044\011\ufff9" +
    "\023\ufff9\024\ufff9\025\ufff9\026\ufff9\030\ufff9\031\ufff9\032" +
    "\ufff9\033\ufff9\034\ufff9\035\ufff9\036\ufff9\037\ufff9\040\ufff9" +
    "\053\ufff9\054\ufff9\055\ufff9\001\002\000\044\002\uffd8\011" +
    "\uffd8\021\uffd8\023\uffd8\024\uffd8\025\uffd8\026\uffd8\030\uffd8" +
    "\031\uffd8\032\uffd8\033\uffd8\036\uffd8\037\uffd8\040\uffd8\053" +
    "\uffd8\054\uffd8\055\uffd8\001\002\000\044\002\uffce\011\uffce" +
    "\021\uffce\023\uffce\024\uffce\025\uffce\026\uffce\030\uffce\031" +
    "\uffce\032\uffce\033\uffce\036\uffce\037\uffce\040\uffce\053\uffce" +
    "\054\uffce\055\uffce\001\002\000\004\005\u0138\001\002\000" +
    "\032\006\057\041\074\042\056\043\064\044\065\045\073" +
    "\046\054\047\071\050\061\051\070\052\060\053\067\001" +
    "\002\000\040\011\uffe8\023\uffe8\024\uffe8\025\uffe8\026\uffe8" +
    "\030\uffe8\031\uffe8\032\uffe8\033\uffe8\036\uffe8\037\uffe8\040" +
    "\uffe8\053\uffe8\054\uffe8\055\uffe8\001\002\000\040\011\uffe6" +
    "\023\uffe6\024\uffe6\025\uffe6\026\uffe6\030\uffe6\031\uffe6\032" +
    "\uffe6\033\uffe6\036\uffe6\037\uffe6\040\uffe6\053\uffe6\054\uffe6" +
    "\055\uffe6\001\002\000\006\024\u013c\053\u013e\001\002\000" +
    "\004\053\u0149\001\002\000\004\012\u0141\001\002\000\004" +
    "\005\u013f\001\002\000\030\006\057\042\056\043\064\044" +
    "\065\045\073\046\054\047\071\050\061\051\070\052\060" +
    "\053\067\001\002\000\004\012\uffe1\001\002\000\020\006" +
    "\113\017\114\042\056\044\065\046\054\050\061\053\067" +
    "\001\002\000\004\012\u0143\001\002\000\004\053\u0144\001" +
    "\002\000\004\014\u0145\001\002\000\004\007\u0146\001\002" +
    "\000\004\010\u0147\001\002\000\034\011\131\024\146\026" +
    "\041\030\021\031\044\032\050\033\043\036\031\037\025" +
    "\040\045\053\134\054\004\055\011\001\002\000\042\011" +
    "\uff8c\023\uff8c\024\uff8c\025\uff8c\026\uff8c\030\uff8c\031\uff8c" +
    "\032\uff8c\033\uff8c\034\uff8c\036\uff8c\037\uff8c\040\uff8c\053" +
    "\uff8c\054\uff8c\055\uff8c\001\002\000\004\005\u014a\001\002" +
    "\000\030\006\057\042\056\043\064\044\065\045\073\046" +
    "\054\047\071\050\061\051\070\052\060\053\067\001\002" +
    "\000\004\012\uffe2\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u014a\000\010\002\007\003\006\012\004\001\001\000" +
    "\002\001\001\000\010\002\u014b\003\006\012\004\001\001" +
    "\000\002\001\001\000\010\002\012\003\006\012\004\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\051\015\001" +
    "\001\000\036\003\046\004\037\013\016\015\023\016\041" +
    "\023\036\026\035\027\034\031\027\036\045\040\022\041" +
    "\025\047\033\050\032\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\036\003" +
    "\046\004\037\013\u0135\015\023\016\041\023\036\026\035" +
    "\027\034\031\027\036\045\040\022\041\025\047\033\050" +
    "\032\001\001\000\036\003\046\004\037\013\u0134\015\023" +
    "\016\041\023\036\026\035\027\034\031\027\036\045\040" +
    "\022\041\025\047\033\050\032\001\001\000\002\001\001" +
    "\000\036\003\046\004\037\013\u0132\015\023\016\041\023" +
    "\036\026\035\027\034\031\027\036\045\040\022\041\025" +
    "\047\033\050\032\001\001\000\002\001\001\000\036\003" +
    "\046\004\037\013\u0115\015\023\016\041\023\036\026\035" +
    "\027\034\031\027\036\045\040\022\041\025\047\033\050" +
    "\032\001\001\000\002\001\001\000\002\001\001\000\036" +
    "\003\046\004\037\013\u010c\015\023\016\041\023\036\026" +
    "\035\027\034\031\027\036\045\040\022\041\025\047\033" +
    "\050\032\001\001\000\036\003\046\004\037\013\u010b\015" +
    "\023\016\041\023\036\026\035\027\034\031\027\036\045" +
    "\040\022\041\025\047\033\050\032\001\001\000\036\003" +
    "\046\004\037\013\u010a\015\023\016\041\023\036\026\035" +
    "\027\034\031\027\036\045\040\022\041\025\047\033\050" +
    "\032\001\001\000\036\003\046\004\037\013\u0109\015\023" +
    "\016\041\023\036\026\035\027\034\031\027\036\045\040" +
    "\022\041\025\047\033\050\032\001\001\000\036\003\046" +
    "\004\037\013\u0108\015\023\016\041\023\036\026\035\027" +
    "\034\031\027\036\045\040\022\041\025\047\033\050\032" +
    "\001\001\000\036\003\046\004\037\013\u0107\015\023\016" +
    "\041\023\036\026\035\027\034\031\027\036\045\040\022" +
    "\041\025\047\033\050\032\001\001\000\002\001\001\000" +
    "\036\003\046\004\037\013\314\015\023\016\041\023\036" +
    "\026\035\027\034\031\027\036\045\040\022\041\025\047" +
    "\033\050\032\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\036\003\046\004\037\013\211\015" +
    "\023\016\041\023\036\026\035\027\034\031\027\036\045" +
    "\040\022\041\025\047\033\050\032\001\001\000\036\003" +
    "\046\004\037\013\210\015\023\016\041\023\036\026\035" +
    "\027\034\031\027\036\045\040\022\041\025\047\033\050" +
    "\032\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\005\065\006\071\007\054\017\061\030" +
    "\062\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\006\071\007\054\017\103\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\006\071\007\054\017\101\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\006\071\007\054\017\106\001\001\000" +
    "\002\001\001\000\010\006\114\020\111\021\110\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\006\114\020" +
    "\111\021\120\001\001\000\010\006\114\020\111\021\117" +
    "\001\001\000\002\001\001\000\004\006\116\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\006\114\020\111\021\123\001\001\000" +
    "\002\001\001\000\010\006\114\020\111\021\125\001\001" +
    "\000\002\001\001\000\002\001\001\000\030\003\143\004" +
    "\140\016\141\024\135\031\134\036\144\037\142\040\131" +
    "\041\132\047\137\050\136\001\001\000\002\001\001\000" +
    "\030\003\143\004\140\016\141\024\135\031\134\036\144" +
    "\037\207\040\131\041\132\047\137\050\136\001\001\000" +
    "\030\003\143\004\140\016\141\024\135\031\134\036\144" +
    "\037\206\040\131\041\132\047\137\050\136\001\001\000" +
    "\002\001\001\000\030\003\143\004\140\016\141\024\135" +
    "\031\134\036\144\037\161\040\131\041\132\047\137\050" +
    "\136\001\001\000\030\003\143\004\140\016\141\024\135" +
    "\031\134\036\144\037\160\040\131\041\132\047\137\050" +
    "\136\001\001\000\030\003\143\004\140\016\141\024\135" +
    "\031\134\036\144\037\157\040\131\041\132\047\137\050" +
    "\136\001\001\000\030\003\143\004\140\016\141\024\135" +
    "\031\134\036\144\037\156\040\131\041\132\047\137\050" +
    "\136\001\001\000\030\003\143\004\140\016\141\024\135" +
    "\031\134\036\144\037\155\040\131\041\132\047\137\050" +
    "\136\001\001\000\030\003\143\004\140\016\141\024\135" +
    "\031\134\036\144\037\154\040\131\041\132\047\137\050" +
    "\136\001\001\000\002\001\001\000\030\003\143\004\140" +
    "\016\141\024\135\031\134\036\144\037\153\040\131\041" +
    "\132\047\137\050\136\001\001\000\030\003\143\004\140" +
    "\016\141\024\135\031\134\036\144\037\152\040\131\041" +
    "\132\047\137\050\136\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\005\151\006\071\007\054\017\061\030" +
    "\150\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\010\166\014\174\001\001\000" +
    "\012\006\071\007\054\017\061\030\164\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\052\177\053\176\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\010\166\014\201\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\010\166\014\205\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\030\003\143\004\140" +
    "\016\141\024\135\031\134\036\144\037\213\040\131\041" +
    "\132\047\137\050\136\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\006\114\020\111\021\216\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\003" +
    "\233\042\232\043\226\046\231\001\001\000\004\010\264" +
    "\001\001\000\012\003\233\042\232\043\226\046\263\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\003\233\042\232\043\226\046\235\001\001\000" +
    "\012\003\233\042\232\043\226\046\234\001\001\000\002" +
    "\001\001\000\002\001\001\000\030\003\247\004\245\016" +
    "\246\024\242\031\241\036\250\040\237\041\240\045\251" +
    "\047\244\050\243\001\001\000\030\003\247\004\245\016" +
    "\246\024\242\031\241\036\250\040\237\041\240\045\262" +
    "\047\244\050\243\001\001\000\030\003\247\004\245\016" +
    "\246\024\242\031\241\036\250\040\237\041\240\045\261" +
    "\047\244\050\243\001\001\000\030\003\247\004\245\016" +
    "\246\024\242\031\241\036\250\040\237\041\240\045\260" +
    "\047\244\050\243\001\001\000\030\003\247\004\245\016" +
    "\246\024\242\031\241\036\250\040\237\041\240\045\257" +
    "\047\244\050\243\001\001\000\030\003\247\004\245\016" +
    "\246\024\242\031\241\036\250\040\237\041\240\045\256" +
    "\047\244\050\243\001\001\000\030\003\247\004\245\016" +
    "\246\024\242\031\241\036\250\040\237\041\240\045\255" +
    "\047\244\050\243\001\001\000\002\001\001\000\030\003" +
    "\247\004\245\016\246\024\242\031\241\036\250\040\237" +
    "\041\240\045\254\047\244\050\243\001\001\000\030\003" +
    "\247\004\245\016\246\024\242\031\241\036\250\040\237" +
    "\041\240\045\253\047\244\050\243\001\001\000\030\003" +
    "\247\004\245\016\246\024\242\031\241\036\250\040\237" +
    "\041\240\045\252\047\244\050\243\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\032\003\300\004\274\016" +
    "\275\024\271\031\270\036\301\040\266\041\267\042\276" +
    "\044\277\047\273\050\272\001\001\000\032\003\300\004" +
    "\274\016\275\024\271\031\270\036\301\040\266\041\267" +
    "\042\276\044\313\047\273\050\272\001\001\000\032\003" +
    "\300\004\274\016\275\024\271\031\270\036\301\040\266" +
    "\041\267\042\276\044\312\047\273\050\272\001\001\000" +
    "\032\003\300\004\274\016\275\024\271\031\270\036\301" +
    "\040\266\041\267\042\276\044\311\047\273\050\272\001" +
    "\001\000\032\003\300\004\274\016\275\024\271\031\270" +
    "\036\301\040\266\041\267\042\276\044\310\047\273\050" +
    "\272\001\001\000\032\003\300\004\274\016\275\024\271" +
    "\031\270\036\301\040\266\041\267\042\276\044\307\047" +
    "\273\050\272\001\001\000\032\003\300\004\274\016\275" +
    "\024\271\031\270\036\301\040\266\041\267\042\276\044" +
    "\306\047\273\050\272\001\001\000\002\001\001\000\032" +
    "\003\300\004\274\016\275\024\271\031\270\036\301\040" +
    "\266\041\267\042\276\044\305\047\273\050\272\001\001" +
    "\000\032\003\300\004\274\016\275\024\271\031\270\036" +
    "\301\040\266\041\267\042\276\044\304\047\273\050\272" +
    "\001\001\000\002\001\001\000\032\003\300\004\274\016" +
    "\275\024\271\031\270\036\301\040\266\041\267\042\276" +
    "\044\303\047\273\050\272\001\001\000\032\003\300\004" +
    "\274\016\275\024\271\031\270\036\301\040\266\041\267" +
    "\042\276\044\302\047\273\050\272\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\006\114\020\111\021\316\001\001\000" +
    "\002\001\001\000\002\001\001\000\030\003\333\004\331" +
    "\016\332\024\325\031\324\032\330\036\334\040\322\041" +
    "\323\047\327\050\326\001\001\000\006\033\347\035\351" +
    "\001\001\000\030\003\333\004\331\016\332\024\325\031" +
    "\324\032\346\036\334\040\322\041\323\047\327\050\326" +
    "\001\001\000\030\003\333\004\331\016\332\024\325\031" +
    "\324\032\345\036\334\040\322\041\323\047\327\050\326" +
    "\001\001\000\030\003\333\004\331\016\332\024\325\031" +
    "\324\032\344\036\334\040\322\041\323\047\327\050\326" +
    "\001\001\000\030\003\333\004\331\016\332\024\325\031" +
    "\324\032\343\036\334\040\322\041\323\047\327\050\326" +
    "\001\001\000\030\003\333\004\331\016\332\024\325\031" +
    "\324\032\342\036\334\040\322\041\323\047\327\050\326" +
    "\001\001\000\030\003\333\004\331\016\332\024\325\031" +
    "\324\032\341\036\334\040\322\041\323\047\327\050\326" +
    "\001\001\000\002\001\001\000\030\003\333\004\331\016" +
    "\332\024\325\031\324\032\340\036\334\040\322\041\323" +
    "\047\327\050\326\001\001\000\030\003\333\004\331\016" +
    "\332\024\325\031\324\032\337\036\334\040\322\041\323" +
    "\047\327\050\326\001\001\000\030\003\333\004\331\016" +
    "\332\024\325\031\324\032\336\036\334\040\322\041\323" +
    "\047\327\050\326\001\001\000\030\003\333\004\331\016" +
    "\332\024\325\031\324\032\335\036\334\040\322\041\323" +
    "\047\327\050\326\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\030\003\374\004\370\016" +
    "\372\024\365\031\364\034\371\036\373\040\362\041\363" +
    "\047\367\050\366\001\001\000\002\001\001\000\010\006" +
    "\114\020\111\021\355\001\001\000\002\001\001\000\002" +
    "\001\001\000\030\003\333\004\331\016\332\024\325\031" +
    "\324\032\360\036\334\040\322\041\323\047\327\050\326" +
    "\001\001\000\002\001\001\000\002\001\001\000\030\003" +
    "\374\004\370\016\372\024\365\031\364\034\u0106\036\373" +
    "\040\362\041\363\047\367\050\366\001\001\000\030\003" +
    "\374\004\370\016\372\024\365\031\364\034\u0105\036\373" +
    "\040\362\041\363\047\367\050\366\001\001\000\030\003" +
    "\374\004\370\016\372\024\365\031\364\034\u0104\036\373" +
    "\040\362\041\363\047\367\050\366\001\001\000\030\003" +
    "\374\004\370\016\372\024\365\031\364\034\u0103\036\373" +
    "\040\362\041\363\047\367\050\366\001\001\000\030\003" +
    "\374\004\370\016\372\024\365\031\364\034\u0102\036\373" +
    "\040\362\041\363\047\367\050\366\001\001\000\030\003" +
    "\374\004\370\016\372\024\365\031\364\034\u0101\036\373" +
    "\040\362\041\363\047\367\050\366\001\001\000\030\003" +
    "\374\004\370\016\372\024\365\031\364\034\u0100\036\373" +
    "\040\362\041\363\047\367\050\366\001\001\000\002\001" +
    "\001\000\030\003\374\004\370\016\372\024\365\031\364" +
    "\034\377\036\373\040\362\041\363\047\367\050\366\001" +
    "\001\000\030\003\374\004\370\016\372\024\365\031\364" +
    "\034\376\036\373\040\362\041\363\047\367\050\366\001" +
    "\001\000\030\003\374\004\370\016\372\024\365\031\364" +
    "\034\375\036\373\040\362\041\363\047\367\050\366\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\005\u0110\006\071\007\054\017" +
    "\061\030\u010f\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\010\166\014\u0119" +
    "\001\001\000\012\006\071\007\054\017\061\030\u0118\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\054\u011b" +
    "\001\001\000\030\003\u0126\004\u0124\016\u0125\022\u011e\024" +
    "\u0121\031\u0120\036\u0127\040\u011d\041\u011f\047\u0123\050\u0122" +
    "\001\001\000\002\001\001\000\030\003\u0126\004\u0124\016" +
    "\u0125\022\u0131\024\u0121\031\u0120\036\u0127\040\u011d\041\u011f" +
    "\047\u0123\050\u0122\001\001\000\002\001\001\000\030\003" +
    "\u0126\004\u0124\016\u0125\022\u0130\024\u0121\031\u0120\036\u0127" +
    "\040\u011d\041\u011f\047\u0123\050\u0122\001\001\000\030\003" +
    "\u0126\004\u0124\016\u0125\022\u012f\024\u0121\031\u0120\036\u0127" +
    "\040\u011d\041\u011f\047\u0123\050\u0122\001\001\000\036\003" +
    "\046\004\037\013\u012e\015\023\016\041\023\036\026\035" +
    "\027\034\031\027\036\045\040\022\041\025\047\033\050" +
    "\032\001\001\000\030\003\u0126\004\u0124\016\u0125\022\u012d" +
    "\024\u0121\031\u0120\036\u0127\040\u011d\041\u011f\047\u0123\050" +
    "\u0122\001\001\000\030\003\u0126\004\u0124\016\u0125\022\u012c" +
    "\024\u0121\031\u0120\036\u0127\040\u011d\041\u011f\047\u0123\050" +
    "\u0122\001\001\000\030\003\u0126\004\u0124\016\u0125\022\u012b" +
    "\024\u0121\031\u0120\036\u0127\040\u011d\041\u011f\047\u0123\050" +
    "\u0122\001\001\000\030\003\u0126\004\u0124\016\u0125\022\u012a" +
    "\024\u0121\031\u0120\036\u0127\040\u011d\041\u011f\047\u0123\050" +
    "\u0122\001\001\000\030\003\u0126\004\u0124\016\u0125\022\u0129" +
    "\024\u0121\031\u0120\036\u0127\040\u011d\041\u011f\047\u0123\050" +
    "\u0122\001\001\000\030\003\u0126\004\u0124\016\u0125\022\u0128" +
    "\024\u0121\031\u0120\036\u0127\040\u011d\041\u011f\047\u0123\050" +
    "\u0122\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\005\u0139\006\071\007\054\017\061\030\u0138\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\025\u013c\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\006\071\007\054\017\u013f\001\001\000\002\001\001" +
    "\000\010\006\114\020\111\021\u0141\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\030\003\143\004\140\016\141\024" +
    "\135\031\134\036\144\037\u0147\040\131\041\132\047\137" +
    "\050\136\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\006\071\007\054\017\u014a\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol simbolo;
    private String nombreClase;
    private int lineaClase;
    private int lineaMetodo;
    private String nombreMetodo;
    private ArrayList<String> listaMetodos = new ArrayList<String>();
    private ArrayList<String> parametros = new ArrayList<String>();
    
    public void syntax_error(Symbol simbolo){
        this.simbolo = simbolo;
    }

    public Symbol getSimbolo(){
        return this.simbolo;
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action_part00000000(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= DECLARAR_CLASE INICIO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= COMENTARIO INICIO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INICIO ::= DECLARAR_CLASE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INICIO ::= COMENTARIO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // COMENTARIO ::= ComentarioLinea 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 ProyectoController.getInstance().addComentario(c); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COMENTARIO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // COMENTARIO ::= Comentario 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 ProyectoController.getInstance().addComentario(c); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COMENTARIO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // BREAK ::= Break1 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BREAK",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // BREAK ::= Break PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BREAK",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // REQUIRE ::= Require ParentesisInicio STRING ParentesisFinal PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("REQUIRE",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // REQUIRE ::= Require ParentesisInicio STRING ParentesisFinal 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("REQUIRE",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // TIPOS_DE_DATOS ::= BOOLEAN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPOS_DE_DATOS",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // TIPOS_DE_DATOS ::= DOUBLE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPOS_DE_DATOS",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // TIPOS_DE_DATOS ::= INTEGER 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPOS_DE_DATOS",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // TIPOS_DE_DATOS ::= STRING 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPOS_DE_DATOS",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // TIPOS_DE_DATOS ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPOS_DE_DATOS",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // TIPOS_DE_DATOS1 ::= BOOLEAN1 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPOS_DE_DATOS1",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // TIPOS_DE_DATOS1 ::= DOUBLE1 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPOS_DE_DATOS1",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // TIPOS_DE_DATOS1 ::= INTEGER1 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPOS_DE_DATOS1",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // TIPOS_DE_DATOS1 ::= STRING1 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPOS_DE_DATOS1",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // TIPOS_DE_DATOS1 ::= Identificador1 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPOS_DE_DATOS1",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // TIPOS_DE_DATOS2 ::= BOOLEAN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPOS_DE_DATOS2",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // TIPOS_DE_DATOS2 ::= DOUBLE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPOS_DE_DATOS2",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // TIPOS_DE_DATOS2 ::= INTEGER 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPOS_DE_DATOS2",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // TIPOS_DE_DATOS2 ::= STRING 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPOS_DE_DATOS2",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // DECLARAR_VAR ::= Var Identificador Igual FINALIZAR_DECLARACION 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		 ProyectoController.getInstance().addVariable(v); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARAR_VAR",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // DECLARAR_VAR ::= Identificador Igual FINALIZAR_DECLARACION 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		 ProyectoController.getInstance().addVariable(v); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARAR_VAR",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // DECLARAR_VAR ::= Var Identificador Igual REQUIRE 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		 ProyectoController.getInstance().addVariable(v); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARAR_VAR",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // DECLARAR_LET ::= Let Identificador Igual FINALIZAR_DECLARACION 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		 ProyectoController.getInstance().addVariable(v); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARAR_LET",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // DECLARAR_LET ::= Identificador Igual FINALIZAR_DECLARACION 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		 ProyectoController.getInstance().addVariable(v); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARAR_LET",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // DECLARAR_LET ::= Let Identificador Igual REQUIRE 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		 ProyectoController.getInstance().addVariable(v); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARAR_LET",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // DECLARAR_LET1 ::= Let Identificador Igual OPERADORES_ARITMETICOS 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		 ProyectoController.getInstance().addVariable(v); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARAR_LET1",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // DECLARAR_LET1 ::= Identificador Igual OPERADORES_ARITMETICOS 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		 ProyectoController.getInstance().addVariable(v); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARAR_LET1",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // DECLARAR_LET2 ::= Let Identificador Igual FINALIZAR_DECLARACION 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		 ProyectoController.getInstance().addVariable(v); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARAR_LET2",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // DECLARAR_LET2 ::= Let Identificador Igual REQUIRE 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		 ProyectoController.getInstance().addVariable(v); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARAR_LET2",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // DECLARAR_CONST ::= Const Identificador Igual FINALIZAR_DECLARACION 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		 ProyectoController.getInstance().addVariable(v); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARAR_CONST",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // DECLARAR_CONST ::= Const Identificador Igual REQUIRE 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		 ProyectoController.getInstance().addVariable(v); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARAR_CONST",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // FINALIZAR_DECLARACION ::= OPERADORES_ARITMETICOS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FINALIZAR_DECLARACION",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // FINALIZAR_DECLARACION ::= OPERADORES_ARITMETICOS PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FINALIZAR_DECLARACION",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // NT$0 ::= 
            {
              Object RESULT =null;
		int lfleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int lfright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object lf = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
 nombreClase = c; lineaClase = lfright; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$0",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // DECLARAR_CLASE ::= Clase Identificador LlaveInicio NT$0 INSTRUCCION 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int lfleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int lfright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object lf = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARAR_CLASE",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // INSTRUCCION ::= DECLARAR_METODO INSTRUCCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // INSTRUCCION ::= LLAMAR_METODO INSTRUCCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // INSTRUCCION ::= SWITCH INSTRUCCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // INSTRUCCION ::= DO INSTRUCCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // INSTRUCCION ::= BREAK INSTRUCCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // INSTRUCCION ::= DECLARAR_VAR INSTRUCCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // INSTRUCCION ::= DECLARAR_LET2 INSTRUCCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // INSTRUCCION ::= DECLARAR_CONST INSTRUCCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // INSTRUCCION ::= FOR INSTRUCCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // INSTRUCCION ::= IF INSTRUCCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // INSTRUCCION ::= WHILE INSTRUCCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // INSTRUCCION ::= CONSOLA INSTRUCCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // INSTRUCCION ::= COMENTARIO INSTRUCCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // INSTRUCCION ::= LlaveFinal 
            {
              Object RESULT =null;
		int lfleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int lfright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object lf = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 ProyectoController.getInstance().addClase(nombreClase, listaMetodos, lfright - lineaClase); listaMetodos = new ArrayList<String>(); nombreClase = ""; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // CONSOLA ::= Consola ParentesisInicio STRING ParentesisFinal PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONSOLA",38, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // NT$1 ::= 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 if(true) parametros.add(p); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$1",40, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // CADENA_IDENTIFICADORES ::= Identificador NT$1 Coma CADENA_IDENTIFICADORES 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CADENA_IDENTIFICADORES",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // NT$2 ::= 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 parametros.add(p); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$2",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // CADENA_IDENTIFICADORES ::= Identificador NT$2 ParentesisFinal 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CADENA_IDENTIFICADORES",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // CADENA_IDENTIFICADORES ::= TIPOS_DE_DATOS2 Coma CADENA_IDENTIFICADORES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CADENA_IDENTIFICADORES",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // CADENA_IDENTIFICADORES ::= TIPOS_DE_DATOS2 ParentesisFinal 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CADENA_IDENTIFICADORES",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // CADENA_IDENTIFICADORES ::= ParentesisFinal 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CADENA_IDENTIFICADORES",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // NT$3 ::= 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		String m = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
 
                    listaMetodos.add(m); nombreMetodo = m; lineaMetodo = mright;
                    ProyectoController.getInstance().setParamentros(parametros);
                    parametros = new ArrayList<String>(); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$3",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // DECLARAR_METODO ::= Identificador ParentesisInicio CADENA_IDENTIFICADORES LlaveInicio NT$3 INSTRUCCION_METODO 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		String m = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARAR_METODO",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // LLAMAR_METODO ::= Identificador ParentesisInicio CADENA_IDENTIFICADORES 
            {
              Object RESULT =null;
		 parametros = new ArrayList<String>(); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LLAMAR_METODO",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // LLAMAR_METODO ::= Identificador ParentesisInicio CADENA_IDENTIFICADORES PuntoComa 
            {
              Object RESULT =null;
		 parametros = new ArrayList<String>(); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LLAMAR_METODO",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // INSTRUCCION_METODO ::= CONSOLA INSTRUCCION_METODO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION_METODO",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // INSTRUCCION_METODO ::= LLAMAR_METODO INSTRUCCION_METODO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION_METODO",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // INSTRUCCION_METODO ::= SWITCH INSTRUCCION_METODO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION_METODO",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // INSTRUCCION_METODO ::= DO INSTRUCCION_METODO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION_METODO",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // INSTRUCCION_METODO ::= BREAK INSTRUCCION_METODO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION_METODO",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // INSTRUCCION_METODO ::= DECLARAR_LET INSTRUCCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION_METODO",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // INSTRUCCION_METODO ::= FOR INSTRUCCION_METODO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION_METODO",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // INSTRUCCION_METODO ::= IF INSTRUCCION_METODO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION_METODO",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // INSTRUCCION_METODO ::= WHILE INSTRUCCION_METODO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION_METODO",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // INSTRUCCION_METODO ::= COMENTARIO INSTRUCCION_METODO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION_METODO",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // INSTRUCCION_METODO ::= LlaveFinal 
            {
              Object RESULT =null;
		int lfleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int lfright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object lf = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 ProyectoController.getInstance().addMetodo(nombreMetodo, lfright - lineaMetodo); parametros = new ArrayList<String>(); nombreMetodo = ""; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION_METODO",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // OPERADORES_ARITMETICOS ::= TIPOS_DE_DATOS OperadorAritmetico OPERADORES_ARITMETICOS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADORES_ARITMETICOS",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // OPERADORES_ARITMETICOS ::= ParentesisInicio OPERADORES_ARITMETICOS ParentesisFinal 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADORES_ARITMETICOS",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // OPERADORES_ARITMETICOS ::= ParentesisInicio OPERADORES_ARITMETICOS ParentesisFinal OperadorAritmetico OPERADORES_ARITMETICOS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADORES_ARITMETICOS",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // OPERADORES_ARITMETICOS ::= TIPOS_DE_DATOS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADORES_ARITMETICOS",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // OPERADORES_ARITMETICOS ::= TIPOS_DE_DATOS1 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADORES_ARITMETICOS",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // OPERADORES_RELACIONALES ::= TIPOS_DE_DATOS OperadorRelacional TIPOS_DE_DATOS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADORES_RELACIONALES",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // OPERADORES_RELACIONALES ::= TIPOS_DE_DATOS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADORES_RELACIONALES",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // OPERADORES_LOGICOS ::= ParentesisInicio OPERADORES_LOGICOS ParentesisFinal OperadorLogico OPERADORES_LOGICOS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADORES_LOGICOS",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // OPERADORES_LOGICOS ::= ParentesisInicio OPERADORES_LOGICOS ParentesisFinal 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADORES_LOGICOS",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // OPERADORES_LOGICOS ::= OPERADORES_RELACIONALES OperadorLogico OPERADORES_LOGICOS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADORES_LOGICOS",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // OPERADORES_LOGICOS ::= OperadorLogicoNot OPERADORES_LOGICOS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADORES_LOGICOS",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // OPERADORES_LOGICOS ::= OPERADORES_RELACIONALES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADORES_LOGICOS",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // IF ::= If ParentesisInicio OPERADORES_LOGICOS ParentesisFinal LlaveInicio INTRUCCION_IF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // INTRUCCION_IF ::= IF INTRUCCION_IF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INTRUCCION_IF",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // INTRUCCION_IF ::= LLAMAR_METODO INTRUCCION_IF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INTRUCCION_IF",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // INTRUCCION_IF ::= SWITCH INTRUCCION_IF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INTRUCCION_IF",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // INTRUCCION_IF ::= DO INTRUCCION_IF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INTRUCCION_IF",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // INTRUCCION_IF ::= BREAK INTRUCCION_IF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INTRUCCION_IF",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // INTRUCCION_IF ::= DECLARAR_LET INTRUCCION_IF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INTRUCCION_IF",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // INTRUCCION_IF ::= FOR INTRUCCION_IF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INTRUCCION_IF",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // INTRUCCION_IF ::= CONSOLA INTRUCCION_IF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INTRUCCION_IF",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // INTRUCCION_IF ::= WHILE INTRUCCION_IF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INTRUCCION_IF",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // INTRUCCION_IF ::= COMENTARIO INTRUCCION_IF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INTRUCCION_IF",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // INTRUCCION_IF ::= LlaveFinal ELSE_IF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INTRUCCION_IF",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // INTRUCCION_IF ::= LlaveFinal ELSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INTRUCCION_IF",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // INTRUCCION_IF ::= LlaveFinal 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INTRUCCION_IF",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // ELSE ::= Else LlaveInicio INTRUCCION_ELSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // INTRUCCION_ELSE ::= IF INTRUCCION_ELSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INTRUCCION_ELSE",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // INTRUCCION_ELSE ::= LLAMAR_METODO INTRUCCION_ELSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INTRUCCION_ELSE",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // INTRUCCION_ELSE ::= SWITCH INTRUCCION_ELSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INTRUCCION_ELSE",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // INTRUCCION_ELSE ::= DO INTRUCCION_ELSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INTRUCCION_ELSE",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // INTRUCCION_ELSE ::= BREAK INTRUCCION_ELSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INTRUCCION_ELSE",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // INTRUCCION_ELSE ::= DECLARAR_LET INTRUCCION_ELSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INTRUCCION_ELSE",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // INTRUCCION_ELSE ::= FOR INTRUCCION_ELSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INTRUCCION_ELSE",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // INTRUCCION_ELSE ::= WHILE INTRUCCION_ELSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INTRUCCION_ELSE",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // INTRUCCION_ELSE ::= CONSOLA INTRUCCION_ELSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INTRUCCION_ELSE",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // INTRUCCION_ELSE ::= COMENTARIO INTRUCCION_ELSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INTRUCCION_ELSE",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // INTRUCCION_ELSE ::= LlaveFinal 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INTRUCCION_ELSE",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // ELSE_IF ::= Else If ParentesisInicio OPERADORES_LOGICOS ParentesisFinal LlaveInicio INTRUCCION_IF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // FOR ::= For ParentesisInicio DECLARAR_LET1 PuntoComa OPERADORES_LOGICOS PuntoComa Identificador OperadorIdentificador ParentesisFinal LlaveInicio INSTRUCCION_CICLOS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // WHILE ::= While ParentesisInicio OPERADORES_LOGICOS ParentesisFinal LlaveInicio INSTRUCCION_CICLOS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WHILE",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // DO ::= Do LlaveInicio INSTRUCCION_CICLOS While ParentesisInicio OPERADORES_LOGICOS ParentesisFinal 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DO",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // DO ::= Do LlaveInicio INSTRUCCION_CICLOS While ParentesisInicio OPERADORES_LOGICOS ParentesisFinal PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DO",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // INSTRUCCION_CICLOS ::= WHILE INSTRUCCION_CICLOS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION_CICLOS",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // INSTRUCCION_CICLOS ::= LLAMAR_METODO INSTRUCCION_CICLOS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION_CICLOS",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // INSTRUCCION_CICLOS ::= SWITCH INSTRUCCION_CICLOS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION_CICLOS",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // INSTRUCCION_CICLOS ::= DO INSTRUCCION_CICLOS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION_CICLOS",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // INSTRUCCION_CICLOS ::= BREAK INSTRUCCION_CICLOS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION_CICLOS",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // INSTRUCCION_CICLOS ::= DECLARAR_LET INSTRUCCION_CICLOS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION_CICLOS",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // INSTRUCCION_CICLOS ::= FOR INSTRUCCION_CICLOS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION_CICLOS",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // INSTRUCCION_CICLOS ::= CONSOLA INSTRUCCION_CICLOS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION_CICLOS",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // INSTRUCCION_CICLOS ::= IF INSTRUCCION_CICLOS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION_CICLOS",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // INSTRUCCION_CICLOS ::= COMENTARIO INSTRUCCION_CICLOS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION_CICLOS",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // INSTRUCCION_CICLOS ::= LlaveFinal 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION_CICLOS",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // SWITCH ::= Switch ParentesisInicio Identificador ParentesisFinal LlaveInicio INSTRUCCION_SWITCH 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SWITCH",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // INSTRUCCION_SWITCH ::= CASE INSTRUCCION_SWITCH 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION_SWITCH",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // INSTRUCCION_SWITCH ::= DEFAULT INSTRUCCION_SWITCH 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION_SWITCH",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // INSTRUCCION_SWITCH ::= COMENTARIO INSTRUCCION_SWITCH 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION_SWITCH",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // INSTRUCCION_SWITCH ::= LlaveFinal 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION_SWITCH",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // CASE ::= Case TIPOS_DE_DATOS2 DosPuntos INSTRUCCION_CASE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CASE",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // DEFAULT ::= Default DosPuntos INSTRUCCION_DEFAULT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DEFAULT",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // INSTRUCCION_CASE ::= CASE INSTRUCCION_CASE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION_CASE",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // INSTRUCCION_CASE ::= LLAMAR_METODO INSTRUCCION_CASE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION_CASE",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // INSTRUCCION_CASE ::= WHILE INSTRUCCION_CASE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION_CASE",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // INSTRUCCION_CASE ::= SWITCH INSTRUCCION_CASE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION_CASE",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // INSTRUCCION_CASE ::= DO INSTRUCCION_CASE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION_CASE",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // INSTRUCCION_CASE ::= DECLARAR_LET INSTRUCCION_CASE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION_CASE",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // INSTRUCCION_CASE ::= FOR INSTRUCCION_CASE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION_CASE",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // INSTRUCCION_CASE ::= CONSOLA INSTRUCCION_CASE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION_CASE",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // INSTRUCCION_CASE ::= IF INSTRUCCION_CASE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION_CASE",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // INSTRUCCION_CASE ::= COMENTARIO INSTRUCCION_CASE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION_CASE",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // INSTRUCCION_CASE ::= BREAK 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION_CASE",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // INSTRUCCION_DEFAULT ::= WHILE INSTRUCCION_DEFAULT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION_DEFAULT",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // INSTRUCCION_DEFAULT ::= LLAMAR_METODO INSTRUCCION_DEFAULT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION_DEFAULT",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // INSTRUCCION_DEFAULT ::= SWITCH INSTRUCCION_DEFAULT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION_DEFAULT",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // INSTRUCCION_DEFAULT ::= DO INSTRUCCION_DEFAULT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION_DEFAULT",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // INSTRUCCION_DEFAULT ::= DECLARAR_LET INSTRUCCION_DEFAULT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION_DEFAULT",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // INSTRUCCION_DEFAULT ::= FOR INSTRUCCION_DEFAULT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION_DEFAULT",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // INSTRUCCION_DEFAULT ::= CONSOLA INSTRUCCION_DEFAULT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION_DEFAULT",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // INSTRUCCION_DEFAULT ::= IF INSTRUCCION_DEFAULT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION_DEFAULT",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // INSTRUCCION_DEFAULT ::= COMENTARIO INSTRUCCION_DEFAULT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION_DEFAULT",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // INSTRUCCION_DEFAULT ::= BREAK 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION_DEFAULT",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sintax$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
              return CUP$Sintax$do_action_part00000000(
                               CUP$Sintax$act_num,
                               CUP$Sintax$parser,
                               CUP$Sintax$stack,
                               CUP$Sintax$top);
    }
}

}
