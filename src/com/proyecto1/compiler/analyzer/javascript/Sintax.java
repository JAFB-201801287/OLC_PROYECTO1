
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.proyecto1.compiler.analyzer.javascript;

import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Sintax extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\205\000\002\002\004\000\002\002\003\000\002\003" +
    "\003\000\002\003\004\000\002\004\007\000\002\004\006" +
    "\000\002\005\003\000\002\005\003\000\002\005\003\000" +
    "\002\005\003\000\002\005\003\000\002\006\003\000\002" +
    "\006\003\000\002\006\003\000\002\006\003\000\002\006" +
    "\003\000\002\007\003\000\002\007\003\000\002\007\003" +
    "\000\002\007\003\000\002\021\006\000\002\021\005\000" +
    "\002\021\006\000\002\022\006\000\002\022\005\000\002" +
    "\022\006\000\002\023\006\000\002\023\005\000\002\024" +
    "\006\000\002\024\006\000\002\025\006\000\002\025\006" +
    "\000\002\026\003\000\002\026\004\000\002\010\006\000" +
    "\002\011\004\000\002\011\004\000\002\011\004\000\002" +
    "\011\004\000\002\011\004\000\002\011\004\000\002\011" +
    "\004\000\002\011\004\000\002\011\004\000\002\011\004" +
    "\000\002\011\004\000\002\011\003\000\002\011\004\000" +
    "\002\046\007\000\002\012\005\000\002\012\004\000\002" +
    "\012\003\000\002\013\007\000\002\020\004\000\002\020" +
    "\004\000\002\020\004\000\002\020\004\000\002\020\004" +
    "\000\002\020\004\000\002\020\004\000\002\020\004\000" +
    "\002\020\003\000\002\014\005\000\002\014\005\000\002" +
    "\014\007\000\002\014\003\000\002\014\003\000\002\016" +
    "\005\000\002\016\003\000\002\017\007\000\002\017\005" +
    "\000\002\017\005\000\002\017\004\000\002\017\003\000" +
    "\002\027\010\000\002\030\004\000\002\030\004\000\002" +
    "\030\004\000\002\030\004\000\002\030\004\000\002\030" +
    "\004\000\002\030\004\000\002\030\004\000\002\030\004" +
    "\000\002\030\004\000\002\030\003\000\002\031\005\000" +
    "\002\032\004\000\002\032\004\000\002\032\004\000\002" +
    "\032\004\000\002\032\004\000\002\032\004\000\002\032" +
    "\004\000\002\032\004\000\002\032\003\000\002\033\011" +
    "\000\002\034\015\000\002\036\010\000\002\045\011\000" +
    "\002\045\012\000\002\035\004\000\002\035\004\000\002" +
    "\035\004\000\002\035\004\000\002\035\004\000\002\035" +
    "\004\000\002\035\004\000\002\035\004\000\002\035\003" +
    "\000\002\037\010\000\002\044\004\000\002\044\004\000" +
    "\002\044\003\000\002\040\006\000\002\041\005\000\002" +
    "\042\004\000\002\042\004\000\002\042\004\000\002\042" +
    "\004\000\002\042\004\000\002\042\004\000\002\042\004" +
    "\000\002\042\004\000\002\042\003\000\002\043\004\000" +
    "\002\043\004\000\002\043\004\000\002\043\004\000\002" +
    "\043\004\000\002\043\004\000\002\043\004\000\002\043" +
    "\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u011d\000\004\021\005\001\002\000\004\002\000\001" +
    "\002\000\004\053\010\001\002\000\004\002\007\001\002" +
    "\000\004\002\001\001\002\000\004\010\011\001\002\000" +
    "\034\011\014\023\015\024\042\025\025\026\034\030\013" +
    "\031\036\032\041\033\035\036\024\037\020\040\037\053" +
    "\022\001\002\000\036\002\uffdf\011\uffdf\023\uffdf\024\uffdf" +
    "\025\uffdf\026\uffdf\030\uffdf\031\uffdf\032\uffdf\033\uffdf\036" +
    "\uffdf\037\uffdf\040\uffdf\053\uffdf\001\002\000\004\006\u010f" +
    "\001\002\000\040\002\uffd3\011\uffd3\021\005\023\uffd3\024" +
    "\uffd3\025\uffd3\026\uffd3\030\uffd3\031\uffd3\032\uffd3\033\uffd3" +
    "\036\uffd3\037\uffd3\040\uffd3\053\uffd3\001\002\000\004\053" +
    "\u010a\001\002\000\034\011\014\023\015\024\042\025\025" +
    "\026\034\030\013\031\036\032\041\033\035\036\024\037" +
    "\020\040\037\053\022\001\002\000\034\011\014\023\015" +
    "\024\042\025\025\026\034\030\013\031\036\032\041\033" +
    "\035\036\024\037\020\040\037\053\022\001\002\000\004" +
    "\012\u0107\001\002\000\034\011\014\023\015\024\042\025" +
    "\025\026\034\030\013\031\036\032\041\033\035\036\024" +
    "\037\020\040\037\053\022\001\002\000\006\005\353\006" +
    "\352\001\002\000\034\011\014\023\015\024\042\025\025" +
    "\026\034\030\013\031\036\032\041\033\035\036\024\037" +
    "\020\040\037\053\022\001\002\000\004\006\345\001\002" +
    "\000\004\053\341\001\002\000\034\011\014\023\015\024" +
    "\042\025\025\026\034\030\013\031\036\032\041\033\035" +
    "\036\024\037\020\040\037\053\022\001\002\000\034\011" +
    "\014\023\015\024\042\025\025\026\034\030\013\031\036" +
    "\032\041\033\035\036\024\037\020\040\037\053\022\001" +
    "\002\000\034\011\014\023\015\024\042\025\025\026\034" +
    "\030\013\031\036\032\041\033\035\036\024\037\020\040" +
    "\037\053\022\001\002\000\034\011\014\023\015\024\042" +
    "\025\025\026\034\030\013\031\036\032\041\033\035\036" +
    "\024\037\020\040\037\053\022\001\002\000\034\011\014" +
    "\023\015\024\042\025\025\026\034\030\013\031\036\032" +
    "\041\033\035\036\024\037\020\040\037\053\022\001\002" +
    "\000\034\011\014\023\015\024\042\025\025\026\034\030" +
    "\013\031\036\032\041\033\035\036\024\037\020\040\037" +
    "\053\022\001\002\000\004\006\251\001\002\000\004\006" +
    "\164\001\002\000\004\010\155\001\002\000\040\011\uffff" +
    "\023\uffff\024\uffff\025\uffff\026\uffff\030\uffff\031\uffff\032" +
    "\uffff\033\uffff\034\uffff\035\uffff\036\uffff\037\uffff\040\uffff" +
    "\053\uffff\001\002\000\034\011\014\023\015\024\042\025" +
    "\025\026\034\030\013\031\036\032\041\033\035\036\024" +
    "\037\020\040\037\053\022\001\002\000\004\006\101\001" +
    "\002\000\004\053\043\001\002\000\004\005\044\001\002" +
    "\000\032\006\047\041\065\042\050\043\055\044\056\045" +
    "\064\046\045\047\062\050\052\051\061\052\051\053\060" +
    "\001\002\000\050\007\ufff9\011\ufff9\012\ufff9\015\ufff9\016" +
    "\ufff9\020\ufff9\023\ufff9\024\ufff9\025\ufff9\026\ufff9\030\ufff9" +
    "\031\ufff9\032\ufff9\033\ufff9\034\ufff9\036\ufff9\037\ufff9\040" +
    "\ufff9\053\ufff9\001\002\000\042\007\uffbf\011\uffbf\012\uffbf" +
    "\023\uffbf\024\uffbf\025\uffbf\026\uffbf\030\uffbf\031\uffbf\032" +
    "\uffbf\033\uffbf\034\uffbf\036\uffbf\037\uffbf\040\uffbf\053\uffbf" +
    "\001\002\000\030\006\047\042\050\043\055\044\056\045" +
    "\064\046\045\047\062\050\052\051\061\052\051\053\060" +
    "\001\002\000\050\007\ufffb\011\ufffb\012\ufffb\015\ufffb\016" +
    "\ufffb\020\ufffb\023\ufffb\024\ufffb\025\ufffb\026\ufffb\030\ufffb" +
    "\031\ufffb\032\ufffb\033\ufffb\034\ufffb\036\ufffb\037\ufffb\040" +
    "\ufffb\053\ufffb\001\002\000\042\007\ufff2\011\ufff2\012\ufff2" +
    "\023\ufff2\024\ufff2\025\ufff2\026\ufff2\030\ufff2\031\ufff2\032" +
    "\ufff2\033\ufff2\034\ufff2\036\ufff2\037\ufff2\040\ufff2\053\ufff2" +
    "\001\002\000\050\007\ufff8\011\ufff8\012\ufff8\015\ufff8\016" +
    "\ufff8\020\ufff8\023\ufff8\024\ufff8\025\ufff8\026\ufff8\030\ufff8" +
    "\031\ufff8\032\ufff8\033\ufff8\034\ufff8\036\ufff8\037\ufff8\040" +
    "\ufff8\053\ufff8\001\002\000\034\011\uffe5\023\uffe5\024\uffe5" +
    "\025\uffe5\026\uffe5\030\uffe5\031\uffe5\032\uffe5\033\uffe5\036" +
    "\uffe5\037\uffe5\040\uffe5\053\uffe5\001\002\000\040\011\uffe1" +
    "\012\074\023\uffe1\024\uffe1\025\uffe1\026\uffe1\030\uffe1\031" +
    "\uffe1\032\uffe1\033\uffe1\034\uffe1\036\uffe1\037\uffe1\040\uffe1" +
    "\053\uffe1\001\002\000\042\007\ufff6\011\ufff6\012\ufff6\023" +
    "\ufff6\024\ufff6\025\ufff6\026\ufff6\030\ufff6\031\ufff6\032\ufff6" +
    "\033\ufff6\034\ufff6\036\ufff6\037\ufff6\040\ufff6\053\ufff6\001" +
    "\002\000\050\007\ufffa\011\ufffa\012\ufffa\015\ufffa\016\ufffa" +
    "\020\ufffa\023\ufffa\024\ufffa\025\ufffa\026\ufffa\030\ufffa\031" +
    "\ufffa\032\ufffa\033\ufffa\034\ufffa\036\ufffa\037\ufffa\040\ufffa" +
    "\053\ufffa\001\002\000\034\011\uffe4\023\uffe4\024\uffe4\025" +
    "\uffe4\026\uffe4\030\uffe4\031\uffe4\032\uffe4\033\uffe4\036\uffe4" +
    "\037\uffe4\040\uffe4\053\uffe4\001\002\000\050\007\ufff7\011" +
    "\ufff7\012\ufff7\015\ufff7\016\ufff7\020\ufff7\023\ufff7\024\ufff7" +
    "\025\ufff7\026\ufff7\030\ufff7\031\ufff7\032\ufff7\033\ufff7\034" +
    "\ufff7\036\ufff7\037\ufff7\040\ufff7\053\ufff7\001\002\000\042" +
    "\007\ufff3\011\ufff3\012\ufff3\023\ufff3\024\ufff3\025\ufff3\026" +
    "\ufff3\030\ufff3\031\ufff3\032\ufff3\033\ufff3\034\ufff3\036\ufff3" +
    "\037\ufff3\040\ufff3\053\ufff3\001\002\000\042\007\ufff4\011" +
    "\ufff4\012\ufff4\023\ufff4\024\ufff4\025\ufff4\026\ufff4\030\ufff4" +
    "\031\ufff4\032\ufff4\033\ufff4\034\ufff4\036\ufff4\037\ufff4\040" +
    "\ufff4\053\ufff4\001\002\000\044\007\uffc0\011\uffc0\012\uffc0" +
    "\020\072\023\uffc0\024\uffc0\025\uffc0\026\uffc0\030\uffc0\031" +
    "\uffc0\032\uffc0\033\uffc0\034\uffc0\036\uffc0\037\uffc0\040\uffc0" +
    "\053\uffc0\001\002\000\042\007\ufff5\011\ufff5\012\ufff5\023" +
    "\ufff5\024\ufff5\025\ufff5\026\ufff5\030\ufff5\031\ufff5\032\ufff5" +
    "\033\ufff5\034\ufff5\036\ufff5\037\ufff5\040\ufff5\053\ufff5\001" +
    "\002\000\004\006\066\001\002\000\004\050\067\001\002" +
    "\000\004\007\070\001\002\000\040\011\ufffc\012\071\023" +
    "\ufffc\024\ufffc\025\ufffc\026\ufffc\030\ufffc\031\ufffc\032\ufffc" +
    "\033\ufffc\034\ufffc\036\ufffc\037\ufffc\040\ufffc\053\ufffc\001" +
    "\002\000\036\011\ufffd\023\ufffd\024\ufffd\025\ufffd\026\ufffd" +
    "\030\ufffd\031\ufffd\032\ufffd\033\ufffd\034\ufffd\036\ufffd\037" +
    "\ufffd\040\ufffd\053\ufffd\001\002\000\030\006\047\042\050" +
    "\043\055\044\056\045\064\046\045\047\062\050\052\051" +
    "\061\052\051\053\060\001\002\000\042\007\uffc3\011\uffc3" +
    "\012\uffc3\023\uffc3\024\uffc3\025\uffc3\026\uffc3\030\uffc3\031" +
    "\uffc3\032\uffc3\033\uffc3\034\uffc3\036\uffc3\037\uffc3\040\uffc3" +
    "\053\uffc3\001\002\000\036\011\uffe0\023\uffe0\024\uffe0\025" +
    "\uffe0\026\uffe0\030\uffe0\031\uffe0\032\uffe0\033\uffe0\034\uffe0" +
    "\036\uffe0\037\uffe0\040\uffe0\053\uffe0\001\002\000\004\007" +
    "\076\001\002\000\044\007\uffc2\011\uffc2\012\uffc2\020\077" +
    "\023\uffc2\024\uffc2\025\uffc2\026\uffc2\030\uffc2\031\uffc2\032" +
    "\uffc2\033\uffc2\034\uffc2\036\uffc2\037\uffc2\040\uffc2\053\uffc2" +
    "\001\002\000\030\006\047\042\050\043\055\044\056\045" +
    "\064\046\045\047\062\050\052\051\061\052\051\053\060" +
    "\001\002\000\042\007\uffc1\011\uffc1\012\uffc1\023\uffc1\024" +
    "\uffc1\025\uffc1\026\uffc1\030\uffc1\031\uffc1\032\uffc1\033\uffc1" +
    "\034\uffc1\036\uffc1\037\uffc1\040\uffc1\053\uffc1\001\002\000" +
    "\020\006\104\017\105\042\050\044\056\046\045\050\052" +
    "\053\060\001\002\000\004\007\120\001\002\000\010\007" +
    "\uffb8\012\uffb8\016\116\001\002\000\020\006\104\017\105" +
    "\042\050\044\056\046\045\050\052\053\060\001\002\000" +
    "\020\006\104\017\105\042\050\044\056\046\045\050\052" +
    "\053\060\001\002\000\012\007\uffbd\012\uffbd\015\107\016" +
    "\uffbd\001\002\000\014\042\050\044\056\046\045\050\052" +
    "\053\060\001\002\000\010\007\uffbe\012\uffbe\016\uffbe\001" +
    "\002\000\006\007\uffb9\012\uffb9\001\002\000\004\007\113" +
    "\001\002\000\010\007\uffbb\012\uffbb\016\114\001\002\000" +
    "\020\006\104\017\105\042\050\044\056\046\045\050\052" +
    "\053\060\001\002\000\006\007\uffbc\012\uffbc\001\002\000" +
    "\020\006\104\017\105\042\050\044\056\046\045\050\052" +
    "\053\060\001\002\000\006\007\uffba\012\uffba\001\002\000" +
    "\004\010\121\001\002\000\030\011\122\024\135\026\034" +
    "\030\013\031\036\032\041\033\035\036\024\037\020\040" +
    "\037\053\125\001\002\000\036\011\uff94\023\uff94\024\uff94" +
    "\025\uff94\026\uff94\030\uff94\031\uff94\032\uff94\033\uff94\034" +
    "\uff94\036\uff94\037\uff94\040\uff94\053\uff94\001\002\000\030" +
    "\011\122\024\135\026\034\030\013\031\036\032\041\033" +
    "\035\036\024\037\020\040\037\053\125\001\002\000\030" +
    "\011\122\024\135\026\034\030\013\031\036\032\041\033" +
    "\035\036\024\037\020\040\037\053\125\001\002\000\004" +
    "\005\150\001\002\000\030\011\122\024\135\026\034\030" +
    "\013\031\036\032\041\033\035\036\024\037\020\040\037" +
    "\053\125\001\002\000\030\011\122\024\135\026\034\030" +
    "\013\031\036\032\041\033\035\036\024\037\020\040\037" +
    "\053\125\001\002\000\030\011\122\024\135\026\034\030" +
    "\013\031\036\032\041\033\035\036\024\037\020\040\037" +
    "\053\125\001\002\000\030\011\122\024\135\026\034\030" +
    "\013\031\036\032\041\033\035\036\024\037\020\040\037" +
    "\053\125\001\002\000\030\011\122\024\135\026\034\030" +
    "\013\031\036\032\041\033\035\036\024\037\020\040\037" +
    "\053\125\001\002\000\030\011\122\024\135\026\034\030" +
    "\013\031\036\032\041\033\035\036\024\037\020\040\037" +
    "\053\125\001\002\000\036\011\uff9f\023\uff9f\024\uff9f\025" +
    "\uff9f\026\uff9f\030\uff9f\031\uff9f\032\uff9f\033\uff9f\034\uff9f" +
    "\036\uff9f\037\uff9f\040\uff9f\053\uff9f\001\002\000\004\053" +
    "\136\001\002\000\004\005\137\001\002\000\032\006\047" +
    "\041\065\042\050\043\055\044\056\045\064\046\045\047" +
    "\062\050\052\051\061\052\051\053\060\001\002\000\036" +
    "\011\uffea\023\uffea\024\uffea\025\uffea\026\uffea\030\uffea\031" +
    "\uffea\032\uffea\033\uffea\034\uffea\036\uffea\037\uffea\040\uffea" +
    "\053\uffea\001\002\000\036\011\uffe8\023\uffe8\024\uffe8\025" +
    "\uffe8\026\uffe8\030\uffe8\031\uffe8\032\uffe8\033\uffe8\034\uffe8" +
    "\036\uffe8\037\uffe8\040\uffe8\053\uffe8\001\002\000\036\011" +
    "\uff97\023\uff97\024\uff97\025\uff97\026\uff97\030\uff97\031\uff97" +
    "\032\uff97\033\uff97\034\uff97\036\uff97\037\uff97\040\uff97\053" +
    "\uff97\001\002\000\036\011\uff99\023\uff99\024\uff99\025\uff99" +
    "\026\uff99\030\uff99\031\uff99\032\uff99\033\uff99\034\uff99\036" +
    "\uff99\037\uff99\040\uff99\053\uff99\001\002\000\036\011\uff9a" +
    "\023\uff9a\024\uff9a\025\uff9a\026\uff9a\030\uff9a\031\uff9a\032" +
    "\uff9a\033\uff9a\034\uff9a\036\uff9a\037\uff9a\040\uff9a\053\uff9a" +
    "\001\002\000\036\011\uff96\023\uff96\024\uff96\025\uff96\026" +
    "\uff96\030\uff96\031\uff96\032\uff96\033\uff96\034\uff96\036\uff96" +
    "\037\uff96\040\uff96\053\uff96\001\002\000\036\011\uff98\023" +
    "\uff98\024\uff98\025\uff98\026\uff98\030\uff98\031\uff98\032\uff98" +
    "\033\uff98\034\uff98\036\uff98\037\uff98\040\uff98\053\uff98\001" +
    "\002\000\036\011\uff95\023\uff95\024\uff95\025\uff95\026\uff95" +
    "\030\uff95\031\uff95\032\uff95\033\uff95\034\uff95\036\uff95\037" +
    "\uff95\040\uff95\053\uff95\001\002\000\030\006\047\042\050" +
    "\043\055\044\056\045\064\046\045\047\062\050\052\051" +
    "\061\052\051\053\060\001\002\000\036\011\uffe9\023\uffe9" +
    "\024\uffe9\025\uffe9\026\uffe9\030\uffe9\031\uffe9\032\uffe9\033" +
    "\uffe9\034\uffe9\036\uffe9\037\uffe9\040\uffe9\053\uffe9\001\002" +
    "\000\036\011\uff9b\023\uff9b\024\uff9b\025\uff9b\026\uff9b\030" +
    "\uff9b\031\uff9b\032\uff9b\033\uff9b\034\uff9b\036\uff9b\037\uff9b" +
    "\040\uff9b\053\uff9b\001\002\000\036\011\uff9c\023\uff9c\024" +
    "\uff9c\025\uff9c\026\uff9c\030\uff9c\031\uff9c\032\uff9c\033\uff9c" +
    "\034\uff9c\036\uff9c\037\uff9c\040\uff9c\053\uff9c\001\002\000" +
    "\036\002\uffd7\011\uffd7\023\uffd7\024\uffd7\025\uffd7\026\uffd7" +
    "\030\uffd7\031\uffd7\032\uffd7\033\uffd7\036\uffd7\037\uffd7\040" +
    "\uffd7\053\uffd7\001\002\000\030\011\122\024\135\026\034" +
    "\030\013\031\036\032\041\033\035\036\024\037\020\040" +
    "\037\053\125\001\002\000\004\032\157\001\002\000\004" +
    "\006\160\001\002\000\020\006\104\017\105\042\050\044" +
    "\056\046\045\050\052\053\060\001\002\000\004\007\162" +
    "\001\002\000\040\011\uff9e\012\163\023\uff9e\024\uff9e\025" +
    "\uff9e\026\uff9e\030\uff9e\031\uff9e\032\uff9e\033\uff9e\034\uff9e" +
    "\036\uff9e\037\uff9e\040\uff9e\053\uff9e\001\002\000\036\011" +
    "\uff9d\023\uff9d\024\uff9d\025\uff9d\026\uff9d\030\uff9d\031\uff9d" +
    "\032\uff9d\033\uff9d\034\uff9d\036\uff9d\037\uff9d\040\uff9d\053" +
    "\uff9d\001\002\000\004\053\165\001\002\000\004\007\166" +
    "\001\002\000\004\010\167\001\002\000\010\011\173\034" +
    "\171\035\172\001\002\000\010\011\173\034\171\035\172" +
    "\001\002\000\012\042\224\044\222\046\220\050\223\001" +
    "\002\000\004\013\177\001\002\000\036\011\uff90\023\uff90" +
    "\024\uff90\025\uff90\026\uff90\030\uff90\031\uff90\032\uff90\033" +
    "\uff90\034\uff90\036\uff90\037\uff90\040\uff90\053\uff90\001\002" +
    "\000\036\011\uff93\023\uff93\024\uff93\025\uff93\026\uff93\030" +
    "\uff93\031\uff93\032\uff93\033\uff93\034\uff93\036\uff93\037\uff93" +
    "\040\uff93\053\uff93\001\002\000\010\011\173\034\171\035" +
    "\172\001\002\000\036\011\uff92\023\uff92\024\uff92\025\uff92" +
    "\026\uff92\030\uff92\031\uff92\032\uff92\033\uff92\034\uff92\036" +
    "\uff92\037\uff92\040\uff92\053\uff92\001\002\000\026\024\135" +
    "\026\034\030\013\031\036\032\041\033\035\036\024\037" +
    "\020\040\037\053\125\001\002\000\026\024\135\026\034" +
    "\030\013\031\036\032\041\033\035\036\024\037\020\040" +
    "\037\053\125\001\002\000\026\024\135\026\034\030\013" +
    "\031\036\032\041\033\035\036\024\037\020\040\037\053" +
    "\125\001\002\000\026\024\135\026\034\030\013\031\036" +
    "\032\041\033\035\036\024\037\020\040\037\053\125\001" +
    "\002\000\026\024\135\026\034\030\013\031\036\032\041" +
    "\033\035\036\024\037\020\040\037\053\125\001\002\000" +
    "\026\024\135\026\034\030\013\031\036\032\041\033\035" +
    "\036\024\037\020\040\037\053\125\001\002\000\026\024" +
    "\135\026\034\030\013\031\036\032\041\033\035\036\024" +
    "\037\020\040\037\053\125\001\002\000\010\011\uff7d\034" +
    "\uff7d\035\uff7d\001\002\000\026\024\135\026\034\030\013" +
    "\031\036\032\041\033\035\036\024\037\020\040\037\053" +
    "\125\001\002\000\010\011\uff8e\034\uff8e\035\uff8e\001\002" +
    "\000\010\011\uff80\034\uff80\035\uff80\001\002\000\010\011" +
    "\uff82\034\uff82\035\uff82\001\002\000\010\011\uff7f\034\uff7f" +
    "\035\uff7f\001\002\000\010\011\uff81\034\uff81\035\uff81\001" +
    "\002\000\010\011\uff7e\034\uff7e\035\uff7e\001\002\000\010" +
    "\011\uff83\034\uff83\035\uff83\001\002\000\010\011\uff84\034" +
    "\uff84\035\uff84\001\002\000\004\013\uffef\001\002\000\004" +
    "\013\225\001\002\000\004\013\ufff0\001\002\000\004\013" +
    "\uffee\001\002\000\004\013\ufff1\001\002\000\030\024\135" +
    "\026\034\030\013\031\036\032\041\033\035\034\171\036" +
    "\024\037\020\040\037\053\125\001\002\000\030\024\135" +
    "\026\034\030\013\031\036\032\041\033\035\034\171\036" +
    "\024\037\020\040\037\053\125\001\002\000\030\024\135" +
    "\026\034\030\013\031\036\032\041\033\035\034\171\036" +
    "\024\037\020\040\037\053\125\001\002\000\030\024\135" +
    "\026\034\030\013\031\036\032\041\033\035\034\171\036" +
    "\024\037\020\040\037\053\125\001\002\000\030\024\135" +
    "\026\034\030\013\031\036\032\041\033\035\034\171\036" +
    "\024\037\020\040\037\053\125\001\002\000\030\024\135" +
    "\026\034\030\013\031\036\032\041\033\035\034\171\036" +
    "\024\037\020\040\037\053\125\001\002\000\030\024\135" +
    "\026\034\030\013\031\036\032\041\033\035\034\171\036" +
    "\024\037\020\040\037\053\125\001\002\000\034\011\uff85" +
    "\024\uff85\026\uff85\030\uff85\031\uff85\032\uff85\033\uff85\034" +
    "\uff85\035\uff85\036\uff85\037\uff85\040\uff85\053\uff85\001\002" +
    "\000\030\024\135\026\034\030\013\031\036\032\041\033" +
    "\035\034\171\036\024\037\020\040\037\053\125\001\002" +
    "\000\034\011\uff8f\024\uff8f\026\uff8f\030\uff8f\031\uff8f\032" +
    "\uff8f\033\uff8f\034\uff8f\035\uff8f\036\uff8f\037\uff8f\040\uff8f" +
    "\053\uff8f\001\002\000\030\024\135\026\034\030\013\031" +
    "\036\032\041\033\035\034\171\036\024\037\020\040\037" +
    "\053\125\001\002\000\034\011\uff88\024\uff88\026\uff88\030" +
    "\uff88\031\uff88\032\uff88\033\uff88\034\uff88\035\uff88\036\uff88" +
    "\037\uff88\040\uff88\053\uff88\001\002\000\034\011\uff8d\024" +
    "\uff8d\026\uff8d\030\uff8d\031\uff8d\032\uff8d\033\uff8d\034\uff8d" +
    "\035\uff8d\036\uff8d\037\uff8d\040\uff8d\053\uff8d\001\002\000" +
    "\034\011\uff8a\024\uff8a\026\uff8a\030\uff8a\031\uff8a\032\uff8a" +
    "\033\uff8a\034\uff8a\035\uff8a\036\uff8a\037\uff8a\040\uff8a\053" +
    "\uff8a\001\002\000\034\011\uff87\024\uff87\026\uff87\030\uff87" +
    "\031\uff87\032\uff87\033\uff87\034\uff87\035\uff87\036\uff87\037" +
    "\uff87\040\uff87\053\uff87\001\002\000\034\011\uff89\024\uff89" +
    "\026\uff89\030\uff89\031\uff89\032\uff89\033\uff89\034\uff89\035" +
    "\uff89\036\uff89\037\uff89\040\uff89\053\uff89\001\002\000\034" +
    "\011\uff86\024\uff86\026\uff86\030\uff86\031\uff86\032\uff86\033" +
    "\uff86\034\uff86\035\uff86\036\uff86\037\uff86\040\uff86\053\uff86" +
    "\001\002\000\034\011\uff8b\024\uff8b\026\uff8b\030\uff8b\031" +
    "\uff8b\032\uff8b\033\uff8b\034\uff8b\035\uff8b\036\uff8b\037\uff8b" +
    "\040\uff8b\053\uff8b\001\002\000\034\011\uff8c\024\uff8c\026" +
    "\uff8c\030\uff8c\031\uff8c\032\uff8c\033\uff8c\034\uff8c\035\uff8c" +
    "\036\uff8c\037\uff8c\040\uff8c\053\uff8c\001\002\000\036\011" +
    "\uff91\023\uff91\024\uff91\025\uff91\026\uff91\030\uff91\031\uff91" +
    "\032\uff91\033\uff91\034\uff91\036\uff91\037\uff91\040\uff91\053" +
    "\uff91\001\002\000\020\006\104\017\105\042\050\044\056" +
    "\046\045\050\052\053\060\001\002\000\004\007\253\001" +
    "\002\000\004\010\254\001\002\000\030\011\255\024\135" +
    "\026\034\030\013\031\036\032\041\033\035\036\024\037" +
    "\020\040\037\053\125\001\002\000\040\011\uffac\023\uffac" +
    "\024\uffac\025\uffac\026\uffac\027\300\030\uffac\031\uffac\032" +
    "\uffac\033\uffac\034\uffac\036\uffac\037\uffac\040\uffac\053\uffac" +
    "\001\002\000\030\011\255\024\135\026\034\030\013\031" +
    "\036\032\041\033\035\036\024\037\020\040\037\053\125" +
    "\001\002\000\030\011\255\024\135\026\034\030\013\031" +
    "\036\032\041\033\035\036\024\037\020\040\037\053\125" +
    "\001\002\000\030\011\255\024\135\026\034\030\013\031" +
    "\036\032\041\033\035\036\024\037\020\040\037\053\125" +
    "\001\002\000\030\011\255\024\135\026\034\030\013\031" +
    "\036\032\041\033\035\036\024\037\020\040\037\053\125" +
    "\001\002\000\030\011\255\024\135\026\034\030\013\031" +
    "\036\032\041\033\035\036\024\037\020\040\037\053\125" +
    "\001\002\000\036\011\uffb7\023\uffb7\024\uffb7\025\uffb7\026" +
    "\uffb7\030\uffb7\031\uffb7\032\uffb7\033\uffb7\034\uffb7\036\uffb7" +
    "\037\uffb7\040\uffb7\053\uffb7\001\002\000\030\011\255\024" +
    "\135\026\034\030\013\031\036\032\041\033\035\036\024" +
    "\037\020\040\037\053\125\001\002\000\030\011\255\024" +
    "\135\026\034\030\013\031\036\032\041\033\035\036\024" +
    "\037\020\040\037\053\125\001\002\000\030\011\255\024" +
    "\135\026\034\030\013\031\036\032\041\033\035\036\024" +
    "\037\020\040\037\053\125\001\002\000\036\011\uffb1\023" +
    "\uffb1\024\uffb1\025\uffb1\026\uffb1\030\uffb1\031\uffb1\032\uffb1" +
    "\033\uffb1\034\uffb1\036\uffb1\037\uffb1\040\uffb1\053\uffb1\001" +
    "\002\000\036\011\uffb3\023\uffb3\024\uffb3\025\uffb3\026\uffb3" +
    "\030\uffb3\031\uffb3\032\uffb3\033\uffb3\034\uffb3\036\uffb3\037" +
    "\uffb3\040\uffb3\053\uffb3\001\002\000\036\011\uffb4\023\uffb4" +
    "\024\uffb4\025\uffb4\026\uffb4\030\uffb4\031\uffb4\032\uffb4\033" +
    "\uffb4\034\uffb4\036\uffb4\037\uffb4\040\uffb4\053\uffb4\001\002" +
    "\000\036\011\uffb0\023\uffb0\024\uffb0\025\uffb0\026\uffb0\030" +
    "\uffb0\031\uffb0\032\uffb0\033\uffb0\034\uffb0\036\uffb0\037\uffb0" +
    "\040\uffb0\053\uffb0\001\002\000\036\011\uffb2\023\uffb2\024" +
    "\uffb2\025\uffb2\026\uffb2\030\uffb2\031\uffb2\032\uffb2\033\uffb2" +
    "\034\uffb2\036\uffb2\037\uffb2\040\uffb2\053\uffb2\001\002\000" +
    "\036\011\uffb6\023\uffb6\024\uffb6\025\uffb6\026\uffb6\030\uffb6" +
    "\031\uffb6\032\uffb6\033\uffb6\034\uffb6\036\uffb6\037\uffb6\040" +
    "\uffb6\053\uffb6\001\002\000\036\011\uffb5\023\uffb5\024\uffb5" +
    "\025\uffb5\026\uffb5\030\uffb5\031\uffb5\032\uffb5\033\uffb5\034" +
    "\uffb5\036\uffb5\037\uffb5\040\uffb5\053\uffb5\001\002\000\036" +
    "\011\uffaf\023\uffaf\024\uffaf\025\uffaf\026\uffaf\030\uffaf\031" +
    "\uffaf\032\uffaf\033\uffaf\034\uffaf\036\uffaf\037\uffaf\040\uffaf" +
    "\053\uffaf\001\002\000\036\011\uffad\023\uffad\024\uffad\025" +
    "\uffad\026\uffad\030\uffad\031\uffad\032\uffad\033\uffad\034\uffad" +
    "\036\uffad\037\uffad\040\uffad\053\uffad\001\002\000\006\010" +
    "\302\026\303\001\002\000\036\011\uffae\023\uffae\024\uffae" +
    "\025\uffae\026\uffae\030\uffae\031\uffae\032\uffae\033\uffae\034" +
    "\uffae\036\uffae\037\uffae\040\uffae\053\uffae\001\002\000\030" +
    "\011\311\024\135\026\034\030\013\031\036\032\041\033" +
    "\035\036\024\037\020\040\037\053\125\001\002\000\004" +
    "\006\304\001\002\000\020\006\104\017\105\042\050\044" +
    "\056\046\045\050\052\053\060\001\002\000\004\007\306" +
    "\001\002\000\004\010\307\001\002\000\030\011\255\024" +
    "\135\026\034\030\013\031\036\032\041\033\035\036\024" +
    "\037\020\040\037\053\125\001\002\000\036\011\uffa1\023" +
    "\uffa1\024\uffa1\025\uffa1\026\uffa1\030\uffa1\031\uffa1\032\uffa1" +
    "\033\uffa1\034\uffa1\036\uffa1\037\uffa1\040\uffa1\053\uffa1\001" +
    "\002\000\036\011\uffa2\023\uffa2\024\uffa2\025\uffa2\026\uffa2" +
    "\030\uffa2\031\uffa2\032\uffa2\033\uffa2\034\uffa2\036\uffa2\037" +
    "\uffa2\040\uffa2\053\uffa2\001\002\000\030\011\311\024\135" +
    "\026\034\030\013\031\036\032\041\033\035\036\024\037" +
    "\020\040\037\053\125\001\002\000\030\011\311\024\135" +
    "\026\034\030\013\031\036\032\041\033\035\036\024\037" +
    "\020\040\037\053\125\001\002\000\030\011\311\024\135" +
    "\026\034\030\013\031\036\032\041\033\035\036\024\037" +
    "\020\040\037\053\125\001\002\000\030\011\311\024\135" +
    "\026\034\030\013\031\036\032\041\033\035\036\024\037" +
    "\020\040\037\053\125\001\002\000\030\011\311\024\135" +
    "\026\034\030\013\031\036\032\041\033\035\036\024\037" +
    "\020\040\037\053\125\001\002\000\030\011\311\024\135" +
    "\026\034\030\013\031\036\032\041\033\035\036\024\037" +
    "\020\040\037\053\125\001\002\000\030\011\311\024\135" +
    "\026\034\030\013\031\036\032\041\033\035\036\024\037" +
    "\020\040\037\053\125\001\002\000\036\011\uffab\023\uffab" +
    "\024\uffab\025\uffab\026\uffab\030\uffab\031\uffab\032\uffab\033" +
    "\uffab\034\uffab\036\uffab\037\uffab\040\uffab\053\uffab\001\002" +
    "\000\030\011\311\024\135\026\034\030\013\031\036\032" +
    "\041\033\035\036\024\037\020\040\037\053\125\001\002" +
    "\000\036\011\uffa5\023\uffa5\024\uffa5\025\uffa5\026\uffa5\030" +
    "\uffa5\031\uffa5\032\uffa5\033\uffa5\034\uffa5\036\uffa5\037\uffa5" +
    "\040\uffa5\053\uffa5\001\002\000\036\011\uffa7\023\uffa7\024" +
    "\uffa7\025\uffa7\026\uffa7\030\uffa7\031\uffa7\032\uffa7\033\uffa7" +
    "\034\uffa7\036\uffa7\037\uffa7\040\uffa7\053\uffa7\001\002\000" +
    "\036\011\uffa8\023\uffa8\024\uffa8\025\uffa8\026\uffa8\030\uffa8" +
    "\031\uffa8\032\uffa8\033\uffa8\034\uffa8\036\uffa8\037\uffa8\040" +
    "\uffa8\053\uffa8\001\002\000\036\011\uffa3\023\uffa3\024\uffa3" +
    "\025\uffa3\026\uffa3\030\uffa3\031\uffa3\032\uffa3\033\uffa3\034" +
    "\uffa3\036\uffa3\037\uffa3\040\uffa3\053\uffa3\001\002\000\036" +
    "\011\uffa6\023\uffa6\024\uffa6\025\uffa6\026\uffa6\030\uffa6\031" +
    "\uffa6\032\uffa6\033\uffa6\034\uffa6\036\uffa6\037\uffa6\040\uffa6" +
    "\053\uffa6\001\002\000\036\011\uffaa\023\uffaa\024\uffaa\025" +
    "\uffaa\026\uffaa\030\uffaa\031\uffaa\032\uffaa\033\uffaa\034\uffaa" +
    "\036\uffaa\037\uffaa\040\uffaa\053\uffaa\001\002\000\036\011" +
    "\uffa9\023\uffa9\024\uffa9\025\uffa9\026\uffa9\030\uffa9\031\uffa9" +
    "\032\uffa9\033\uffa9\034\uffa9\036\uffa9\037\uffa9\040\uffa9\053" +
    "\uffa9\001\002\000\036\011\uffa4\023\uffa4\024\uffa4\025\uffa4" +
    "\026\uffa4\030\uffa4\031\uffa4\032\uffa4\033\uffa4\034\uffa4\036" +
    "\uffa4\037\uffa4\040\uffa4\053\uffa4\001\002\000\036\002\uffdb" +
    "\011\uffdb\023\uffdb\024\uffdb\025\uffdb\026\uffdb\030\uffdb\031" +
    "\uffdb\032\uffdb\033\uffdb\036\uffdb\037\uffdb\040\uffdb\053\uffdb" +
    "\001\002\000\036\002\uffda\011\uffda\023\uffda\024\uffda\025" +
    "\uffda\026\uffda\030\uffda\031\uffda\032\uffda\033\uffda\036\uffda" +
    "\037\uffda\040\uffda\053\uffda\001\002\000\036\002\uffd9\011" +
    "\uffd9\023\uffd9\024\uffd9\025\uffd9\026\uffd9\030\uffd9\031\uffd9" +
    "\032\uffd9\033\uffd9\036\uffd9\037\uffd9\040\uffd9\053\uffd9\001" +
    "\002\000\036\002\uffd8\011\uffd8\023\uffd8\024\uffd8\025\uffd8" +
    "\026\uffd8\030\uffd8\031\uffd8\032\uffd8\033\uffd8\036\uffd8\037" +
    "\uffd8\040\uffd8\053\uffd8\001\002\000\036\002\uffdc\011\uffdc" +
    "\023\uffdc\024\uffdc\025\uffdc\026\uffdc\030\uffdc\031\uffdc\032" +
    "\uffdc\033\uffdc\036\uffdc\037\uffdc\040\uffdc\053\uffdc\001\002" +
    "\000\036\002\uffd4\011\uffd4\023\uffd4\024\uffd4\025\uffd4\026" +
    "\uffd4\030\uffd4\031\uffd4\032\uffd4\033\uffd4\036\uffd4\037\uffd4" +
    "\040\uffd4\053\uffd4\001\002\000\004\005\342\001\002\000" +
    "\032\006\047\041\065\042\050\043\055\044\056\045\064" +
    "\046\045\047\062\050\052\051\061\052\051\053\060\001" +
    "\002\000\034\011\uffe3\023\uffe3\024\uffe3\025\uffe3\026\uffe3" +
    "\030\uffe3\031\uffe3\032\uffe3\033\uffe3\036\uffe3\037\uffe3\040" +
    "\uffe3\053\uffe3\001\002\000\034\011\uffe2\023\uffe2\024\uffe2" +
    "\025\uffe2\026\uffe2\030\uffe2\031\uffe2\032\uffe2\033\uffe2\036" +
    "\uffe2\037\uffe2\040\uffe2\053\uffe2\001\002\000\004\050\346" +
    "\001\002\000\004\007\347\001\002\000\004\012\350\001" +
    "\002\000\036\011\uffd1\023\uffd1\024\uffd1\025\uffd1\026\uffd1" +
    "\030\uffd1\031\uffd1\032\uffd1\033\uffd1\034\uffd1\036\uffd1\037" +
    "\uffd1\040\uffd1\053\uffd1\001\002\000\036\002\uffd6\011\uffd6" +
    "\023\uffd6\024\uffd6\025\uffd6\026\uffd6\030\uffd6\031\uffd6\032" +
    "\uffd6\033\uffd6\036\uffd6\037\uffd6\040\uffd6\053\uffd6\001\002" +
    "\000\006\007\357\053\355\001\002\000\030\006\047\042" +
    "\050\043\055\044\056\045\064\046\045\047\062\050\052" +
    "\051\061\052\051\053\060\001\002\000\034\011\uffec\023" +
    "\uffec\024\uffec\025\uffec\026\uffec\030\uffec\031\uffec\032\uffec" +
    "\033\uffec\036\uffec\037\uffec\040\uffec\053\uffec\001\002\000" +
    "\006\004\u0103\007\u0104\001\002\000\004\010\360\001\002" +
    "\000\004\010\uffce\001\002\000\030\011\361\024\135\026" +
    "\034\030\013\031\036\032\041\033\035\036\024\037\020" +
    "\040\037\053\125\001\002\000\034\011\uffc4\023\uffc4\024" +
    "\uffc4\025\uffc4\026\uffc4\030\uffc4\031\uffc4\032\uffc4\033\uffc4" +
    "\036\uffc4\037\uffc4\040\uffc4\053\uffc4\001\002\000\030\011" +
    "\361\024\135\026\034\030\013\031\036\032\041\033\035" +
    "\036\024\037\020\040\037\053\125\001\002\000\034\011" +
    "\uffcd\023\uffcd\024\uffcd\025\uffcd\026\uffcd\030\uffcd\031\uffcd" +
    "\032\uffcd\033\uffcd\036\uffcd\037\uffcd\040\uffcd\053\uffcd\001" +
    "\002\000\030\011\361\024\135\026\034\030\013\031\036" +
    "\032\041\033\035\036\024\037\020\040\037\053\125\001" +
    "\002\000\030\011\361\024\135\026\034\030\013\031\036" +
    "\032\041\033\035\036\024\037\020\040\037\053\125\001" +
    "\002\000\034\011\014\023\015\024\042\025\025\026\034" +
    "\030\013\031\036\032\041\033\035\036\024\037\020\040" +
    "\037\053\022\001\002\000\030\011\361\024\135\026\034" +
    "\030\013\031\036\032\041\033\035\036\024\037\020\040" +
    "\037\053\125\001\002\000\030\011\361\024\135\026\034" +
    "\030\013\031\036\032\041\033\035\036\024\037\020\040" +
    "\037\053\125\001\002\000\030\011\361\024\135\026\034" +
    "\030\013\031\036\032\041\033\035\036\024\037\020\040" +
    "\037\053\125\001\002\000\030\011\361\024\135\026\034" +
    "\030\013\031\036\032\041\033\035\036\024\037\020\040" +
    "\037\053\125\001\002\000\034\011\uffc7\023\uffc7\024\uffc7" +
    "\025\uffc7\026\uffc7\030\uffc7\031\uffc7\032\uffc7\033\uffc7\036" +
    "\uffc7\037\uffc7\040\uffc7\053\uffc7\001\002\000\034\011\uffc9" +
    "\023\uffc9\024\uffc9\025\uffc9\026\uffc9\030\uffc9\031\uffc9\032" +
    "\uffc9\033\uffc9\036\uffc9\037\uffc9\040\uffc9\053\uffc9\001\002" +
    "\000\034\011\uffca\023\uffca\024\uffca\025\uffca\026\uffca\030" +
    "\uffca\031\uffca\032\uffca\033\uffca\036\uffca\037\uffca\040\uffca" +
    "\053\uffca\001\002\000\034\011\uffcc\023\uffcc\024\uffcc\025" +
    "\uffcc\026\uffcc\030\uffcc\031\uffcc\032\uffcc\033\uffcc\036\uffcc" +
    "\037\uffcc\040\uffcc\053\uffcc\001\002\000\034\011\uffc8\023" +
    "\uffc8\024\uffc8\025\uffc8\026\uffc8\030\uffc8\031\uffc8\032\uffc8" +
    "\033\uffc8\036\uffc8\037\uffc8\040\uffc8\053\uffc8\001\002\000" +
    "\034\011\uffc6\023\uffc6\024\uffc6\025\uffc6\026\uffc6\030\uffc6" +
    "\031\uffc6\032\uffc6\033\uffc6\036\uffc6\037\uffc6\040\uffc6\053" +
    "\uffc6\001\002\000\034\011\uffcb\023\uffcb\024\uffcb\025\uffcb" +
    "\026\uffcb\030\uffcb\031\uffcb\032\uffcb\033\uffcb\036\uffcb\037" +
    "\uffcb\040\uffcb\053\uffcb\001\002\000\034\011\uffc5\023\uffc5" +
    "\024\uffc5\025\uffc5\026\uffc5\030\uffc5\031\uffc5\032\uffc5\033" +
    "\uffc5\036\uffc5\037\uffc5\040\uffc5\053\uffc5\001\002\000\006" +
    "\007\357\053\355\001\002\000\004\010\uffcf\001\002\000" +
    "\004\010\uffd0\001\002\000\036\002\uffdd\011\uffdd\023\uffdd" +
    "\024\uffdd\025\uffdd\026\uffdd\030\uffdd\031\uffdd\032\uffdd\033" +
    "\uffdd\036\uffdd\037\uffdd\040\uffdd\053\uffdd\001\002\000\040" +
    "\011\ufffe\023\ufffe\024\ufffe\025\ufffe\026\ufffe\030\ufffe\031" +
    "\ufffe\032\ufffe\033\ufffe\034\ufffe\035\ufffe\036\ufffe\037\ufffe" +
    "\040\ufffe\053\ufffe\001\002\000\036\002\uffde\011\uffde\023" +
    "\uffde\024\uffde\025\uffde\026\uffde\030\uffde\031\uffde\032\uffde" +
    "\033\uffde\036\uffde\037\uffde\040\uffde\053\uffde\001\002\000" +
    "\036\002\uffd5\011\uffd5\023\uffd5\024\uffd5\025\uffd5\026\uffd5" +
    "\030\uffd5\031\uffd5\032\uffd5\033\uffd5\036\uffd5\037\uffd5\040" +
    "\uffd5\053\uffd5\001\002\000\004\005\u010b\001\002\000\032" +
    "\006\047\041\065\042\050\043\055\044\056\045\064\046" +
    "\045\047\062\050\052\051\061\052\051\053\060\001\002" +
    "\000\034\011\uffed\023\uffed\024\uffed\025\uffed\026\uffed\030" +
    "\uffed\031\uffed\032\uffed\033\uffed\036\uffed\037\uffed\040\uffed" +
    "\053\uffed\001\002\000\034\011\uffeb\023\uffeb\024\uffeb\025" +
    "\uffeb\026\uffeb\030\uffeb\031\uffeb\032\uffeb\033\uffeb\036\uffeb" +
    "\037\uffeb\040\uffeb\053\uffeb\001\002\000\036\002\uffd2\011" +
    "\uffd2\023\uffd2\024\uffd2\025\uffd2\026\uffd2\030\uffd2\031\uffd2" +
    "\032\uffd2\033\uffd2\036\uffd2\037\uffd2\040\uffd2\053\uffd2\001" +
    "\002\000\006\024\u0110\053\u0112\001\002\000\004\053\u011d" +
    "\001\002\000\004\012\u0115\001\002\000\004\005\u0113\001" +
    "\002\000\030\006\047\042\050\043\055\044\056\045\064" +
    "\046\045\047\062\050\052\051\061\052\051\053\060\001" +
    "\002\000\004\012\uffe6\001\002\000\020\006\104\017\105" +
    "\042\050\044\056\046\045\050\052\053\060\001\002\000" +
    "\004\012\u0117\001\002\000\004\053\u0118\001\002\000\004" +
    "\014\u0119\001\002\000\004\007\u011a\001\002\000\004\010" +
    "\u011b\001\002\000\030\011\122\024\135\026\034\030\013" +
    "\031\036\032\041\033\035\036\024\037\020\040\037\053" +
    "\125\001\002\000\036\011\uffa0\023\uffa0\024\uffa0\025\uffa0" +
    "\026\uffa0\030\uffa0\031\uffa0\032\uffa0\033\uffa0\034\uffa0\036" +
    "\uffa0\037\uffa0\040\uffa0\053\uffa0\001\002\000\004\005\u011e" +
    "\001\002\000\030\006\047\042\050\043\055\044\056\045" +
    "\064\046\045\047\062\050\052\051\061\052\051\053\060" +
    "\001\002\000\004\012\uffe7\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u011d\000\006\002\005\010\003\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\032\003\032\011\011\013\016\021" +
    "\031\024\030\025\027\027\022\034\037\036\015\037\020" +
    "\045\026\046\025\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\010\u010d\001\001\000\002\001\001\000\032" +
    "\003\032\011\u0108\013\016\021\031\024\030\025\027\027" +
    "\022\034\037\036\015\037\020\045\026\046\025\001\001" +
    "\000\032\003\032\011\u0107\013\016\021\031\024\030\025" +
    "\027\027\022\034\037\036\015\037\020\045\026\046\025" +
    "\001\001\000\002\001\001\000\032\003\032\011\u0105\013" +
    "\016\021\031\024\030\025\027\027\022\034\037\036\015" +
    "\037\020\045\026\046\025\001\001\000\002\001\001\000" +
    "\032\003\032\011\350\013\016\021\031\024\030\025\027" +
    "\027\022\034\037\036\015\037\020\045\026\046\025\001" +
    "\001\000\002\001\001\000\002\001\001\000\032\003\032" +
    "\011\337\013\016\021\031\024\030\025\027\027\022\034" +
    "\037\036\015\037\020\045\026\046\025\001\001\000\032" +
    "\003\032\011\336\013\016\021\031\024\030\025\027\027" +
    "\022\034\037\036\015\037\020\045\026\046\025\001\001" +
    "\000\032\003\032\011\335\013\016\021\031\024\030\025" +
    "\027\027\022\034\037\036\015\037\020\045\026\046\025" +
    "\001\001\000\032\003\032\011\334\013\016\021\031\024" +
    "\030\025\027\027\022\034\037\036\015\037\020\045\026" +
    "\046\025\001\001\000\032\003\032\011\333\013\016\021" +
    "\031\024\030\025\027\027\022\034\037\036\015\037\020" +
    "\045\026\046\025\001\001\000\032\003\032\011\332\013" +
    "\016\021\031\024\030\025\027\027\022\034\037\036\015" +
    "\037\020\045\026\046\025\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\032" +
    "\003\032\011\153\013\016\021\031\024\030\025\027\027" +
    "\022\034\037\036\015\037\020\045\026\046\025\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\004\056\005\062\006\045\014\053\026\052\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\005\062\006" +
    "\045\014\074\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\005\062\006\045\014\072\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\005\062\006\045\014\077\001\001\000\002\001\001" +
    "\000\010\005\105\016\102\017\101\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\005\105\016\102\017\111" +
    "\001\001\000\010\005\105\016\102\017\110\001\001\000" +
    "\002\001\001\000\004\005\107\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\005\105\016\102\017\114\001\001\000\002\001\001" +
    "\000\010\005\105\016\102\017\116\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\003\131\022\126\027\125" +
    "\034\132\035\133\036\122\037\123\045\130\046\127\001" +
    "\001\000\002\001\001\000\024\003\131\022\126\027\125" +
    "\034\132\035\152\036\122\037\123\045\130\046\127\001" +
    "\001\000\024\003\131\022\126\027\125\034\132\035\151" +
    "\036\122\037\123\045\130\046\127\001\001\000\002\001" +
    "\001\000\024\003\131\022\126\027\125\034\132\035\146" +
    "\036\122\037\123\045\130\046\127\001\001\000\024\003" +
    "\131\022\126\027\125\034\132\035\145\036\122\037\123" +
    "\045\130\046\127\001\001\000\024\003\131\022\126\027" +
    "\125\034\132\035\144\036\122\037\123\045\130\046\127" +
    "\001\001\000\024\003\131\022\126\027\125\034\132\035" +
    "\143\036\122\037\123\045\130\046\127\001\001\000\024" +
    "\003\131\022\126\027\125\034\132\035\142\036\122\037" +
    "\123\045\130\046\127\001\001\000\024\003\131\022\126" +
    "\027\125\034\132\035\141\036\122\037\123\045\130\046" +
    "\127\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\004\140\005\062\006\045\014\053\026" +
    "\137\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\005\062" +
    "\006\045\014\053\026\150\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\003\131\022\126\027\125\034\132\035\155\036\122\037" +
    "\123\045\130\046\127\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\005\105\016\102\017\160\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\040" +
    "\174\041\167\044\173\001\001\000\010\040\174\041\167" +
    "\044\247\001\001\000\004\007\220\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\040\174" +
    "\041\167\044\175\001\001\000\002\001\001\000\024\003" +
    "\205\022\202\027\201\034\206\036\177\037\200\043\207" +
    "\045\204\046\203\001\001\000\024\003\205\022\202\027" +
    "\201\034\206\036\177\037\200\043\216\045\204\046\203" +
    "\001\001\000\024\003\205\022\202\027\201\034\206\036" +
    "\177\037\200\043\215\045\204\046\203\001\001\000\024" +
    "\003\205\022\202\027\201\034\206\036\177\037\200\043" +
    "\214\045\204\046\203\001\001\000\024\003\205\022\202" +
    "\027\201\034\206\036\177\037\200\043\213\045\204\046" +
    "\203\001\001\000\024\003\205\022\202\027\201\034\206" +
    "\036\177\037\200\043\212\045\204\046\203\001\001\000" +
    "\024\003\205\022\202\027\201\034\206\036\177\037\200" +
    "\043\211\045\204\046\203\001\001\000\002\001\001\000" +
    "\024\003\205\022\202\027\201\034\206\036\177\037\200" +
    "\043\210\045\204\046\203\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\003\233\022" +
    "\230\027\227\034\236\036\225\037\226\040\234\042\235" +
    "\045\232\046\231\001\001\000\026\003\233\022\230\027" +
    "\227\034\236\036\225\037\226\040\234\042\246\045\232" +
    "\046\231\001\001\000\026\003\233\022\230\027\227\034" +
    "\236\036\225\037\226\040\234\042\245\045\232\046\231" +
    "\001\001\000\026\003\233\022\230\027\227\034\236\036" +
    "\225\037\226\040\234\042\244\045\232\046\231\001\001" +
    "\000\026\003\233\022\230\027\227\034\236\036\225\037" +
    "\226\040\234\042\243\045\232\046\231\001\001\000\026" +
    "\003\233\022\230\027\227\034\236\036\225\037\226\040" +
    "\234\042\242\045\232\046\231\001\001\000\026\003\233" +
    "\022\230\027\227\034\236\036\225\037\226\040\234\042" +
    "\241\045\232\046\231\001\001\000\002\001\001\000\026" +
    "\003\233\022\230\027\227\034\236\036\225\037\226\040" +
    "\234\042\240\045\232\046\231\001\001\000\002\001\001" +
    "\000\026\003\233\022\230\027\227\034\236\036\225\037" +
    "\226\040\234\042\237\045\232\046\231\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\005\105\016" +
    "\102\017\251\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\003\264\022\260\027\257\030\262\034\265\036" +
    "\255\037\256\045\263\046\261\001\001\000\006\031\276" +
    "\033\300\001\001\000\024\003\264\022\260\027\257\030" +
    "\275\034\265\036\255\037\256\045\263\046\261\001\001" +
    "\000\024\003\264\022\260\027\257\030\274\034\265\036" +
    "\255\037\256\045\263\046\261\001\001\000\024\003\264" +
    "\022\260\027\257\030\273\034\265\036\255\037\256\045" +
    "\263\046\261\001\001\000\024\003\264\022\260\027\257" +
    "\030\272\034\265\036\255\037\256\045\263\046\261\001" +
    "\001\000\024\003\264\022\260\027\257\030\271\034\265" +
    "\036\255\037\256\045\263\046\261\001\001\000\002\001" +
    "\001\000\024\003\264\022\260\027\257\030\270\034\265" +
    "\036\255\037\256\045\263\046\261\001\001\000\024\003" +
    "\264\022\260\027\257\030\267\034\265\036\255\037\256" +
    "\045\263\046\261\001\001\000\024\003\264\022\260\027" +
    "\257\030\266\034\265\036\255\037\256\045\263\046\261" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\003\317\022\314" +
    "\027\313\032\320\034\321\036\311\037\312\045\316\046" +
    "\315\001\001\000\002\001\001\000\010\005\105\016\102" +
    "\017\304\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\003\264\022\260\027\257\030\307\034\265\036\255" +
    "\037\256\045\263\046\261\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\003\317\022\314\027\313\032\331" +
    "\034\321\036\311\037\312\045\316\046\315\001\001\000" +
    "\024\003\317\022\314\027\313\032\330\034\321\036\311" +
    "\037\312\045\316\046\315\001\001\000\024\003\317\022" +
    "\314\027\313\032\327\034\321\036\311\037\312\045\316" +
    "\046\315\001\001\000\024\003\317\022\314\027\313\032" +
    "\326\034\321\036\311\037\312\045\316\046\315\001\001" +
    "\000\024\003\317\022\314\027\313\032\325\034\321\036" +
    "\311\037\312\045\316\046\315\001\001\000\024\003\317" +
    "\022\314\027\313\032\324\034\321\036\311\037\312\045" +
    "\316\046\315\001\001\000\024\003\317\022\314\027\313" +
    "\032\323\034\321\036\311\037\312\045\316\046\315\001" +
    "\001\000\002\001\001\000\024\003\317\022\314\027\313" +
    "\032\322\034\321\036\311\037\312\045\316\046\315\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\004\343" +
    "\005\062\006\045\014\053\026\342\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\012\355\001\001\000\012\005\062\006\045\014\053" +
    "\026\353\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\003\370\020\362" +
    "\022\365\027\364\034\371\036\361\037\363\045\367\046" +
    "\366\001\001\000\002\001\001\000\024\003\370\020\u0101" +
    "\022\365\027\364\034\371\036\361\037\363\045\367\046" +
    "\366\001\001\000\002\001\001\000\024\003\370\020\u0100" +
    "\022\365\027\364\034\371\036\361\037\363\045\367\046" +
    "\366\001\001\000\024\003\370\020\377\022\365\027\364" +
    "\034\371\036\361\037\363\045\367\046\366\001\001\000" +
    "\032\003\032\011\376\013\016\021\031\024\030\025\027" +
    "\027\022\034\037\036\015\037\020\045\026\046\025\001" +
    "\001\000\024\003\370\020\375\022\365\027\364\034\371" +
    "\036\361\037\363\045\367\046\366\001\001\000\024\003" +
    "\370\020\374\022\365\027\364\034\371\036\361\037\363" +
    "\045\367\046\366\001\001\000\024\003\370\020\373\022" +
    "\365\027\364\034\371\036\361\037\363\045\367\046\366" +
    "\001\001\000\024\003\370\020\372\022\365\027\364\034" +
    "\371\036\361\037\363\045\367\046\366\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\012\u0104\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\004\u010c\005\062\006\045\014\053\026\u010b\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\023\u0110\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\005\062\006\045\014\u0113\001" +
    "\001\000\002\001\001\000\010\005\105\016\102\017\u0115" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\003\131" +
    "\022\126\027\125\034\132\035\u011b\036\122\037\123\045" +
    "\130\046\127\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\005\062\006\045\014\u011e\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol simbolo;
    
    public void syntax_error(Symbol simbolo){
        this.simbolo = simbolo;
    }

    public Symbol getSimbolo(){
        return this.simbolo;
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action_part00000000(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= DECLARAR_CLASE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // BREAK ::= Break1 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BREAK",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // BREAK ::= Break PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BREAK",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // REQUIRE ::= Require ParentesisInicio STRING ParentesisFinal PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("REQUIRE",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // REQUIRE ::= Require ParentesisInicio STRING ParentesisFinal 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("REQUIRE",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // TIPOS_DE_DATOS ::= BOOLEAN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPOS_DE_DATOS",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // TIPOS_DE_DATOS ::= DOUBLE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPOS_DE_DATOS",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // TIPOS_DE_DATOS ::= INTEGER 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPOS_DE_DATOS",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // TIPOS_DE_DATOS ::= STRING 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPOS_DE_DATOS",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // TIPOS_DE_DATOS ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPOS_DE_DATOS",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // TIPOS_DE_DATOS1 ::= BOOLEAN1 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPOS_DE_DATOS1",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // TIPOS_DE_DATOS1 ::= DOUBLE1 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPOS_DE_DATOS1",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // TIPOS_DE_DATOS1 ::= INTEGER1 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPOS_DE_DATOS1",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // TIPOS_DE_DATOS1 ::= STRING1 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPOS_DE_DATOS1",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // TIPOS_DE_DATOS1 ::= Identificador1 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPOS_DE_DATOS1",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // TIPOS_DE_DATOS2 ::= BOOLEAN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPOS_DE_DATOS2",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // TIPOS_DE_DATOS2 ::= DOUBLE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPOS_DE_DATOS2",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // TIPOS_DE_DATOS2 ::= INTEGER 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPOS_DE_DATOS2",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // TIPOS_DE_DATOS2 ::= STRING 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPOS_DE_DATOS2",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // DECLARAR_VAR ::= Var Identificador Igual FINALIZAR_DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARAR_VAR",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // DECLARAR_VAR ::= Identificador Igual FINALIZAR_DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARAR_VAR",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // DECLARAR_VAR ::= Var Identificador Igual REQUIRE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARAR_VAR",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // DECLARAR_LET ::= Let Identificador Igual FINALIZAR_DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARAR_LET",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // DECLARAR_LET ::= Identificador Igual FINALIZAR_DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARAR_LET",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // DECLARAR_LET ::= Let Identificador Igual REQUIRE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARAR_LET",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // DECLARAR_LET1 ::= Let Identificador Igual OPERADORES_ARITMETICOS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARAR_LET1",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // DECLARAR_LET1 ::= Identificador Igual OPERADORES_ARITMETICOS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARAR_LET1",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // DECLARAR_LET2 ::= Let Identificador Igual FINALIZAR_DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARAR_LET2",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // DECLARAR_LET2 ::= Let Identificador Igual REQUIRE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARAR_LET2",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // DECLARAR_CONST ::= Const Identificador Igual FINALIZAR_DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARAR_CONST",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // DECLARAR_CONST ::= Const Identificador Igual REQUIRE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARAR_CONST",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // FINALIZAR_DECLARACION ::= OPERADORES_ARITMETICOS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FINALIZAR_DECLARACION",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // FINALIZAR_DECLARACION ::= OPERADORES_ARITMETICOS PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FINALIZAR_DECLARACION",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // DECLARAR_CLASE ::= Clase Identificador LlaveInicio INSTRUCCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARAR_CLASE",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // INSTRUCCION ::= DECLARAR_METODO INSTRUCCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // INSTRUCCION ::= SWITCH INSTRUCCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // INSTRUCCION ::= DO INSTRUCCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // INSTRUCCION ::= BREAK INSTRUCCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // INSTRUCCION ::= DECLARAR_VAR INSTRUCCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // INSTRUCCION ::= DECLARAR_LET2 INSTRUCCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // INSTRUCCION ::= DECLARAR_CONST INSTRUCCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // INSTRUCCION ::= FOR INSTRUCCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // INSTRUCCION ::= IF INSTRUCCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // INSTRUCCION ::= WHILE INSTRUCCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // INSTRUCCION ::= CONSOLA INSTRUCCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // INSTRUCCION ::= LlaveFinal 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // INSTRUCCION ::= LlaveFinal DECLARAR_CLASE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // CONSOLA ::= Consola ParentesisInicio STRING ParentesisFinal PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONSOLA",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // CADENA_IDENTIFICADORES ::= Identificador Coma CADENA_IDENTIFICADORES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CADENA_IDENTIFICADORES",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // CADENA_IDENTIFICADORES ::= Identificador ParentesisFinal 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CADENA_IDENTIFICADORES",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // CADENA_IDENTIFICADORES ::= ParentesisFinal 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CADENA_IDENTIFICADORES",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // DECLARAR_METODO ::= Identificador ParentesisInicio CADENA_IDENTIFICADORES LlaveInicio INSTRUCCION_METODO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARAR_METODO",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // INSTRUCCION_METODO ::= CONSOLA INSTRUCCION_METODO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION_METODO",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // INSTRUCCION_METODO ::= SWITCH INSTRUCCION_METODO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION_METODO",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // INSTRUCCION_METODO ::= DO INSTRUCCION_METODO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION_METODO",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // INSTRUCCION_METODO ::= BREAK INSTRUCCION_METODO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION_METODO",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // INSTRUCCION_METODO ::= DECLARAR_LET INSTRUCCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION_METODO",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // INSTRUCCION_METODO ::= FOR INSTRUCCION_METODO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION_METODO",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // INSTRUCCION_METODO ::= IF INSTRUCCION_METODO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION_METODO",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // INSTRUCCION_METODO ::= WHILE INSTRUCCION_METODO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION_METODO",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // INSTRUCCION_METODO ::= LlaveFinal 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION_METODO",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // OPERADORES_ARITMETICOS ::= TIPOS_DE_DATOS OperadorAritmetico OPERADORES_ARITMETICOS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADORES_ARITMETICOS",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // OPERADORES_ARITMETICOS ::= ParentesisInicio OPERADORES_ARITMETICOS ParentesisFinal 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADORES_ARITMETICOS",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // OPERADORES_ARITMETICOS ::= ParentesisInicio OPERADORES_ARITMETICOS ParentesisFinal OperadorAritmetico OPERADORES_ARITMETICOS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADORES_ARITMETICOS",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // OPERADORES_ARITMETICOS ::= TIPOS_DE_DATOS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADORES_ARITMETICOS",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // OPERADORES_ARITMETICOS ::= TIPOS_DE_DATOS1 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADORES_ARITMETICOS",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // OPERADORES_RELACIONALES ::= TIPOS_DE_DATOS OperadorRelacional TIPOS_DE_DATOS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADORES_RELACIONALES",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // OPERADORES_RELACIONALES ::= TIPOS_DE_DATOS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADORES_RELACIONALES",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // OPERADORES_LOGICOS ::= ParentesisInicio OPERADORES_LOGICOS ParentesisFinal OperadorLogico OPERADORES_LOGICOS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADORES_LOGICOS",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // OPERADORES_LOGICOS ::= ParentesisInicio OPERADORES_LOGICOS ParentesisFinal 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADORES_LOGICOS",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // OPERADORES_LOGICOS ::= OPERADORES_RELACIONALES OperadorLogico OPERADORES_LOGICOS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADORES_LOGICOS",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // OPERADORES_LOGICOS ::= OperadorLogicoNot OPERADORES_LOGICOS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADORES_LOGICOS",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // OPERADORES_LOGICOS ::= OPERADORES_RELACIONALES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADORES_LOGICOS",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // IF ::= If ParentesisInicio OPERADORES_LOGICOS ParentesisFinal LlaveInicio INTRUCCION_IF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // INTRUCCION_IF ::= IF INTRUCCION_IF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INTRUCCION_IF",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // INTRUCCION_IF ::= SWITCH INTRUCCION_IF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INTRUCCION_IF",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // INTRUCCION_IF ::= DO INTRUCCION_IF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INTRUCCION_IF",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // INTRUCCION_IF ::= BREAK INTRUCCION_IF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INTRUCCION_IF",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // INTRUCCION_IF ::= DECLARAR_LET INTRUCCION_IF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INTRUCCION_IF",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // INTRUCCION_IF ::= FOR INTRUCCION_IF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INTRUCCION_IF",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // INTRUCCION_IF ::= CONSOLA INTRUCCION_IF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INTRUCCION_IF",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // INTRUCCION_IF ::= WHILE INTRUCCION_IF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INTRUCCION_IF",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // INTRUCCION_IF ::= LlaveFinal ELSE_IF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INTRUCCION_IF",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // INTRUCCION_IF ::= LlaveFinal ELSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INTRUCCION_IF",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // INTRUCCION_IF ::= LlaveFinal 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INTRUCCION_IF",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // ELSE ::= Else LlaveInicio INTRUCCION_ELSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // INTRUCCION_ELSE ::= IF INTRUCCION_ELSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INTRUCCION_ELSE",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // INTRUCCION_ELSE ::= SWITCH INTRUCCION_ELSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INTRUCCION_ELSE",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // INTRUCCION_ELSE ::= DO INTRUCCION_ELSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INTRUCCION_ELSE",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // INTRUCCION_ELSE ::= BREAK INTRUCCION_ELSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INTRUCCION_ELSE",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // INTRUCCION_ELSE ::= DECLARAR_LET INTRUCCION_ELSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INTRUCCION_ELSE",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // INTRUCCION_ELSE ::= FOR INTRUCCION_ELSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INTRUCCION_ELSE",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // INTRUCCION_ELSE ::= WHILE INTRUCCION_ELSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INTRUCCION_ELSE",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // INTRUCCION_ELSE ::= CONSOLA INTRUCCION_ELSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INTRUCCION_ELSE",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // INTRUCCION_ELSE ::= LlaveFinal 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INTRUCCION_ELSE",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // ELSE_IF ::= Else If ParentesisInicio OPERADORES_LOGICOS ParentesisFinal LlaveInicio INTRUCCION_IF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // FOR ::= For ParentesisInicio DECLARAR_LET1 PuntoComa OPERADORES_LOGICOS PuntoComa Identificador OperadorIdentificador ParentesisFinal LlaveInicio INSTRUCCION_CICLOS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // WHILE ::= While ParentesisInicio OPERADORES_LOGICOS ParentesisFinal LlaveInicio INSTRUCCION_CICLOS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WHILE",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // DO ::= Do LlaveInicio INSTRUCCION_CICLOS While ParentesisInicio OPERADORES_LOGICOS ParentesisFinal 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DO",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // DO ::= Do LlaveInicio INSTRUCCION_CICLOS While ParentesisInicio OPERADORES_LOGICOS ParentesisFinal PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DO",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // INSTRUCCION_CICLOS ::= WHILE INSTRUCCION_CICLOS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION_CICLOS",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // INSTRUCCION_CICLOS ::= SWITCH INSTRUCCION_CICLOS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION_CICLOS",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // INSTRUCCION_CICLOS ::= DO INSTRUCCION_CICLOS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION_CICLOS",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // INSTRUCCION_CICLOS ::= BREAK INSTRUCCION_CICLOS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION_CICLOS",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // INSTRUCCION_CICLOS ::= DECLARAR_LET INSTRUCCION_CICLOS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION_CICLOS",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // INSTRUCCION_CICLOS ::= FOR INSTRUCCION_CICLOS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION_CICLOS",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // INSTRUCCION_CICLOS ::= CONSOLA INSTRUCCION_CICLOS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION_CICLOS",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // INSTRUCCION_CICLOS ::= IF INSTRUCCION_CICLOS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION_CICLOS",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // INSTRUCCION_CICLOS ::= LlaveFinal 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION_CICLOS",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // SWITCH ::= Switch ParentesisInicio Identificador ParentesisFinal LlaveInicio INSTRUCCION_SWITCH 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SWITCH",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // INSTRUCCION_SWITCH ::= CASE INSTRUCCION_SWITCH 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION_SWITCH",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // INSTRUCCION_SWITCH ::= DEFAULT INSTRUCCION_SWITCH 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION_SWITCH",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // INSTRUCCION_SWITCH ::= LlaveFinal 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION_SWITCH",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // CASE ::= Case TIPOS_DE_DATOS2 DosPuntos INSTRUCCION_CASE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CASE",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // DEFAULT ::= Default DosPuntos INSTRUCCION_DEFAULT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DEFAULT",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // INSTRUCCION_CASE ::= CASE INSTRUCCION_CASE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION_CASE",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // INSTRUCCION_CASE ::= WHILE INSTRUCCION_CASE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION_CASE",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // INSTRUCCION_CASE ::= SWITCH INSTRUCCION_CASE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION_CASE",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // INSTRUCCION_CASE ::= DO INSTRUCCION_CASE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION_CASE",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // INSTRUCCION_CASE ::= DECLARAR_LET INSTRUCCION_CASE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION_CASE",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // INSTRUCCION_CASE ::= FOR INSTRUCCION_CASE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION_CASE",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // INSTRUCCION_CASE ::= CONSOLA INSTRUCCION_CASE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION_CASE",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // INSTRUCCION_CASE ::= IF INSTRUCCION_CASE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION_CASE",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // INSTRUCCION_CASE ::= BREAK 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION_CASE",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // INSTRUCCION_DEFAULT ::= WHILE INSTRUCCION_DEFAULT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION_DEFAULT",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // INSTRUCCION_DEFAULT ::= SWITCH INSTRUCCION_DEFAULT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION_DEFAULT",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // INSTRUCCION_DEFAULT ::= DO INSTRUCCION_DEFAULT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION_DEFAULT",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // INSTRUCCION_DEFAULT ::= DECLARAR_LET INSTRUCCION_DEFAULT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION_DEFAULT",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // INSTRUCCION_DEFAULT ::= FOR INSTRUCCION_DEFAULT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION_DEFAULT",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // INSTRUCCION_DEFAULT ::= CONSOLA INSTRUCCION_DEFAULT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION_DEFAULT",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // INSTRUCCION_DEFAULT ::= IF INSTRUCCION_DEFAULT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION_DEFAULT",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // INSTRUCCION_DEFAULT ::= BREAK 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION_DEFAULT",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sintax$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
              return CUP$Sintax$do_action_part00000000(
                               CUP$Sintax$act_num,
                               CUP$Sintax$parser,
                               CUP$Sintax$stack,
                               CUP$Sintax$top);
    }
}

}
