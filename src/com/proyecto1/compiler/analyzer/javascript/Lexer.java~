/* The following code was generated by JFlex 1.4.3 on 9/2/21, 2:08 PM */

package com.proyecto1.compiler.analyzer.javascript;
import static com.proyecto1.compiler.analyzer.javascript.Tokens.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 9/2/21, 2:08 PM from the specification file
 * <tt>/home/jafb/NetBeansProjects/OLC_PROYECTO1/src/com/proyecto1/compiler/analyzer/javascript/Lexer.flex</tt>
 */
public class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\6\2\0\1\3\22\0\1\51\1\27\1\62\1\7"+
    "\1\0\1\33\1\31\1\0\1\21\1\22\1\5\1\33\1\3\1\33"+
    "\1\55\1\4\2\2\1\15\1\2\1\17\1\2\1\16\1\2\1\14"+
    "\1\2\1\26\1\25\1\30\1\20\1\30\2\0\1\13\1\1\1\10"+
    "\11\1\1\12\1\1\1\11\13\1\4\0\1\1\1\0\1\36\1\57"+
    "\1\34\1\52\1\50\1\40\1\56\1\54\1\44\1\1\1\60\1\35"+
    "\1\1\1\42\1\45\1\1\1\61\1\47\1\37\1\43\1\41\1\46"+
    "\1\53\3\1\1\23\1\32\1\24\u1f9e\0\1\63\1\64\udfe2\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\2\5\1\6\1\1"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\2\1\1\5\14\2\2\1\1\0\1\4\2\0"+
    "\1\17\1\16\11\2\1\20\3\2\1\21\3\2\1\0"+
    "\1\22\1\0\1\22\1\23\2\0\3\2\1\24\3\2"+
    "\1\25\6\2\1\4\1\0\1\2\1\26\3\2\1\27"+
    "\1\2\1\30\3\2\1\0\1\31\4\2\1\0\1\2"+
    "\1\32\1\33\1\0\1\2\1\34\2\2\1\0\1\2"+
    "\1\0\2\2\1\35\1\36\1\37\2\0\1\40\2\0"+
    "\1\41\1\0\1\42";

  private static int [] zzUnpackAction() {
    int [] result = new int[123];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\65\0\152\0\237\0\324\0\u0109\0\u013e\0\65"+
    "\0\u0173\0\u01a8\0\65\0\65\0\65\0\65\0\65\0\65"+
    "\0\u01a8\0\u01a8\0\u01dd\0\u0212\0\65\0\u0247\0\u027c\0\u02b1"+
    "\0\u02e6\0\u031b\0\u0350\0\u0385\0\u03ba\0\u03ef\0\u0424\0\u0459"+
    "\0\u048e\0\u04c3\0\u04f8\0\u052d\0\u0562\0\u0597\0\u05cc\0\65"+
    "\0\65\0\u0601\0\u0636\0\u066b\0\u06a0\0\u06d5\0\u070a\0\u073f"+
    "\0\u0774\0\u07a9\0\152\0\u07de\0\u0813\0\u0848\0\152\0\u087d"+
    "\0\u08b2\0\u08e7\0\u04c3\0\65\0\u04f8\0\u04f8\0\u052d\0\u091c"+
    "\0\u0951\0\u0986\0\u09bb\0\u09f0\0\152\0\u0a25\0\u0a5a\0\u0a8f"+
    "\0\152\0\u0ac4\0\u0af9\0\u0b2e\0\u0b63\0\u0b98\0\u0bcd\0\u0597"+
    "\0\u0c02\0\u0c37\0\152\0\u0c6c\0\u0ca1\0\u0cd6\0\152\0\u0d0b"+
    "\0\u0d40\0\u0d75\0\u0daa\0\u0ddf\0\u0e14\0\152\0\u0e49\0\u0e7e"+
    "\0\u0eb3\0\u0ee8\0\u0f1d\0\u0f52\0\152\0\152\0\u0f87\0\u0fbc"+
    "\0\152\0\u0ff1\0\u1026\0\u105b\0\u1090\0\u10c5\0\u10fa\0\u112f"+
    "\0\152\0\65\0\152\0\u1164\0\u1199\0\152\0\u11ce\0\u1203"+
    "\0\65\0\u1238\0\65";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[123];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\4\3\4\4\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\3\1\30\1\31\2\3\1\32\1\33\1\3\1\34"+
    "\1\35\1\36\1\5\1\37\1\40\1\3\1\2\1\3"+
    "\1\41\2\3\1\42\1\43\1\2\66\0\2\3\5\0"+
    "\10\3\14\0\15\3\1\0\3\3\1\0\4\3\5\0"+
    "\1\4\11\0\4\4\35\0\1\44\12\0\1\5\45\0"+
    "\1\5\17\0\1\45\1\46\64\0\1\25\67\0\1\47"+
    "\74\0\1\50\75\0\1\51\65\0\1\51\33\0\2\3"+
    "\5\0\10\3\14\0\1\3\1\52\1\53\6\3\1\54"+
    "\3\3\1\0\3\3\1\0\4\3\4\0\2\3\5\0"+
    "\10\3\14\0\14\3\1\55\1\0\3\3\1\0\4\3"+
    "\4\0\2\3\5\0\10\3\14\0\15\3\1\0\1\3"+
    "\1\56\1\3\1\0\4\3\4\0\2\3\5\0\10\3"+
    "\14\0\2\3\1\57\2\3\1\60\3\3\1\61\3\3"+
    "\1\0\3\3\1\0\4\3\4\0\2\3\5\0\10\3"+
    "\14\0\13\3\1\62\1\3\1\0\3\3\1\0\4\3"+
    "\4\0\2\3\5\0\10\3\14\0\4\3\1\63\10\3"+
    "\1\0\3\3\1\0\4\3\4\0\2\3\5\0\10\3"+
    "\14\0\2\3\1\64\12\3\1\0\3\3\1\0\4\3"+
    "\4\0\2\3\5\0\10\3\14\0\14\3\1\65\1\0"+
    "\3\3\1\0\4\3\4\0\2\3\5\0\10\3\14\0"+
    "\1\3\1\66\13\3\1\0\3\3\1\0\4\3\4\0"+
    "\2\3\5\0\10\3\14\0\11\3\1\67\2\3\1\70"+
    "\1\0\3\3\1\0\4\3\4\0\2\3\5\0\10\3"+
    "\14\0\15\3\1\0\2\3\1\71\1\0\4\3\4\0"+
    "\2\3\5\0\10\3\14\0\13\3\1\72\1\3\1\0"+
    "\3\3\1\0\4\3\3\0\62\73\1\74\2\73\63\75"+
    "\1\0\1\76\2\0\1\77\11\0\4\77\45\0\6\45"+
    "\1\0\56\45\5\46\1\100\57\46\11\0\1\101\54\0"+
    "\2\3\5\0\10\3\14\0\2\3\1\102\12\3\1\0"+
    "\3\3\1\0\4\3\4\0\2\3\5\0\10\3\14\0"+
    "\3\3\1\103\11\3\1\0\3\3\1\0\4\3\4\0"+
    "\2\3\5\0\10\3\14\0\6\3\1\104\6\3\1\0"+
    "\3\3\1\0\4\3\4\0\2\3\5\0\10\3\14\0"+
    "\7\3\1\105\5\3\1\0\3\3\1\0\4\3\4\0"+
    "\2\3\5\0\10\3\14\0\10\3\1\106\4\3\1\0"+
    "\3\3\1\0\4\3\4\0\2\3\5\0\10\3\14\0"+
    "\1\3\1\107\13\3\1\0\3\3\1\0\4\3\4\0"+
    "\2\3\5\0\10\3\14\0\6\3\1\110\6\3\1\0"+
    "\3\3\1\0\4\3\4\0\2\3\5\0\10\3\14\0"+
    "\13\3\1\111\1\3\1\0\3\3\1\0\4\3\4\0"+
    "\2\3\5\0\10\3\14\0\5\3\1\112\7\3\1\0"+
    "\3\3\1\0\4\3\4\0\2\3\5\0\10\3\14\0"+
    "\13\3\1\105\1\3\1\0\3\3\1\0\4\3\4\0"+
    "\2\3\5\0\10\3\14\0\15\3\1\0\3\3\1\0"+
    "\3\3\1\113\4\0\2\3\5\0\10\3\14\0\3\3"+
    "\1\114\11\3\1\0\3\3\1\0\4\3\4\0\2\3"+
    "\5\0\10\3\14\0\4\3\1\115\10\3\1\0\3\3"+
    "\1\0\4\3\4\0\2\3\5\0\10\3\14\0\10\3"+
    "\1\116\4\3\1\0\3\3\1\0\4\3\4\0\2\3"+
    "\5\0\10\3\14\0\14\3\1\117\1\0\3\3\1\0"+
    "\4\3\3\0\4\46\1\120\1\100\57\46\12\0\1\121"+
    "\53\0\2\3\5\0\10\3\14\0\3\3\1\122\11\3"+
    "\1\0\3\3\1\0\4\3\4\0\2\3\5\0\10\3"+
    "\14\0\14\3\1\123\1\0\3\3\1\0\4\3\4\0"+
    "\2\3\5\0\10\3\14\0\3\3\1\124\11\3\1\0"+
    "\3\3\1\0\4\3\4\0\2\3\5\0\10\3\14\0"+
    "\7\3\1\125\5\3\1\0\3\3\1\0\4\3\4\0"+
    "\2\3\5\0\10\3\14\0\3\3\1\112\11\3\1\0"+
    "\3\3\1\0\4\3\4\0\2\3\5\0\10\3\14\0"+
    "\1\126\14\3\1\0\3\3\1\0\4\3\4\0\2\3"+
    "\5\0\10\3\14\0\14\3\1\127\1\0\3\3\1\0"+
    "\4\3\4\0\2\3\5\0\10\3\14\0\5\3\1\130"+
    "\7\3\1\0\3\3\1\0\4\3\4\0\2\3\5\0"+
    "\10\3\14\0\14\3\1\131\1\0\3\3\1\0\4\3"+
    "\4\0\2\3\5\0\10\3\14\0\2\3\1\132\12\3"+
    "\1\0\3\3\1\0\4\3\4\0\2\3\5\0\10\3"+
    "\14\0\1\3\1\133\13\3\1\0\3\3\1\0\4\3"+
    "\4\0\2\3\5\0\10\3\14\0\2\3\1\134\12\3"+
    "\1\0\3\3\1\0\4\3\16\0\1\135\52\0\2\3"+
    "\5\0\10\3\14\0\3\3\1\136\11\3\1\0\3\3"+
    "\1\0\4\3\4\0\2\3\5\0\10\3\14\0\7\3"+
    "\1\105\1\3\1\137\3\3\1\0\3\3\1\0\4\3"+
    "\4\0\2\3\5\0\10\3\14\0\1\140\14\3\1\0"+
    "\3\3\1\0\4\3\4\0\2\3\5\0\10\3\14\0"+
    "\7\3\1\141\5\3\1\0\3\3\1\0\4\3\4\0"+
    "\2\3\5\0\10\3\14\0\10\3\1\142\4\3\1\0"+
    "\3\3\1\0\4\3\4\0\2\3\5\0\10\3\14\0"+
    "\15\3\1\143\3\3\1\0\4\3\4\0\2\3\5\0"+
    "\10\3\14\0\5\3\1\144\7\3\1\0\3\3\1\0"+
    "\4\3\4\0\2\3\5\0\10\3\14\0\14\3\1\145"+
    "\1\0\3\3\1\0\4\3\4\0\2\3\5\0\10\3"+
    "\14\0\15\3\1\0\3\3\1\0\2\3\1\146\1\3"+
    "\17\0\1\147\51\0\2\3\5\0\10\3\14\0\1\3"+
    "\1\150\13\3\1\0\3\3\1\0\4\3\4\0\2\3"+
    "\5\0\10\3\14\0\15\3\1\0\2\3\1\151\1\0"+
    "\4\3\4\0\2\3\5\0\10\3\14\0\10\3\1\152"+
    "\4\3\1\0\3\3\1\0\4\3\4\0\2\3\5\0"+
    "\10\3\14\0\13\3\1\153\1\3\1\0\3\3\1\0"+
    "\4\3\47\0\1\154\21\0\2\3\5\0\10\3\14\0"+
    "\1\3\1\155\13\3\1\0\3\3\1\0\4\3\20\0"+
    "\1\156\50\0\2\3\5\0\10\3\14\0\14\3\1\157"+
    "\1\0\3\3\1\0\4\3\4\0\2\3\5\0\10\3"+
    "\14\0\11\3\1\160\3\3\1\0\3\3\1\0\4\3"+
    "\4\0\2\3\5\0\10\3\14\0\14\3\1\161\1\0"+
    "\3\3\1\0\4\3\43\0\1\162\25\0\2\3\5\0"+
    "\10\3\14\0\7\3\1\163\5\3\1\0\3\3\1\0"+
    "\4\3\21\0\1\164\47\0\2\3\5\0\10\3\14\0"+
    "\15\3\1\0\3\3\1\165\4\3\4\0\2\3\5\0"+
    "\10\3\14\0\6\3\1\166\6\3\1\0\3\3\1\0"+
    "\4\3\22\0\1\167\102\0\1\170\36\0\1\171\122\0"+
    "\1\172\75\0\1\173\6\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[4717];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\5\1\1\11\2\1\6\11\4\1\1\11"+
    "\16\1\1\0\1\1\2\0\2\11\21\1\1\0\1\11"+
    "\1\0\2\1\2\0\17\1\1\0\13\1\1\0\5\1"+
    "\1\0\3\1\1\0\4\1\1\0\1\1\1\0\3\1"+
    "\1\11\1\1\2\0\1\1\2\0\1\11\1\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[123];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    public String lexeme;


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 158) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Tokens yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 21: 
          { lexeme=yytext(); return For ;
          }
        case 35: break;
        case 23: 
          { lexeme=yytext(); return BOOLEAN ;
          }
        case 36: break;
        case 12: 
          { lexeme=yytext(); return PuntoComa;
          }
        case 37: break;
        case 30: 
          { lexeme=yytext(); return ElseIf ;
          }
        case 38: break;
        case 19: 
          { lexeme=yytext(); return DOUBLE;
          }
        case 39: break;
        case 20: 
          { lexeme=yytext(); return NivelAccesoVariable ;
          }
        case 40: break;
        case 22: 
          { lexeme=yytext(); return Case ;
          }
        case 41: break;
        case 24: 
          { lexeme=yytext(); return Else ;
          }
        case 42: break;
        case 31: 
          { lexeme=yytext(); return Default ;
          }
        case 43: break;
        case 27: 
          { lexeme=yytext(); return Break ;
          }
        case 44: break;
        case 16: 
          { lexeme=yytext(); return If ;
          }
        case 45: break;
        case 6: 
          { return Linea;
          }
        case 46: break;
        case 13: 
          { lexeme=yytext(); return DosPuntos;
          }
        case 47: break;
        case 11: 
          { lexeme=yytext(); return LlaveFinal;
          }
        case 48: break;
        case 9: 
          { lexeme=yytext(); return ParentesisFinal;
          }
        case 49: break;
        case 29: 
          { lexeme=yytext(); return Require ;
          }
        case 50: break;
        case 14: 
          { lexeme=yytext(); return OperadorLogico ;
          }
        case 51: break;
        case 17: 
          { lexeme=yytext(); return Do ;
          }
        case 52: break;
        case 8: 
          { lexeme=yytext(); return ParentesisInicio;
          }
        case 53: break;
        case 7: 
          { lexeme=yytext(); return Igual;
          }
        case 54: break;
        case 5: 
          { lexeme=yytext(); return OperadorAritmetico ;
          }
        case 55: break;
        case 32: 
          { lexeme=yytext(); return Funcion ;
          }
        case 56: break;
        case 2: 
          { lexeme=yytext(); return Identificador;
          }
        case 57: break;
        case 10: 
          { lexeme=yytext(); return LlaveInicio;
          }
        case 58: break;
        case 18: 
          { lexeme=yytext(); return STRING;
          }
        case 59: break;
        case 15: 
          { lexeme = yytext(); return OperadorRelacional;
          }
        case 60: break;
        case 1: 
          { return ERROR;
          }
        case 61: break;
        case 25: 
          { lexeme=yytext(); return Clase ;
          }
        case 62: break;
        case 34: 
          { lexeme=yytext(); return Consola ;
          }
        case 63: break;
        case 4: 
          { /*Ignore*/
          }
        case 64: break;
        case 33: 
          { lexeme=","; return Coma;
          }
        case 65: break;
        case 3: 
          { lexeme=yytext(); return INTEGER;
          }
        case 66: break;
        case 28: 
          { lexeme=yytext(); return Switch ;
          }
        case 67: break;
        case 26: 
          { lexeme=yytext(); return While ;
          }
        case 68: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
