/* The following code was generated by JFlex 1.4.3 on 8/28/21, 8:13 AM */

package com.proyecto1.compiler.analyzer;
import java_cup.runtime.Symbol;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 8/28/21, 8:13 AM from the specification file
 * <tt>/home/jafb/NetBeansProjects/OLC_PROYECTO1/src/com/proyecto1/compiler/analyzer/LexerCup.flex</tt>
 */
class LexicoCup implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0,  3,  6,  0,  0,  3,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     3,  0, 54,  4, 39,  0,  0, 51, 31, 32,  5,  0,  3,  0, 50,  0, 
     2,  2, 13,  2, 15,  2, 14,  2, 12,  2, 38, 37,  7, 30, 16,  0, 
     0, 11, 27,  8, 24, 29, 44, 23, 46, 21, 42,  1, 28, 10, 22,  9, 
    40,  1, 20, 18, 19, 26, 47,  1, 48, 49,  1, 35,  0, 36,  0,  1, 
     0, 41, 27, 43, 24, 29, 44, 23, 46, 21, 42,  1, 28, 45, 22, 25, 
    40,  1, 20, 18, 19, 26, 47,  1, 48, 49,  1, 33, 17, 34,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\1\1\3\2\1\2\2\1\1"+
    "\5\2\1\4\1\5\1\6\1\7\1\10\1\11\1\12"+
    "\1\13\1\14\1\15\2\2\4\1\2\0\1\3\2\0"+
    "\1\2\2\0\1\2\11\0\2\2\1\0\3\2\1\0"+
    "\4\2\1\0\1\16\1\0\1\16\1\0\1\17\1\0"+
    "\1\17\1\20\2\0\1\2\2\0\1\2\16\0\2\2"+
    "\1\0\3\2\1\0\4\2\1\3\2\0\1\2\1\0"+
    "\1\2\4\0\1\21\4\0\1\21\5\0\2\2\1\0"+
    "\3\2\1\0\1\2\1\21\2\2\2\0\1\2\1\0"+
    "\1\2\21\0\2\2\1\0\3\2\1\0\3\2\2\0"+
    "\1\2\1\0\1\2\2\22\4\0\1\23\1\0\1\24"+
    "\1\0\1\24\1\22\2\0\1\24\1\22\2\0\1\24"+
    "\1\23\1\0\2\2\2\22\3\2\1\0\2\25\2\26"+
    "\1\27\1\0\1\25\1\0\1\30\1\31\1\0\1\25"+
    "\2\0\1\27\1\26\1\0\1\30\1\31\1\0\4\2"+
    "\1\27\17\0\7\2\21\0\7\2\1\32\1\0\1\33"+
    "\1\0\2\33\5\0\1\33\6\0\1\33\2\2\1\33"+
    "\4\2\20\0\6\2\21\0\6\2\1\34\1\35\5\0"+
    "\2\34\1\0\2\35\4\0\2\34\1\35\4\2\1\0"+
    "\2\36\2\0\1\36\1\0\1\36\1\0\2\36\2\2"+
    "\1\36\1\2\2\0\3\37\1\0\1\2\1\37\1\2"+
    "\3\0\2\2\1\40\1\0\1\40\1\2\1\40\1\0"+
    "\1\2\1\0\1\2\1\0\1\2\1\0\1\2\1\0"+
    "\1\2\1\0\1\2\1\0\1\2\2\41";

  private static int [] zzUnpackAction() {
    int [] result = new int[413];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\71\0\162\0\253\0\344\0\u011d\0\u0156\0\u018f"+
    "\0\u01c8\0\u0201\0\u023a\0\u0273\0\u02ac\0\u02e5\0\u031e\0\71"+
    "\0\71\0\71\0\71\0\71\0\71\0\71\0\71\0\71"+
    "\0\71\0\u0357\0\u0390\0\u03c9\0\u0402\0\u043b\0\u0474\0\253"+
    "\0\u04ad\0\u04e6\0\u051f\0\u0558\0\u0591\0\u05ca\0\u0603\0\u063c"+
    "\0\u0675\0\u06ae\0\u06e7\0\u0720\0\u0759\0\u0792\0\u07cb\0\u0804"+
    "\0\u083d\0\u0876\0\u08af\0\u08e8\0\u0921\0\u095a\0\u0993\0\u09cc"+
    "\0\u0a05\0\u0a3e\0\u0a77\0\u0ab0\0\u03c9\0\71\0\u0402\0\u0402"+
    "\0\u043b\0\71\0\u0474\0\u0474\0\u04ad\0\u0ae9\0\u0b22\0\u0b5b"+
    "\0\u0b94\0\u0bcd\0\u0c06\0\u0c3f\0\u0c78\0\u0cb1\0\u0cea\0\u0d23"+
    "\0\u0d5c\0\u0d95\0\u0dce\0\u0e07\0\u0e40\0\u0e79\0\u0eb2\0\u0eeb"+
    "\0\u0f24\0\u0f5d\0\u0f96\0\u0fcf\0\u1008\0\u1041\0\u107a\0\u10b3"+
    "\0\u10ec\0\u1125\0\u115e\0\u1197\0\u051f\0\u11d0\0\u1209\0\u1242"+
    "\0\u127b\0\u12b4\0\u12ed\0\u1326\0\u135f\0\u1398\0\u13d1\0\u140a"+
    "\0\u1443\0\u147c\0\u14b5\0\71\0\u14ee\0\u1527\0\u1560\0\u1599"+
    "\0\u15d2\0\u160b\0\u1644\0\u167d\0\u16b6\0\u16ef\0\u1728\0\u1761"+
    "\0\u179a\0\162\0\u17d3\0\u180c\0\u1845\0\u187e\0\u18b7\0\u18f0"+
    "\0\u1929\0\u1962\0\u199b\0\u19d4\0\u1a0d\0\u1a46\0\u1a7f\0\u1ab8"+
    "\0\u1af1\0\u1b2a\0\u1b63\0\u1b9c\0\u1bd5\0\u1c0e\0\u1c47\0\u1c80"+
    "\0\u1cb9\0\u1cf2\0\u1d2b\0\u1d64\0\u1d9d\0\u1dd6\0\u1e0f\0\u1e48"+
    "\0\u1e81\0\u1eba\0\u1ef3\0\u1f2c\0\u1f65\0\u1f9e\0\u1fd7\0\u2010"+
    "\0\u2049\0\u1f9e\0\71\0\u2082\0\u20bb\0\u20f4\0\u212d\0\u2166"+
    "\0\u219f\0\u21d8\0\u2211\0\71\0\u2082\0\u224a\0\u2283\0\u2211"+
    "\0\u2166\0\u22bc\0\u22f5\0\162\0\u232e\0\u2367\0\u23a0\0\u23d9"+
    "\0\162\0\u2211\0\u2412\0\u244b\0\u2484\0\u24bd\0\71\0\162"+
    "\0\71\0\162\0\71\0\u24f6\0\u252f\0\u252f\0\71\0\71"+
    "\0\u2568\0\u25a1\0\u25da\0\u2613\0\u2568\0\u24f6\0\u264c\0\162"+
    "\0\162\0\u2685\0\u26be\0\u26f7\0\u2730\0\u2769\0\162\0\u27a2"+
    "\0\u27db\0\u2814\0\u284d\0\u2886\0\u28bf\0\u28f8\0\u2931\0\u296a"+
    "\0\u29a3\0\u29dc\0\u2a15\0\u2a4e\0\u2a87\0\u2ac0\0\u2af9\0\u2b32"+
    "\0\u2b6b\0\u2ba4\0\u2bdd\0\u2c16\0\u2c4f\0\u2c88\0\u2cc1\0\u2cfa"+
    "\0\u2d33\0\u2d6c\0\u2da5\0\u2dde\0\u2e17\0\u2e50\0\u2e89\0\u2ec2"+
    "\0\u2efb\0\u2f34\0\u2f6d\0\u2fa6\0\u2fdf\0\u3018\0\u3051\0\u308a"+
    "\0\u30c3\0\u30fc\0\u3135\0\u316e\0\u31a7\0\71\0\u31e0\0\u3219"+
    "\0\u3252\0\71\0\u3252\0\u328b\0\u32c4\0\u32fd\0\u3336\0\u336f"+
    "\0\u33a8\0\u33e1\0\u341a\0\u3453\0\u348c\0\u34c5\0\u34fe\0\u3537"+
    "\0\u3570\0\u35a9\0\162\0\u35e2\0\u361b\0\u3654\0\u368d\0\u36c6"+
    "\0\u36ff\0\u3738\0\u3771\0\u37aa\0\u37e3\0\u381c\0\u3855\0\u388e"+
    "\0\u38c7\0\u3900\0\u3939\0\u3972\0\u39ab\0\u39e4\0\u3a1d\0\u3a56"+
    "\0\u3a8f\0\u3ac8\0\u3b01\0\u3b3a\0\u3b73\0\u3bac\0\u3be5\0\u3c1e"+
    "\0\u3c57\0\u3c90\0\u3cc9\0\u3d02\0\u3d3b\0\u3d74\0\u3dad\0\u3de6"+
    "\0\u3e1f\0\u3e58\0\u3e91\0\u3eca\0\u3f03\0\u3f3c\0\u3f75\0\u3fae"+
    "\0\u3fe7\0\u4020\0\u4059\0\u4092\0\71\0\71\0\u40cb\0\u4104"+
    "\0\u413d\0\u4176\0\u41af\0\u41af\0\u41e8\0\u4221\0\u413d\0\u4104"+
    "\0\u425a\0\u4293\0\u42cc\0\u4305\0\u4176\0\162\0\162\0\u433e"+
    "\0\u4377\0\u43b0\0\u43e9\0\u4422\0\71\0\u4422\0\u445b\0\u4494"+
    "\0\u44cd\0\u4506\0\u445b\0\u453f\0\u4494\0\u453f\0\u4578\0\u45b1"+
    "\0\162\0\u45ea\0\u4623\0\u465c\0\71\0\u4695\0\u465c\0\u4695"+
    "\0\u46ce\0\162\0\u4707\0\u4740\0\u4779\0\u47b2\0\u47eb\0\u4824"+
    "\0\71\0\u485d\0\u485d\0\u4896\0\162\0\u48cf\0\u4908\0\u4941"+
    "\0\u497a\0\u49b3\0\u49ec\0\u4a25\0\u4a5e\0\u4a97\0\u4ad0\0\u4b09"+
    "\0\u4b42\0\u4b7b\0\u4bb4\0\71\0\162";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[413];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\2\1\5\1\7"+
    "\1\10\2\3\1\11\4\4\1\2\1\12\1\13\1\14"+
    "\3\3\1\15\1\16\4\3\1\17\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\1\11\1\3\1\10\3\3\1\33\2\3\1\2\1\34"+
    "\1\35\1\2\1\36\1\37\1\2\72\0\2\3\5\0"+
    "\10\3\2\0\14\3\12\0\12\3\11\0\1\40\11\0"+
    "\4\40\42\0\1\41\11\0\1\5\2\0\1\5\66\0"+
    "\1\42\1\43\73\0\1\44\61\0\2\3\5\0\1\3"+
    "\1\45\6\3\1\0\1\46\7\3\1\45\4\3\12\0"+
    "\12\3\10\0\2\3\5\0\10\3\1\0\1\47\2\3"+
    "\1\50\11\3\12\0\12\3\20\0\1\51\1\0\1\52"+
    "\5\0\1\53\1\0\1\54\1\55\1\56\3\0\1\51"+
    "\1\57\2\0\1\60\13\0\1\52\1\61\17\0\2\3"+
    "\5\0\10\3\1\0\1\54\1\3\1\62\12\3\12\0"+
    "\12\3\10\0\2\3\5\0\10\3\1\0\1\56\3\3"+
    "\1\63\10\3\12\0\12\3\10\0\2\3\5\0\10\3"+
    "\1\0\1\64\2\3\1\65\10\3\1\66\12\0\12\3"+
    "\10\0\2\3\5\0\1\3\1\67\6\3\1\0\1\70"+
    "\7\3\1\67\3\3\1\71\12\0\12\3\10\0\2\3"+
    "\5\0\10\3\1\0\1\61\14\3\12\0\2\3\1\72"+
    "\7\3\10\0\2\3\5\0\10\3\1\0\1\57\10\3"+
    "\1\73\3\3\12\0\12\3\10\0\2\3\5\0\3\3"+
    "\1\74\4\3\1\0\1\52\14\3\12\0\1\3\1\74"+
    "\10\3\7\0\63\75\1\76\5\75\64\77\1\0\1\100"+
    "\3\77\66\101\1\102\2\101\67\103\1\0\1\104\2\0"+
    "\1\105\11\0\4\105\51\0\6\42\1\0\62\42\5\43"+
    "\1\106\63\43\11\0\1\107\60\0\2\3\5\0\2\3"+
    "\1\110\5\3\1\0\1\111\14\3\12\0\5\3\1\110"+
    "\4\3\21\0\1\111\6\0\1\111\33\0\1\111\23\0"+
    "\1\112\10\0\1\112\31\0\1\112\16\0\2\3\5\0"+
    "\1\113\7\3\1\0\1\112\14\3\12\0\3\3\1\113"+
    "\6\3\21\0\1\111\6\0\1\114\10\0\1\115\22\0"+
    "\1\111\34\0\1\116\12\0\1\116\44\0\1\112\1\0"+
    "\1\111\1\117\5\0\1\120\1\0\1\121\1\122\1\0"+
    "\1\123\3\0\1\115\1\0\1\116\1\124\13\0\1\117"+
    "\1\0\1\112\1\125\1\111\34\0\1\122\2\0\1\122"+
    "\54\0\1\112\2\0\1\117\5\0\1\126\27\0\1\117"+
    "\1\0\1\112\36\0\1\121\1\0\1\121\66\0\1\127"+
    "\4\0\1\127\63\0\1\130\4\0\1\131\25\0\1\125"+
    "\35\0\1\124\13\0\1\124\34\0\2\3\5\0\10\3"+
    "\1\0\1\122\2\3\1\132\11\3\12\0\12\3\10\0"+
    "\2\3\5\0\10\3\1\0\1\121\1\3\1\133\12\3"+
    "\12\0\12\3\22\0\1\117\5\0\1\134\4\0\1\131"+
    "\22\0\1\117\20\0\2\3\5\0\3\3\1\135\4\3"+
    "\1\0\1\117\14\3\12\0\1\3\1\135\10\3\10\0"+
    "\2\3\5\0\10\3\1\0\1\131\4\3\1\136\7\3"+
    "\12\0\12\3\10\0\2\3\5\0\10\3\1\0\1\115"+
    "\10\3\1\137\3\3\12\0\12\3\30\0\1\140\10\0"+
    "\1\115\21\0\1\125\15\0\2\3\5\0\10\3\1\0"+
    "\1\125\14\3\12\0\4\3\1\141\5\3\10\0\2\3"+
    "\5\0\10\3\1\0\1\124\13\3\1\142\12\0\12\3"+
    "\10\0\2\3\5\0\10\3\1\0\1\127\4\3\1\143"+
    "\7\3\12\0\12\3\10\0\2\3\5\0\10\3\1\0"+
    "\1\116\12\3\1\144\1\3\12\0\12\3\7\0\4\43"+
    "\1\145\1\106\63\43\12\0\1\146\57\0\2\3\5\0"+
    "\10\3\1\0\1\147\14\3\12\0\1\150\11\3\30\0"+
    "\1\147\26\0\1\147\41\0\1\151\34\0\1\151\13\0"+
    "\2\3\5\0\10\3\1\0\1\151\14\3\12\0\6\3"+
    "\1\152\3\3\30\0\1\153\11\0\1\154\14\0\1\147"+
    "\41\0\1\154\11\0\1\154\46\0\1\155\7\0\1\155"+
    "\7\0\1\155\60\0\1\156\32\0\1\156\25\0\1\155"+
    "\7\0\1\157\1\0\1\160\1\0\1\161\3\0\1\155"+
    "\1\162\1\154\1\0\1\163\12\0\1\147\3\0\1\156"+
    "\1\0\1\151\1\0\1\164\31\0\1\162\10\0\1\162"+
    "\57\0\1\165\3\0\1\165\64\0\1\166\1\0\1\160"+
    "\11\0\1\163\54\0\1\164\36\0\1\164\31\0\1\167"+
    "\3\0\1\167\64\0\1\170\32\0\1\156\1\0\1\151"+
    "\33\0\1\160\1\0\1\160\66\0\1\171\3\0\1\167"+
    "\7\0\1\163\54\0\1\163\13\0\1\163\34\0\2\3"+
    "\5\0\10\3\1\0\1\165\3\3\1\172\10\3\12\0"+
    "\12\3\10\0\2\3\5\0\10\3\1\0\1\162\10\3"+
    "\1\173\3\3\12\0\12\3\30\0\1\174\13\0\1\163"+
    "\16\0\1\156\15\0\2\3\5\0\10\3\1\0\1\156"+
    "\14\3\12\0\4\3\1\175\5\3\10\0\2\3\5\0"+
    "\10\3\1\0\1\163\13\3\1\176\12\0\12\3\10\0"+
    "\2\3\5\0\10\3\1\0\1\154\11\3\1\177\2\3"+
    "\12\0\12\3\30\0\1\200\3\0\1\167\5\0\1\154"+
    "\36\0\2\3\5\0\10\3\1\0\1\167\3\3\1\201"+
    "\10\3\12\0\12\3\10\0\2\3\5\0\10\3\1\0"+
    "\1\164\14\3\12\0\10\3\1\202\1\3\10\0\2\3"+
    "\5\0\10\3\1\0\1\160\1\3\1\203\12\3\12\0"+
    "\12\3\10\0\2\3\5\0\1\3\1\204\6\3\1\0"+
    "\1\155\7\3\1\204\4\3\12\0\12\3\22\0\1\205"+
    "\70\0\1\206\5\0\1\206\27\0\1\206\20\0\2\3"+
    "\5\0\3\3\1\207\4\3\1\0\1\206\14\3\12\0"+
    "\1\3\1\207\10\3\30\0\1\210\3\0\1\210\44\0"+
    "\2\3\5\0\10\3\1\0\1\210\3\3\1\211\10\3"+
    "\12\0\12\3\22\0\1\206\5\0\1\212\12\0\1\213"+
    "\14\0\1\206\40\0\1\213\12\0\1\213\55\0\1\214"+
    "\2\0\1\214\65\0\1\215\3\0\1\215\56\0\1\216"+
    "\5\0\1\217\2\0\1\220\1\221\1\222\5\0\1\223"+
    "\14\0\1\216\32\0\1\224\5\0\1\224\27\0\1\224"+
    "\40\0\1\222\4\0\1\222\63\0\1\225\12\0\1\225"+
    "\55\0\1\226\2\0\1\226\65\0\1\227\4\0\1\227"+
    "\55\0\1\224\5\0\1\230\2\0\1\226\24\0\1\224"+
    "\40\0\1\231\4\0\1\231\63\0\1\221\3\0\1\221"+
    "\64\0\1\232\2\0\1\226\1\0\1\231\43\0\2\3"+
    "\5\0\10\3\1\0\1\227\4\3\1\233\7\3\12\0"+
    "\12\3\10\0\2\3\5\0\10\3\1\0\1\225\12\3"+
    "\1\234\1\3\12\0\12\3\30\0\1\235\2\0\1\226"+
    "\1\215\44\0\2\3\5\0\10\3\1\0\1\215\3\3"+
    "\1\236\10\3\12\0\12\3\10\0\2\3\5\0\10\3"+
    "\1\0\1\226\2\3\1\237\11\3\12\0\12\3\10\0"+
    "\2\3\5\0\10\3\1\0\1\213\12\3\1\240\1\3"+
    "\12\0\12\3\30\0\1\241\4\0\1\231\5\0\1\213"+
    "\35\0\2\3\5\0\10\3\1\0\1\231\4\3\1\242"+
    "\7\3\12\0\12\3\10\0\2\3\5\0\3\3\1\243"+
    "\4\3\1\0\1\224\14\3\12\0\1\3\1\243\10\3"+
    "\10\0\2\3\5\0\10\3\1\0\1\214\2\3\1\244"+
    "\11\3\12\0\12\3\23\0\1\245\75\0\1\246\2\0"+
    "\1\246\45\0\2\3\5\0\10\3\1\0\1\246\2\3"+
    "\1\247\11\3\12\0\12\3\30\0\1\250\35\0\1\250"+
    "\12\0\2\3\5\0\10\3\1\0\1\250\14\3\12\0"+
    "\7\3\1\251\2\3\30\0\1\252\2\0\1\246\10\0"+
    "\1\253\54\0\1\253\13\0\1\253\54\0\1\254\13\0"+
    "\1\254\43\0\1\255\10\0\1\255\31\0\1\255\36\0"+
    "\1\256\2\0\1\246\25\0\1\257\26\0\1\255\1\260"+
    "\1\0\1\261\5\0\1\262\2\0\1\246\1\263\1\0"+
    "\1\264\1\0\1\260\3\0\1\265\13\0\1\261\1\257"+
    "\1\255\3\0\1\250\24\0\1\261\5\0\1\266\13\0"+
    "\1\254\13\0\1\261\27\0\1\255\10\0\1\267\31\0"+
    "\1\255\3\0\1\250\32\0\1\270\3\0\1\263\1\0"+
    "\1\264\52\0\1\260\7\0\1\271\7\0\1\260\3\0"+
    "\1\253\54\0\1\257\30\0\1\257\27\0\1\260\7\0"+
    "\1\260\7\0\1\260\52\0\1\261\5\0\1\261\27\0"+
    "\1\261\40\0\1\264\5\0\1\264\54\0\1\261\5\0"+
    "\1\272\27\0\1\261\1\257\37\0\1\263\3\0\1\263"+
    "\56\0\1\261\5\0\1\273\3\0\1\263\23\0\1\261"+
    "\20\0\2\3\5\0\10\3\1\0\1\264\5\3\1\274"+
    "\6\3\12\0\12\3\10\0\2\3\5\0\1\3\1\275"+
    "\6\3\1\0\1\260\7\3\1\275\4\3\12\0\12\3"+
    "\17\0\1\255\2\0\1\261\5\0\1\276\27\0\1\261"+
    "\1\0\1\255\16\0\2\3\5\0\1\277\7\3\1\0"+
    "\1\255\14\3\12\0\3\3\1\277\6\3\10\0\2\3"+
    "\5\0\3\3\1\300\4\3\1\0\1\261\14\3\12\0"+
    "\1\3\1\300\10\3\10\0\2\3\5\0\10\3\1\0"+
    "\1\253\13\3\1\301\12\0\12\3\30\0\1\302\3\0"+
    "\1\263\7\0\1\253\34\0\2\3\5\0\10\3\1\0"+
    "\1\263\3\3\1\303\10\3\12\0\12\3\10\0\2\3"+
    "\5\0\10\3\1\0\1\257\14\3\12\0\2\3\1\304"+
    "\7\3\10\0\2\3\5\0\10\3\1\0\1\254\13\3"+
    "\1\305\12\0\12\3\24\0\1\306\74\0\1\307\13\0"+
    "\1\307\34\0\2\3\5\0\10\3\1\0\1\307\13\3"+
    "\1\310\12\0\12\3\20\0\1\311\7\0\1\311\7\0"+
    "\1\311\40\0\2\3\5\0\1\3\1\312\6\3\1\0"+
    "\1\311\7\3\1\312\4\3\12\0\12\3\30\0\2\313"+
    "\61\0\1\314\5\0\1\314\27\0\1\314\40\0\1\315"+
    "\13\0\1\315\54\0\1\316\13\0\1\316\54\0\1\317"+
    "\36\0\1\317\1\320\30\0\1\321\2\0\1\321\55\0"+
    "\1\311\1\0\1\314\5\0\1\322\1\313\1\0\1\323"+
    "\4\0\1\311\3\0\1\315\13\0\1\314\6\0\1\317"+
    "\1\320\30\0\1\324\2\0\1\324\65\0\1\325\1\313"+
    "\1\0\1\321\55\0\1\311\1\0\1\314\5\0\1\326"+
    "\7\0\1\311\17\0\1\314\40\0\1\327\2\0\1\321"+
    "\10\0\1\316\54\0\1\323\2\0\1\323\45\0\2\3"+
    "\5\0\10\3\1\0\1\317\14\3\12\0\10\3\1\330"+
    "\1\331\22\0\1\314\5\0\1\332\2\0\1\321\24\0"+
    "\1\314\20\0\2\3\5\0\3\3\1\333\4\3\1\0"+
    "\1\314\14\3\12\0\1\3\1\333\10\3\10\0\2\3"+
    "\5\0\10\3\1\0\1\321\2\3\1\334\11\3\12\0"+
    "\12\3\10\0\2\3\5\0\10\3\1\0\1\324\2\3"+
    "\1\335\11\3\12\0\12\3\10\0\2\3\5\0\10\3"+
    "\1\0\1\316\13\3\1\336\12\0\12\3\10\0\2\3"+
    "\5\0\10\3\1\0\1\313\1\337\13\3\12\0\12\3"+
    "\25\0\1\340\73\0\1\341\11\0\1\342\1\343\13\0"+
    "\1\344\41\0\1\345\5\0\1\346\5\0\1\347\54\0"+
    "\1\350\2\0\1\350\65\0\1\351\2\0\1\350\2\0"+
    "\1\352\3\0\1\342\1\343\1\347\12\0\1\344\41\0"+
    "\1\353\2\0\1\350\2\0\1\354\62\0\1\354\5\0"+
    "\1\354\62\0\1\355\2\0\1\350\2\0\1\346\5\0"+
    "\1\347\54\0\1\356\2\0\1\350\6\0\1\342\1\343"+
    "\13\0\1\344\21\0\2\3\5\0\10\3\1\0\1\341"+
    "\11\3\1\357\1\360\1\3\12\0\1\361\11\3\10\0"+
    "\2\3\5\0\10\3\1\0\1\350\2\3\1\362\11\3"+
    "\12\0\12\3\10\0\2\3\5\0\10\3\1\0\1\354"+
    "\5\3\1\363\6\3\12\0\12\3\10\0\2\3\5\0"+
    "\10\3\1\0\1\345\5\3\1\364\5\3\1\365\12\0"+
    "\12\3\26\0\1\366\64\0\1\367\5\0\1\370\3\0"+
    "\1\371\23\0\1\367\32\0\1\367\5\0\1\367\27\0"+
    "\1\367\40\0\1\372\3\0\1\372\64\0\1\373\3\0"+
    "\1\373\64\0\1\374\1\375\12\0\1\376\54\0\1\376"+
    "\13\0\1\376\54\0\2\375\67\0\1\377\13\0\1\377"+
    "\46\0\1\367\5\0\1\u0100\1\375\2\0\1\371\6\0"+
    "\1\u0101\1\u0102\13\0\1\367\40\0\1\u0103\12\0\1\u0101"+
    "\1\376\54\0\1\u0104\12\0\1\u0101\1\377\54\0\1\u0101"+
    "\12\0\1\u0101\55\0\1\u0105\1\375\12\0\1\u0102\46\0"+
    "\1\367\5\0\1\u0106\3\0\1\371\7\0\1\377\13\0"+
    "\1\367\20\0\2\3\5\0\3\3\1\u0107\4\3\1\0"+
    "\1\367\14\3\12\0\1\3\1\u0107\10\3\10\0\2\3"+
    "\5\0\10\3\1\0\1\372\3\3\1\u0108\10\3\12\0"+
    "\12\3\10\0\2\3\5\0\10\3\1\0\1\373\3\3"+
    "\1\u0109\10\3\12\0\12\3\10\0\2\3\5\0\10\3"+
    "\1\0\1\377\13\3\1\u010a\12\0\12\3\10\0\2\3"+
    "\5\0\10\3\1\0\1\u0101\12\3\1\u010b\1\3\12\0"+
    "\12\3\10\0\2\3\5\0\10\3\1\0\1\376\13\3"+
    "\1\u010c\12\0\12\3\10\0\2\3\5\0\10\3\1\0"+
    "\1\375\1\u010d\13\3\12\0\12\3\27\0\1\u010e\71\0"+
    "\1\u010f\2\0\1\u010f\65\0\1\u0110\2\0\1\u010f\1\0"+
    "\1\u0111\6\0\1\u0112\54\0\1\u0113\4\0\1\u0111\6\0"+
    "\1\u0112\54\0\1\u0111\4\0\1\u0111\63\0\1\u0112\13\0"+
    "\1\u0112\54\0\1\u0114\4\0\1\u0115\21\0\1\u0116\41\0"+
    "\1\u0116\26\0\1\u0116\41\0\1\u0115\4\0\1\u0115\63\0"+
    "\1\u0117\26\0\1\u0117\31\0\1\u0118\7\0\1\u0119\2\0"+
    "\1\u010f\1\0\1\u011a\2\0\1\u0118\3\0\1\u0112\12\0"+
    "\1\u011b\31\0\1\u0118\7\0\1\u0118\7\0\1\u0118\60\0"+
    "\1\u011c\4\0\1\u0115\21\0\1\u0117\31\0\1\u0118\7\0"+
    "\1\u011d\4\0\1\u0115\2\0\1\u0118\50\0\1\u0118\7\0"+
    "\1\u011e\7\0\1\u0118\16\0\1\u0117\41\0\1\u011f\4\0"+
    "\1\u0115\21\0\1\u011b\41\0\1\u0120\2\0\1\u010f\1\0"+
    "\1\u0111\6\0\1\u0112\12\0\1\u0117\21\0\2\3\5\0"+
    "\10\3\1\0\1\u010f\2\3\1\u0121\11\3\12\0\12\3"+
    "\10\0\2\3\5\0\10\3\1\0\1\u0111\4\3\1\u0122"+
    "\7\3\12\0\12\3\10\0\2\3\5\0\10\3\1\0"+
    "\1\u0112\13\3\1\u0123\12\0\12\3\10\0\2\3\5\0"+
    "\10\3\1\0\1\u0117\14\3\12\0\1\u0124\11\3\10\0"+
    "\2\3\5\0\1\3\1\u0125\6\3\1\0\1\u0118\7\3"+
    "\1\u0125\4\3\12\0\12\3\10\0\2\3\5\0\10\3"+
    "\1\0\1\u0115\4\3\1\u0126\7\3\12\0\12\3\10\0"+
    "\2\3\5\0\10\3\1\0\1\u0116\14\3\12\0\1\u0127"+
    "\11\3\30\0\1\u0128\2\0\1\u0128\65\0\1\u0128\2\0"+
    "\1\u0128\10\0\1\u0129\54\0\1\u0129\13\0\1\u0129\54\0"+
    "\1\u012a\13\0\1\u012a\54\0\1\u012b\13\0\1\u012b\54\0"+
    "\1\u012c\13\0\1\u012c\44\0\1\u012d\7\0\1\u012d\7\0"+
    "\1\u012d\60\0\1\u012e\11\0\1\u012e\46\0\1\u012d\7\0"+
    "\1\u012f\2\0\1\u0128\4\0\1\u012d\1\0\1\u012e\1\0"+
    "\1\u0130\54\0\1\u0131\13\0\1\u0131\44\0\1\u012d\7\0"+
    "\1\u0132\7\0\1\u012d\3\0\1\u012c\44\0\1\u012d\7\0"+
    "\1\u0133\7\0\1\u012d\3\0\1\u012b\54\0\1\u0134\11\0"+
    "\1\u012e\1\0\1\u012b\44\0\1\u012d\7\0\1\u0135\7\0"+
    "\1\u012d\1\0\1\u012e\46\0\1\u012d\7\0\1\u0136\7\0"+
    "\1\u012d\3\0\1\u012a\44\0\1\u012d\7\0\1\u0137\2\0"+
    "\1\u0128\4\0\1\u012d\3\0\1\u0129\34\0\2\3\5\0"+
    "\10\3\1\0\1\u0128\2\3\1\u0138\11\3\12\0\12\3"+
    "\10\0\2\3\5\0\10\3\1\0\1\u0129\13\3\1\u0139"+
    "\12\0\12\3\10\0\2\3\5\0\1\3\1\u013a\6\3"+
    "\1\0\1\u012d\7\3\1\u013a\4\3\12\0\12\3\10\0"+
    "\2\3\5\0\10\3\1\0\1\u012e\11\3\1\u013b\2\3"+
    "\12\0\12\3\10\0\2\3\5\0\10\3\1\0\1\u012b"+
    "\13\3\1\u013c\12\0\12\3\10\0\2\3\5\0\10\3"+
    "\1\0\1\u012c\13\3\1\u013d\12\0\12\3\22\0\1\u013e"+
    "\5\0\1\u013e\27\0\1\u013e\32\0\1\u013f\5\0\1\u013f"+
    "\27\0\1\u013f\27\0\1\u0140\10\0\1\u0141\2\0\1\u0142"+
    "\26\0\1\u0140\36\0\1\u0142\2\0\1\u0142\54\0\1\u0140"+
    "\10\0\1\u0140\31\0\1\u0140\36\0\1\u0143\2\0\1\u0143"+
    "\57\0\1\u0144\5\0\1\u0144\27\0\1\u0144\27\0\1\u0140"+
    "\2\0\1\u0145\5\0\1\u0146\2\0\1\u0147\24\0\1\u0145"+
    "\1\0\1\u0140\25\0\1\u0140\2\0\1\u013f\5\0\1\u0148"+
    "\2\0\1\u0142\24\0\1\u013f\1\0\1\u0140\30\0\1\u013f"+
    "\5\0\1\u0149\2\0\1\u0142\24\0\1\u013f\27\0\1\u0140"+
    "\10\0\1\u014a\2\0\1\u0143\26\0\1\u0140\36\0\1\u0147"+
    "\2\0\1\u0147\57\0\1\u0144\5\0\1\u014b\2\0\1\u0142"+
    "\24\0\1\u0144\32\0\1\u0144\5\0\1\u014c\2\0\1\u0143"+
    "\24\0\1\u0144\27\0\1\u0140\10\0\1\u014d\2\0\1\u0147"+
    "\26\0\1\u0140\30\0\1\u013e\5\0\1\u014e\2\0\1\u0143"+
    "\24\0\1\u013e\20\0\2\3\5\0\3\3\1\u014f\4\3"+
    "\1\0\1\u013e\14\3\12\0\1\3\1\u014f\10\3\10\0"+
    "\2\3\5\0\3\3\1\u0150\4\3\1\0\1\u013f\14\3"+
    "\12\0\1\3\1\u0150\10\3\10\0\2\3\5\0\10\3"+
    "\1\0\1\u0143\2\3\1\u0151\11\3\12\0\12\3\10\0"+
    "\2\3\5\0\3\3\1\u0152\4\3\1\0\1\u0144\14\3"+
    "\12\0\1\3\1\u0152\10\3\10\0\2\3\5\0\10\3"+
    "\1\0\1\u0142\2\3\1\u0153\11\3\12\0\12\3\10\0"+
    "\2\3\5\0\1\u0154\7\3\1\0\1\u0140\14\3\12\0"+
    "\3\3\1\u0154\6\3\30\0\2\u0155\67\0\2\u0156\67\0"+
    "\1\u0157\3\0\1\u0157\56\0\1\u0158\5\0\1\u0159\3\0"+
    "\1\u0157\23\0\1\u0158\32\0\1\u0158\5\0\1\u0158\27\0"+
    "\1\u0158\40\0\1\u015a\1\0\1\u015a\66\0\1\u015b\12\0"+
    "\1\u015b\55\0\1\u015c\1\u0155\11\0\1\u015b\47\0\1\u0158"+
    "\5\0\1\u015d\1\u0155\1\u015a\1\0\1\u0157\6\0\1\u015b"+
    "\14\0\1\u0158\32\0\1\u0158\5\0\1\u015e\1\0\1\u015a"+
    "\25\0\1\u0158\32\0\1\u0158\5\0\1\u015f\1\u0156\2\0"+
    "\1\u0157\23\0\1\u0158\32\0\1\u0158\5\0\1\u0160\1\u0156"+
    "\26\0\1\u0158\40\0\1\u0161\1\0\1\u015a\1\0\1\u0157"+
    "\56\0\1\u0158\5\0\1\u0162\12\0\1\u015b\14\0\1\u0158"+
    "\40\0\1\u0163\1\0\1\u015a\10\0\1\u015b\47\0\1\u0158"+
    "\5\0\1\u0164\1\0\1\u015a\1\0\1\u0157\23\0\1\u0158"+
    "\40\0\1\u0165\1\u0155\1\u015a\46\0\2\3\5\0\10\3"+
    "\1\0\1\u0155\1\u0166\13\3\12\0\12\3\10\0\2\3"+
    "\5\0\10\3\1\0\1\u0156\1\u0167\13\3\12\0\12\3"+
    "\10\0\2\3\5\0\10\3\1\0\1\u015a\1\3\1\u0168"+
    "\12\3\12\0\12\3\10\0\2\3\5\0\10\3\1\0"+
    "\1\u015b\12\3\1\u0169\1\3\12\0\12\3\10\0\2\3"+
    "\5\0\3\3\1\u016a\4\3\1\0\1\u0158\14\3\12\0"+
    "\1\3\1\u016a\10\3\10\0\2\3\5\0\10\3\1\0"+
    "\1\u0157\3\3\1\u016b\10\3\12\0\12\3\30\0\1\u016c"+
    "\32\0\1\u016c\35\0\1\u016d\12\0\1\u016d\55\0\1\u016e"+
    "\12\0\1\u016d\17\0\1\u016c\35\0\1\u016f\13\0\1\u016f"+
    "\54\0\1\u0170\13\0\1\u0170\54\0\1\u0171\12\0\1\u016d"+
    "\1\u0172\16\0\1\u016c\35\0\1\u0173\12\0\1\u016d\1\u016f"+
    "\54\0\1\u0174\13\0\1\u016f\16\0\1\u016c\35\0\1\u0175"+
    "\12\0\1\u016d\1\u0170\54\0\1\u0172\13\0\1\u0172\54\0"+
    "\1\u0176\12\0\1\u016d\1\u016f\16\0\1\u016c\15\0\2\3"+
    "\5\0\10\3\1\0\1\u016f\13\3\1\u0177\12\0\12\3"+
    "\10\0\2\3\5\0\10\3\1\0\1\u0170\13\3\1\u0178"+
    "\12\0\12\3\10\0\2\3\5\0\10\3\1\0\1\u016d"+
    "\12\3\1\u0179\1\3\12\0\12\3\10\0\2\3\5\0"+
    "\10\3\1\0\1\u016c\14\3\12\0\4\3\1\u017a\5\3"+
    "\30\0\1\u017b\3\0\1\u017b\64\0\1\u017c\13\0\1\u017c"+
    "\54\0\2\u017d\67\0\1\u017e\1\u017d\2\0\1\u017b\7\0"+
    "\1\u017c\54\0\1\u017f\1\u017d\12\0\1\u017c\54\0\1\u0180"+
    "\3\0\1\u017b\7\0\1\u017c\34\0\2\3\5\0\10\3"+
    "\1\0\1\u017c\13\3\1\u0181\12\0\12\3\10\0\2\3"+
    "\5\0\10\3\1\0\1\u017d\1\u0182\13\3\12\0\12\3"+
    "\10\0\2\3\5\0\10\3\1\0\1\u017b\3\3\1\u0183"+
    "\10\3\12\0\12\3\17\0\1\u0184\10\0\1\u0184\31\0"+
    "\1\u0184\36\0\2\u0185\56\0\1\u0184\10\0\1\u0186\1\u0185"+
    "\30\0\1\u0184\16\0\2\3\5\0\10\3\1\0\1\u0185"+
    "\1\u0187\13\3\12\0\12\3\10\0\2\3\5\0\1\u0188"+
    "\7\3\1\0\1\u0184\14\3\12\0\3\3\1\u0188\6\3"+
    "\20\0\1\u0189\7\0\1\u0189\7\0\1\u0189\60\0\1\u018a"+
    "\1\0\1\u018a\56\0\1\u0189\7\0\1\u018b\1\0\1\u018a"+
    "\5\0\1\u0189\40\0\2\3\5\0\10\3\1\0\1\u018a"+
    "\1\3\1\u018c\12\3\12\0\12\3\10\0\2\3\5\0"+
    "\1\3\1\u018d\6\3\1\0\1\u0189\7\3\1\u018d\4\3"+
    "\12\0\12\3\22\0\1\u018e\5\0\1\u018e\27\0\1\u018e"+
    "\20\0\2\3\5\0\3\3\1\u018f\4\3\1\0\1\u018e"+
    "\14\3\12\0\1\3\1\u018f\10\3\30\0\1\u0190\6\0"+
    "\1\u0190\41\0\2\3\5\0\10\3\1\0\1\u0190\6\3"+
    "\1\u0191\5\3\12\0\12\3\30\0\1\u0192\3\0\1\u0192"+
    "\44\0\2\3\5\0\10\3\1\0\1\u0192\3\3\1\u0193"+
    "\10\3\12\0\12\3\30\0\2\u0194\47\0\2\3\5\0"+
    "\10\3\1\0\1\u0194\1\u0195\13\3\12\0\12\3\30\0"+
    "\1\u0196\1\0\1\u0196\46\0\2\3\5\0\10\3\1\0"+
    "\1\u0196\1\3\1\u0197\12\3\12\0\12\3\30\0\1\u0198"+
    "\3\0\1\u0198\44\0\2\3\5\0\10\3\1\0\1\u0198"+
    "\3\3\1\u0199\10\3\12\0\12\3\17\0\1\u019a\10\0"+
    "\1\u019a\31\0\1\u019a\16\0\2\3\5\0\1\u019b\7\3"+
    "\1\0\1\u019a\14\3\12\0\3\3\1\u019b\6\3\20\0"+
    "\1\u019c\7\0\1\u019c\7\0\1\u019c\40\0\2\3\5\0"+
    "\1\3\1\u019d\6\3\1\0\1\u019c\7\3\1\u019d\4\3"+
    "\12\0\12\3\7\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[19437];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\15\1\12\11\6\1\2\0\1\1\2\0"+
    "\1\1\2\0\1\1\11\0\2\1\1\0\3\1\1\0"+
    "\4\1\1\0\1\11\1\0\1\1\1\0\1\11\1\0"+
    "\2\1\2\0\1\1\2\0\1\1\16\0\2\1\1\0"+
    "\3\1\1\0\5\1\2\0\1\1\1\0\1\1\4\0"+
    "\1\1\4\0\1\11\5\0\2\1\1\0\3\1\1\0"+
    "\4\1\2\0\1\1\1\0\1\1\21\0\2\1\1\0"+
    "\3\1\1\0\3\1\2\0\1\1\1\0\2\1\1\11"+
    "\4\0\1\1\1\0\1\1\1\0\1\11\1\1\2\0"+
    "\2\1\2\0\2\1\1\0\7\1\1\0\1\11\1\1"+
    "\1\11\1\1\1\11\1\0\1\1\1\0\2\11\1\0"+
    "\1\1\2\0\2\1\1\0\2\1\1\0\5\1\17\0"+
    "\7\1\21\0\7\1\1\11\1\0\1\1\1\0\1\11"+
    "\1\1\5\0\1\1\6\0\10\1\20\0\6\1\21\0"+
    "\6\1\2\11\5\0\2\1\1\0\2\1\4\0\7\1"+
    "\1\0\1\11\1\1\2\0\1\1\1\0\1\1\1\0"+
    "\6\1\2\0\1\11\2\1\1\0\3\1\3\0\2\1"+
    "\1\11\1\0\3\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\11\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[413];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    private Symbol symbol(int type, Object value){
        return new Symbol(type, yyline, yycolumn, value);
    }
    private Symbol symbol(int type){
        return new Symbol(type, yyline, yycolumn);
    }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  LexicoCup(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  LexicoCup(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 23: 
          { return new Symbol(sym.Valores, yychar, yyline, yytext());
          }
        case 34: break;
        case 12: 
          { return new Symbol(sym.DosPuntos, yychar, yyline, yytext());
          }
        case 35: break;
        case 1: 
          { return new Symbol(sym.ERROR, yychar, yyline, yytext());
          }
        case 36: break;
        case 27: 
          { return new Symbol(sym.GraficaPie, yychar, yyline, yytext());
          }
        case 37: break;
        case 22: 
          { return new Symbol(sym.Archivo, yychar, yyline, yytext());
          }
        case 38: break;
        case 20: 
          { return new Symbol(sym.STRING, yychar, yyline, yytext());
          }
        case 39: break;
        case 10: 
          { return new Symbol(sym.CorcheteFinal, yychar, yyline, yytext());
          }
        case 40: break;
        case 16: 
          { return new Symbol(sym.Decimal, yychar, yyline, yytext());
          }
        case 41: break;
        case 5: 
          { return new Symbol(sym.ParentesisInicio, yychar, yyline, yytext());
          }
        case 42: break;
        case 31: 
          { return new Symbol(sym.DefinirGlobales, yychar, yyline, yytext());
          }
        case 43: break;
        case 19: 
          { return new Symbol(sym.Titulo, yychar, yyline, yytext());
          }
        case 44: break;
        case 15: 
          { return new Symbol(sym.Cadena, yychar, yyline, yytext());
          }
        case 45: break;
        case 13: 
          { return new Symbol(sym.Dollar, yychar, yyline, yytext());
          }
        case 46: break;
        case 9: 
          { return new Symbol(sym.CorcheteInicio, yychar, yyline, yytext());
          }
        case 47: break;
        case 32: 
          { return new Symbol(sym.PuntajeEspecifico, yychar, yyline, yytext());
          }
        case 48: break;
        case 24: 
          { return new Symbol(sym.TituloX, yychar, yyline, yytext());
          }
        case 49: break;
        case 28: 
          { return new Symbol(sym.GraficaBarras, yychar, yyline, yytext());
          }
        case 50: break;
        case 6: 
          { return new Symbol(sym.ParentesisFinal, yychar, yyline, yytext());
          }
        case 51: break;
        case 26: 
          { return new Symbol(sym.Coma, yychar, yyline, yytext());
          }
        case 52: break;
        case 21: 
          { return new Symbol(sym.Compare, yychar, yyline, yytext());
          }
        case 53: break;
        case 17: 
          { return new Symbol(sym.EjeX, yychar, yyline, yytext());
          }
        case 54: break;
        case 8: 
          { return new Symbol(sym.LlaveFinal, yychar, yyline, yytext());
          }
        case 55: break;
        case 18: 
          { return new Symbol(sym.DOUBLE, yychar, yyline, yytext());
          }
        case 56: break;
        case 2: 
          { return new Symbol(sym.Identificador, yychar, yyline, yytext());
          }
        case 57: break;
        case 11: 
          { return new Symbol(sym.PuntoComa, yychar, yyline, yytext());
          }
        case 58: break;
        case 29: 
          { return new Symbol(sym.GraficaLineas, yychar, yyline, yytext());
          }
        case 59: break;
        case 4: 
          { return new Symbol(sym.Igual, yychar, yyline, yytext());
          }
        case 60: break;
        case 33: 
          { return new Symbol(sym.GenerarReporteEstadistico, yychar, yyline, yytext());
          }
        case 61: break;
        case 25: 
          { return new Symbol(sym.TituloY, yychar, yyline, yytext());
          }
        case 62: break;
        case 3: 
          { /*Ignore*/
          }
        case 63: break;
        case 14: 
          { return new Symbol(sym.Ruta, yychar, yyline, yytext());
          }
        case 64: break;
        case 30: 
          { return new Symbol(sym.PuntajeGeneral, yychar, yyline, yytext());
          }
        case 65: break;
        case 7: 
          { return new Symbol(sym.LlaveInicio, yychar, yyline, yytext());
          }
        case 66: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(sym.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
